// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <hxinc/kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_FramebufferOptions
#include <hxinc/kha/FramebufferOptions.h>
#endif
#ifndef INCLUDED_kha_LoaderImpl
#include <hxinc/kha/LoaderImpl.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <hxinc/kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha_SystemImpl
#include <hxinc/kha/SystemImpl.h>
#endif
#ifndef INCLUDED_kha_SystemOptions
#include <hxinc/kha/SystemOptions.h>
#endif
#ifndef INCLUDED_kha_Window
#include <hxinc/kha/Window.h>
#endif
#ifndef INCLUDED_kha_WindowOptions
#include <hxinc/kha/WindowOptions.h>
#endif
#ifndef INCLUDED_kha_Worker
#include <hxinc/kha/Worker.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio
#include <hxinc/kha/audio2/Audio.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio1
#include <hxinc/kha/audio2/Audio1.h>
#endif
#ifndef INCLUDED_kha_graphics1_Graphics
#include <hxinc/kha/graphics1/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics1
#include <hxinc/kha/graphics2/Graphics1.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_input_Gamepad
#include <hxinc/kha/input/Gamepad.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <hxinc/kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_input_MouseImpl
#include <hxinc/kha/input/MouseImpl.h>
#endif
#ifndef INCLUDED_kha_input_Pen
#include <hxinc/kha/input/Pen.h>
#endif
#ifndef INCLUDED_kha_input_Sensor
#include <hxinc/kha/input/Sensor.h>
#endif
#ifndef INCLUDED_kha_input_Surface
#include <hxinc/kha/input/Surface.h>
#endif
#ifndef INCLUDED_kha_kore_Keyboard
#include <hxinc/kha/kore/Keyboard.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics
#include <hxinc/kha/kore/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics2
#include <hxinc/kha/kore/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_53_getMouse,"kha.SystemImpl","getMouse",0x58b17b24,"kha.SystemImpl.getMouse","kha/SystemImpl.hx",53,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_58_getPen,"kha.SystemImpl","getPen",0xfb4e2c18,"kha.SystemImpl.getPen","kha/SystemImpl.hx",58,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_63_getKeyboard,"kha.SystemImpl","getKeyboard",0x95414108,"kha.SystemImpl.getKeyboard","kha/SystemImpl.hx",63,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_72_getTime,"kha.SystemImpl","getTime",0xebc04bee,"kha.SystemImpl.getTime","kha/SystemImpl.hx",72,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_76_windowWidth,"kha.SystemImpl","windowWidth",0xc2590da1,"kha.SystemImpl.windowWidth","kha/SystemImpl.hx",76,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_80_windowHeight,"kha.SystemImpl","windowHeight",0x01e257ec,"kha.SystemImpl.windowHeight","kha/SystemImpl.hx",80,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_84_screenDpi,"kha.SystemImpl","screenDpi",0x32261c3c,"kha.SystemImpl.screenDpi","kha/SystemImpl.hx",84,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_88_getVsync,"kha.SystemImpl","getVsync",0x89f492d0,"kha.SystemImpl.getVsync","kha/SystemImpl.hx",88,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_92_getRefreshRate,"kha.SystemImpl","getRefreshRate",0x9bd0909a,"kha.SystemImpl.getRefreshRate","kha/SystemImpl.hx",92,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_96_getScreenRotation,"kha.SystemImpl","getScreenRotation",0x5ad503eb,"kha.SystemImpl.getScreenRotation","kha/SystemImpl.hx",96,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_101_getSystemId,"kha.SystemImpl","getSystemId",0x8f01350b,"kha.SystemImpl.getSystemId","kha/SystemImpl.hx",101,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_105_vibrate,"kha.SystemImpl","vibrate",0xab879c5a,"kha.SystemImpl.vibrate","kha/SystemImpl.hx",105,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_110_getLanguage,"kha.SystemImpl","getLanguage",0xa72904b9,"kha.SystemImpl.getLanguage","kha/SystemImpl.hx",110,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_113_requestShutdown,"kha.SystemImpl","requestShutdown",0xb0567230,"kha.SystemImpl.requestShutdown","kha/SystemImpl.hx",113,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_129_init,"kha.SystemImpl","init",0xcab17205,"kha.SystemImpl.init","kha/SystemImpl.hx",129,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_151_onWindowCreated,"kha.SystemImpl","onWindowCreated",0xf4248264,"kha.SystemImpl.onWindowCreated","kha/SystemImpl.hx",151,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_159_postInit,"kha.SystemImpl","postInit",0xf06ff105,"kha.SystemImpl.postInit","kha/SystemImpl.hx",159,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_181_loadFinished,"kha.SystemImpl","loadFinished",0x869d33ad,"kha.SystemImpl.loadFinished","kha/SystemImpl.hx",181,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_217_lockMouse,"kha.SystemImpl","lockMouse",0x417c4725,"kha.SystemImpl.lockMouse","kha/SystemImpl.hx",217,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_226_unlockMouse,"kha.SystemImpl","unlockMouse",0xd4111e6c,"kha.SystemImpl.unlockMouse","kha/SystemImpl.hx",226,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_235_canLockMouse,"kha.SystemImpl","canLockMouse",0x028cf3ff,"kha.SystemImpl.canLockMouse","kha/SystemImpl.hx",235,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_239_isMouseLocked,"kha.SystemImpl","isMouseLocked",0x414b4bb0,"kha.SystemImpl.isMouseLocked","kha/SystemImpl.hx",239,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_243_notifyOfMouseLockChange,"kha.SystemImpl","notifyOfMouseLockChange",0x88c3c00b,"kha.SystemImpl.notifyOfMouseLockChange","kha/SystemImpl.hx",243,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_249_removeFromMouseLockChange,"kha.SystemImpl","removeFromMouseLockChange",0x6a1154fd,"kha.SystemImpl.removeFromMouseLockChange","kha/SystemImpl.hx",249,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_255_hideSystemCursor,"kha.SystemImpl","hideSystemCursor",0xfb22e57c,"kha.SystemImpl.hideSystemCursor","kha/SystemImpl.hx",255,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_259_showSystemCursor,"kha.SystemImpl","showSystemCursor",0x3a347237,"kha.SystemImpl.showSystemCursor","kha/SystemImpl.hx",259,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_262_frame,"kha.SystemImpl","frame",0xd8fd5798,"kha.SystemImpl.frame","kha/SystemImpl.hx",262,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_301_checkGamepadConnected,"kha.SystemImpl","checkGamepadConnected",0xed8b703b,"kha.SystemImpl.checkGamepadConnected","kha/SystemImpl.hx",301,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_305_keyDown,"kha.SystemImpl","keyDown",0x688839cc,"kha.SystemImpl.keyDown","kha/SystemImpl.hx",305,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_309_keyUp,"kha.SystemImpl","keyUp",0xb1789945,"kha.SystemImpl.keyUp","kha/SystemImpl.hx",309,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_313_keyPress,"kha.SystemImpl","keyPress",0xf9674ed9,"kha.SystemImpl.keyPress","kha/SystemImpl.hx",313,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_319_mouseDown,"kha.SystemImpl","mouseDown",0xe8f82212,"kha.SystemImpl.mouseDown","kha/SystemImpl.hx",319,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_325_mouseUp,"kha.SystemImpl","mouseUp",0x8cb3c40b,"kha.SystemImpl.mouseUp","kha/SystemImpl.hx",325,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_331_mouseMove,"kha.SystemImpl","mouseMove",0xeeeb0cc1,"kha.SystemImpl.mouseMove","kha/SystemImpl.hx",331,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_340_mouseWheel,"kha.SystemImpl","mouseWheel",0xdc1484eb,"kha.SystemImpl.mouseWheel","kha/SystemImpl.hx",340,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_344_mouseLeave,"kha.SystemImpl","mouseLeave",0x84ad8547,"kha.SystemImpl.mouseLeave","kha/SystemImpl.hx",344,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_348_penDown,"kha.SystemImpl","penDown",0xe30b2a06,"kha.SystemImpl.penDown","kha/SystemImpl.hx",348,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_352_penUp,"kha.SystemImpl","penUp",0x927126ff,"kha.SystemImpl.penUp","kha/SystemImpl.hx",352,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_356_penMove,"kha.SystemImpl","penMove",0xe8fe14b5,"kha.SystemImpl.penMove","kha/SystemImpl.hx",356,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_360_gamepad1Axis,"kha.SystemImpl","gamepad1Axis",0xbebda126,"kha.SystemImpl.gamepad1Axis","kha/SystemImpl.hx",360,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_364_gamepad1Button,"kha.SystemImpl","gamepad1Button",0xd5b2d1b7,"kha.SystemImpl.gamepad1Button","kha/SystemImpl.hx",364,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_368_gamepad2Axis,"kha.SystemImpl","gamepad2Axis",0x522435a7,"kha.SystemImpl.gamepad2Axis","kha/SystemImpl.hx",368,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_372_gamepad2Button,"kha.SystemImpl","gamepad2Button",0xff484878,"kha.SystemImpl.gamepad2Button","kha/SystemImpl.hx",372,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_376_gamepad3Axis,"kha.SystemImpl","gamepad3Axis",0xe58aca28,"kha.SystemImpl.gamepad3Axis","kha/SystemImpl.hx",376,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_380_gamepad3Button,"kha.SystemImpl","gamepad3Button",0x28ddbf39,"kha.SystemImpl.gamepad3Button","kha/SystemImpl.hx",380,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_384_gamepad4Axis,"kha.SystemImpl","gamepad4Axis",0x78f15ea9,"kha.SystemImpl.gamepad4Axis","kha/SystemImpl.hx",384,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_388_gamepad4Button,"kha.SystemImpl","gamepad4Button",0x527335fa,"kha.SystemImpl.gamepad4Button","kha/SystemImpl.hx",388,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_392_touchStart,"kha.SystemImpl","touchStart",0x7229b4d8,"kha.SystemImpl.touchStart","kha/SystemImpl.hx",392,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_396_touchEnd,"kha.SystemImpl","touchEnd",0xec7f1ad1,"kha.SystemImpl.touchEnd","kha/SystemImpl.hx",396,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_400_touchMove,"kha.SystemImpl","touchMove",0x0802e35b,"kha.SystemImpl.touchMove","kha/SystemImpl.hx",400,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_404_foreground,"kha.SystemImpl","foreground",0x057c7578,"kha.SystemImpl.foreground","kha/SystemImpl.hx",404,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_408_resume,"kha.SystemImpl","resume",0x60ae07e2,"kha.SystemImpl.resume","kha/SystemImpl.hx",408,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_412_pause,"kha.SystemImpl","pause",0x8fd1b661,"kha.SystemImpl.pause","kha/SystemImpl.hx",412,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_416_background,"kha.SystemImpl","background",0x1aaaf0a3,"kha.SystemImpl.background","kha/SystemImpl.hx",416,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_420_shutdown,"kha.SystemImpl","shutdown",0x5781520b,"kha.SystemImpl.shutdown","kha/SystemImpl.hx",420,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_424_dropFiles,"kha.SystemImpl","dropFiles",0x3c867cb3,"kha.SystemImpl.dropFiles","kha/SystemImpl.hx",424,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_428_copy,"kha.SystemImpl","copy",0xc6baf2aa,"kha.SystemImpl.copy","kha/SystemImpl.hx",428,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_437_cut,"kha.SystemImpl","cut",0xed60242d,"kha.SystemImpl.cut","kha/SystemImpl.hx",437,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_446_paste,"kha.SystemImpl","paste",0x8fd032be,"kha.SystemImpl.paste","kha/SystemImpl.hx",446,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_454_login,"kha.SystemImpl","login",0x4b6db8d4,"kha.SystemImpl.login","kha/SystemImpl.hx",454,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_459_loginevent,"kha.SystemImpl","loginevent",0x0d448ec6,"kha.SystemImpl.loginevent","kha/SystemImpl.hx",459,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_465_logoutevent,"kha.SystemImpl","logoutevent",0x49bd9efb,"kha.SystemImpl.logoutevent","kha/SystemImpl.hx",465,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_475_initKore,"kha.SystemImpl","initKore",0x383af6fc,"kha.SystemImpl.initKore","kha/SystemImpl.hx",475,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_480_setKeepScreenOn,"kha.SystemImpl","setKeepScreenOn",0xd7fb933d,"kha.SystemImpl.setKeepScreenOn","kha/SystemImpl.hx",480,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_484_loadUrl,"kha.SystemImpl","loadUrl",0xd5247514,"kha.SystemImpl.loadUrl","kha/SystemImpl.hx",484,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_489_getGamepadId,"kha.SystemImpl","getGamepadId",0xa6b49b5b,"kha.SystemImpl.getGamepadId","kha/SystemImpl.hx",489,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_493_safeZone,"kha.SystemImpl","safeZone",0x8b71cb8e,"kha.SystemImpl.safeZone","kha/SystemImpl.hx",493,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_497_automaticSafeZone,"kha.SystemImpl","automaticSafeZone",0x772d45cf,"kha.SystemImpl.automaticSafeZone","kha/SystemImpl.hx",497,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_501_setSafeZone,"kha.SystemImpl","setSafeZone",0xd6810186,"kha.SystemImpl.setSafeZone","kha/SystemImpl.hx",501,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_505_unlockAchievement,"kha.SystemImpl","unlockAchievement",0x6392b7f6,"kha.SystemImpl.unlockAchievement","kha/SystemImpl.hx",505,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_51_boot,"kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",51,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_118_boot,"kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",118,0x57d4ce24)
namespace kha{

void SystemImpl_obj::__construct() { }

Dynamic SystemImpl_obj::__CreateEmpty() { return new SystemImpl_obj; }

void *SystemImpl_obj::_hx_vtable = 0;

Dynamic SystemImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SystemImpl_obj > _hx_result = new SystemImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SystemImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x69d75eab;
}

bool SystemImpl_obj::needs3d;

 ::kha::input::Mouse SystemImpl_obj::getMouse(int num){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_53_getMouse)
HXLINE(  54)		if ((num != 0)) {
HXLINE(  54)			return null();
            		}
HXLINE(  55)		return ::kha::SystemImpl_obj::mouse;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getMouse,return )

 ::kha::input::Pen SystemImpl_obj::getPen(int num){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_58_getPen)
HXLINE(  59)		if ((num != 0)) {
HXLINE(  59)			return null();
            		}
HXLINE(  60)		return ::kha::SystemImpl_obj::pen;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getPen,return )

 ::kha::input::Keyboard SystemImpl_obj::getKeyboard(int num){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_63_getKeyboard)
HXLINE(  64)		if ((num != 0)) {
HXLINE(  64)			return null();
            		}
HXLINE(  65)		return ::kha::SystemImpl_obj::keyboard;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getKeyboard,return )

Float SystemImpl_obj::getTime(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_72_getTime)
            	
		return Kore::System::time();
	

HXDLIN(  72)		return ( (Float)(0) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getTime,return )

int SystemImpl_obj::windowWidth(int windowId){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_76_windowWidth)
HXDLIN(  76)		return Kore::System::windowWidth(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,windowWidth,return )

int SystemImpl_obj::windowHeight(int windowId){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_80_windowHeight)
HXDLIN(  80)		return Kore::System::windowHeight(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,windowHeight,return )

int SystemImpl_obj::screenDpi(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_84_screenDpi)
HXDLIN(  84)		return Kore::Display::primary()->pixelsPerInch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,screenDpi,return )

bool SystemImpl_obj::getVsync(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_88_getVsync)
HXDLIN(  88)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getVsync,return )

int SystemImpl_obj::getRefreshRate(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_92_getRefreshRate)
HXDLIN(  92)		return 60;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getRefreshRate,return )

int SystemImpl_obj::getScreenRotation(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_96_getScreenRotation)
HXDLIN(  96)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getScreenRotation,return )

::String SystemImpl_obj::getSystemId(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_101_getSystemId)
            	return ::String(Kore::System::systemId());

HXDLIN( 101)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getSystemId,return )

void SystemImpl_obj::vibrate(int ms){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_105_vibrate)
HXDLIN( 105)		Kore::System::vibrate(ms);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,vibrate,(void))

::String SystemImpl_obj::getLanguage(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_110_getLanguage)
            	return ::String(Kore::System::language());

HXDLIN( 110)		return HX_("en",69,58,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getLanguage,return )

bool SystemImpl_obj::requestShutdown(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_113_requestShutdown)
HXLINE( 114)		Kore::System::stop();
HXLINE( 115)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,requestShutdown,return )

::Array< ::Dynamic> SystemImpl_obj::framebuffers;

 ::kha::input::Keyboard SystemImpl_obj::keyboard;

 ::kha::input::Mouse SystemImpl_obj::mouse;

 ::kha::input::Pen SystemImpl_obj::pen;

 ::kha::input::Gamepad SystemImpl_obj::gamepad1;

 ::kha::input::Gamepad SystemImpl_obj::gamepad2;

 ::kha::input::Gamepad SystemImpl_obj::gamepad3;

 ::kha::input::Gamepad SystemImpl_obj::gamepad4;

 ::kha::input::Surface SystemImpl_obj::surface;

::Array< ::Dynamic> SystemImpl_obj::mouseLockListeners;

void SystemImpl_obj::init( ::kha::SystemOptions options, ::Dynamic callback){
            	HX_GC_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_129_init)
HXLINE( 130)		::kha::SystemImpl_obj::initKore(options->title,options->width,options->height,options->window,options->framebuffer);
HXLINE( 131)		::kha::Window_obj::_init(null(),null());
HXLINE( 133)		 ::Dynamic this1 =  ::__hxcpp_thread_current();
HXDLIN( 133)		::kha::Worker_obj::_mainThread = this1;
HXLINE( 135)		post_kore_init();
HXLINE( 137)		::kha::Shaders_obj::init();
HXLINE( 140)		 ::kha::kore::graphics4::Graphics g4 =  ::kha::kore::graphics4::Graphics_obj::__alloc( HX_CTX ,null());
HXLINE( 141)		g4->_hx_set_window(HX_CTX, 0);
HXLINE( 143)		 ::kha::Framebuffer framebuffer =  ::kha::Framebuffer_obj::__alloc( HX_CTX ,0,null(),null(),g4);
HXLINE( 144)		 ::kha::graphics2::Graphics1 _hx_tmp =  ::kha::graphics2::Graphics1_obj::__alloc( HX_CTX ,framebuffer);
HXDLIN( 144)		framebuffer->init(_hx_tmp, ::kha::kore::graphics4::Graphics2_obj::__alloc( HX_CTX ,framebuffer),g4);
HXLINE( 145)		::kha::SystemImpl_obj::framebuffers->push(framebuffer);
HXLINE( 148)		::kha::SystemImpl_obj::postInit(callback);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,init,(void))

void SystemImpl_obj::onWindowCreated(int index){
            	HX_GC_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_151_onWindowCreated)
HXLINE( 152)		 ::kha::kore::graphics4::Graphics g4 =  ::kha::kore::graphics4::Graphics_obj::__alloc( HX_CTX ,null());
HXLINE( 153)		g4->_hx_set_window(HX_CTX, index);
HXLINE( 154)		 ::kha::Framebuffer framebuffer =  ::kha::Framebuffer_obj::__alloc( HX_CTX ,index,null(),null(),g4);
HXLINE( 155)		 ::kha::graphics2::Graphics1 _hx_tmp =  ::kha::graphics2::Graphics1_obj::__alloc( HX_CTX ,framebuffer);
HXDLIN( 155)		framebuffer->init(_hx_tmp, ::kha::kore::graphics4::Graphics2_obj::__alloc( HX_CTX ,framebuffer),g4);
HXLINE( 156)		::kha::SystemImpl_obj::framebuffers->push(framebuffer);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,onWindowCreated,(void))

void SystemImpl_obj::postInit( ::Dynamic callback){
            	HX_GC_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_159_postInit)
HXLINE( 160)		::kha::SystemImpl_obj::mouseLockListeners = ::Array_obj< ::Dynamic>::__new();
HXLINE( 161)		::kha::Scheduler_obj::realTime();
HXLINE( 162)		::kha::input::Sensor_obj::get(0);
HXLINE( 163)		::kha::SystemImpl_obj::keyboard =  ::kha::kore::Keyboard_obj::__alloc( HX_CTX );
HXLINE( 164)		::kha::SystemImpl_obj::mouse =  ::kha::input::MouseImpl_obj::__alloc( HX_CTX );
HXLINE( 165)		::kha::SystemImpl_obj::pen =  ::kha::input::Pen_obj::__alloc( HX_CTX );
HXLINE( 166)		::kha::SystemImpl_obj::gamepad1 =  ::kha::input::Gamepad_obj::__alloc( HX_CTX ,0,null());
HXLINE( 167)		::kha::SystemImpl_obj::gamepad2 =  ::kha::input::Gamepad_obj::__alloc( HX_CTX ,1,null());
HXLINE( 168)		::kha::SystemImpl_obj::gamepad3 =  ::kha::input::Gamepad_obj::__alloc( HX_CTX ,2,null());
HXLINE( 169)		::kha::SystemImpl_obj::gamepad4 =  ::kha::input::Gamepad_obj::__alloc( HX_CTX ,3,null());
HXLINE( 170)		::kha::SystemImpl_obj::surface =  ::kha::input::Surface_obj::__alloc( HX_CTX );
HXLINE( 171)		::kha::audio2::Audio_obj::_init();
HXLINE( 172)		::kha::audio2::Audio1_obj::_init();
HXLINE( 173)		::kha::Scheduler_obj::init();
HXLINE( 174)		::kha::SystemImpl_obj::loadFinished();
HXLINE( 175)		callback(::kha::Window_obj::get(0));
HXLINE( 177)		run_kore();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,postInit,(void))

void SystemImpl_obj::loadFinished(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_181_loadFinished)
HXDLIN( 181)		::kha::Scheduler_obj::start(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,loadFinished,(void))

void SystemImpl_obj::lockMouse(hx::Null< int >  __o_windowId){
            		int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_217_lockMouse)
HXDLIN( 217)		if (!(::kha::SystemImpl_obj::isMouseLocked(null()))) {
HXLINE( 218)			Kore::Mouse::the()->lock(windowId);;
HXLINE( 219)			{
HXLINE( 219)				int _g = 0;
HXDLIN( 219)				::Array< ::Dynamic> _g1 = ::kha::SystemImpl_obj::mouseLockListeners;
HXDLIN( 219)				while((_g < _g1->length)){
HXLINE( 219)					 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 219)					_g = (_g + 1);
HXLINE( 220)					listener();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,lockMouse,(void))

void SystemImpl_obj::unlockMouse(hx::Null< int >  __o_windowId){
            		int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_226_unlockMouse)
HXDLIN( 226)		if (::kha::SystemImpl_obj::isMouseLocked(null())) {
HXLINE( 227)			Kore::Mouse::the()->unlock(windowId);;
HXLINE( 228)			{
HXLINE( 228)				int _g = 0;
HXDLIN( 228)				::Array< ::Dynamic> _g1 = ::kha::SystemImpl_obj::mouseLockListeners;
HXDLIN( 228)				while((_g < _g1->length)){
HXLINE( 228)					 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 228)					_g = (_g + 1);
HXLINE( 229)					listener();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,unlockMouse,(void))

bool SystemImpl_obj::canLockMouse(hx::Null< int >  __o_windowId){
            		int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_235_canLockMouse)
HXDLIN( 235)		return Kore::Mouse::the()->canLock(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,canLockMouse,return )

bool SystemImpl_obj::isMouseLocked(hx::Null< int >  __o_windowId){
            		int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_239_isMouseLocked)
HXDLIN( 239)		return Kore::Mouse::the()->isLocked(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,isMouseLocked,return )

void SystemImpl_obj::notifyOfMouseLockChange( ::Dynamic func, ::Dynamic error,hx::Null< int >  __o_windowId){
            		int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_243_notifyOfMouseLockChange)
HXDLIN( 243)		bool _hx_tmp;
HXDLIN( 243)		if (::kha::SystemImpl_obj::canLockMouse(windowId)) {
HXDLIN( 243)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXDLIN( 243)			_hx_tmp = false;
            		}
HXDLIN( 243)		if (_hx_tmp) {
HXLINE( 244)			::kha::SystemImpl_obj::mouseLockListeners->push(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,notifyOfMouseLockChange,(void))

void SystemImpl_obj::removeFromMouseLockChange( ::Dynamic func, ::Dynamic error,hx::Null< int >  __o_windowId){
            		int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_249_removeFromMouseLockChange)
HXDLIN( 249)		bool _hx_tmp;
HXDLIN( 249)		if (::kha::SystemImpl_obj::canLockMouse(windowId)) {
HXDLIN( 249)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXDLIN( 249)			_hx_tmp = false;
            		}
HXDLIN( 249)		if (_hx_tmp) {
HXLINE( 250)			::kha::SystemImpl_obj::mouseLockListeners->remove(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,removeFromMouseLockChange,(void))

void SystemImpl_obj::hideSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_255_hideSystemCursor)
HXDLIN( 255)		Kore::Mouse::the()->show(false);;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,hideSystemCursor,(void))

void SystemImpl_obj::showSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_259_showSystemCursor)
HXDLIN( 259)		Kore::Mouse::the()->show(true);;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,showSystemCursor,(void))

void SystemImpl_obj::frame(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_262_frame)
HXLINE( 278)		::kha::LoaderImpl_obj::tick();
HXLINE( 279)		::kha::Scheduler_obj::executeFrame();
HXLINE( 280)		::kha::System_obj::render(::kha::SystemImpl_obj::framebuffers);
HXLINE( 281)		if ((::kha::kore::graphics4::Graphics_obj::lastWindow != -1)) {
HXLINE( 282)			int win = ::kha::kore::graphics4::Graphics_obj::lastWindow;
HXLINE( 283)			Kore::Graphics4::end(win);;
            		}
            		else {
HXLINE( 286)			Kore::Graphics4::begin(0);;
HXLINE( 287)			Kore::Graphics4::end(0);;
            		}
HXLINE( 289)		::kha::kore::graphics4::Graphics_obj::lastWindow = -1;
HXLINE( 291)		bool _hx_tmp;
HXDLIN( 291)		if (::kha::SystemImpl_obj::gamepad1->connected) {
HXLINE( 291)			_hx_tmp = !(::kha::SystemImpl_obj::checkGamepadConnected());
            		}
            		else {
HXLINE( 291)			_hx_tmp = false;
            		}
HXDLIN( 291)		if (_hx_tmp) {
HXLINE( 292)			::kha::input::Gamepad_obj::sendDisconnectEvent(0);
            		}
            		else {
HXLINE( 294)			bool _hx_tmp1;
HXDLIN( 294)			if (!(::kha::SystemImpl_obj::gamepad1->connected)) {
HXLINE( 294)				_hx_tmp1 = ::kha::SystemImpl_obj::checkGamepadConnected();
            			}
            			else {
HXLINE( 294)				_hx_tmp1 = false;
            			}
HXDLIN( 294)			if (_hx_tmp1) {
HXLINE( 295)				::kha::input::Gamepad_obj::sendConnectEvent(0);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,frame,(void))

bool SystemImpl_obj::checkGamepadConnected(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_301_checkGamepadConnected)
            	return Kore::Gamepad::get(0)->connected();

HXDLIN( 301)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,checkGamepadConnected,return )

void SystemImpl_obj::keyDown(int code){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_305_keyDown)
HXDLIN( 305)		::kha::SystemImpl_obj::keyboard->sendDownEvent(code);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,keyDown,(void))

void SystemImpl_obj::keyUp(int code){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_309_keyUp)
HXDLIN( 309)		::kha::SystemImpl_obj::keyboard->sendUpEvent(code);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,keyUp,(void))

void SystemImpl_obj::keyPress(int _hx_char){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_313_keyPress)
HXDLIN( 313)		::kha::SystemImpl_obj::keyboard->sendPressEvent(::String::fromCharCode(_hx_char));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,keyPress,(void))

int SystemImpl_obj::mouseX;

int SystemImpl_obj::mouseY;

void SystemImpl_obj::mouseDown(int windowId,int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_319_mouseDown)
HXLINE( 320)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 321)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 322)		::kha::SystemImpl_obj::mouse->sendDownEvent(windowId,button,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,mouseDown,(void))

void SystemImpl_obj::mouseUp(int windowId,int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_325_mouseUp)
HXLINE( 326)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 327)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 328)		::kha::SystemImpl_obj::mouse->sendUpEvent(windowId,button,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,mouseUp,(void))

void SystemImpl_obj::mouseMove(int windowId,int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_331_mouseMove)
HXLINE( 334)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 335)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 336)		::kha::SystemImpl_obj::mouse->sendMoveEvent(windowId,x,y,movementX,movementY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(SystemImpl_obj,mouseMove,(void))

void SystemImpl_obj::mouseWheel(int windowId,int delta){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_340_mouseWheel)
HXDLIN( 340)		::kha::SystemImpl_obj::mouse->sendWheelEvent(windowId,delta);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,mouseWheel,(void))

void SystemImpl_obj::mouseLeave(int windowId){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_344_mouseLeave)
HXDLIN( 344)		::kha::SystemImpl_obj::mouse->sendLeaveEvent(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,mouseLeave,(void))

void SystemImpl_obj::penDown(int windowId,int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_348_penDown)
HXDLIN( 348)		::kha::SystemImpl_obj::pen->sendDownEvent(windowId,x,y,pressure);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,penDown,(void))

void SystemImpl_obj::penUp(int windowId,int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_352_penUp)
HXDLIN( 352)		::kha::SystemImpl_obj::pen->sendUpEvent(windowId,x,y,pressure);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,penUp,(void))

void SystemImpl_obj::penMove(int windowId,int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_356_penMove)
HXDLIN( 356)		::kha::SystemImpl_obj::pen->sendMoveEvent(windowId,x,y,pressure);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,penMove,(void))

void SystemImpl_obj::gamepad1Axis(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_360_gamepad1Axis)
HXDLIN( 360)		::kha::SystemImpl_obj::gamepad1->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad1Axis,(void))

void SystemImpl_obj::gamepad1Button(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_364_gamepad1Button)
HXDLIN( 364)		::kha::SystemImpl_obj::gamepad1->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad1Button,(void))

void SystemImpl_obj::gamepad2Axis(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_368_gamepad2Axis)
HXDLIN( 368)		::kha::SystemImpl_obj::gamepad2->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad2Axis,(void))

void SystemImpl_obj::gamepad2Button(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_372_gamepad2Button)
HXDLIN( 372)		::kha::SystemImpl_obj::gamepad2->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad2Button,(void))

void SystemImpl_obj::gamepad3Axis(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_376_gamepad3Axis)
HXDLIN( 376)		::kha::SystemImpl_obj::gamepad3->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad3Axis,(void))

void SystemImpl_obj::gamepad3Button(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_380_gamepad3Button)
HXDLIN( 380)		::kha::SystemImpl_obj::gamepad3->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad3Button,(void))

void SystemImpl_obj::gamepad4Axis(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_384_gamepad4Axis)
HXDLIN( 384)		::kha::SystemImpl_obj::gamepad4->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad4Axis,(void))

void SystemImpl_obj::gamepad4Button(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_388_gamepad4Button)
HXDLIN( 388)		::kha::SystemImpl_obj::gamepad4->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad4Button,(void))

void SystemImpl_obj::touchStart(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_392_touchStart)
HXDLIN( 392)		::kha::SystemImpl_obj::surface->sendTouchStartEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchStart,(void))

void SystemImpl_obj::touchEnd(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_396_touchEnd)
HXDLIN( 396)		::kha::SystemImpl_obj::surface->sendTouchEndEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchEnd,(void))

void SystemImpl_obj::touchMove(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_400_touchMove)
HXDLIN( 400)		::kha::SystemImpl_obj::surface->sendMoveEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchMove,(void))

void SystemImpl_obj::foreground(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_404_foreground)
HXDLIN( 404)		::kha::System_obj::foreground();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,foreground,(void))

void SystemImpl_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_408_resume)
HXDLIN( 408)		::kha::System_obj::resume();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,resume,(void))

void SystemImpl_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_412_pause)
HXDLIN( 412)		::kha::System_obj::pause();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pause,(void))

void SystemImpl_obj::background(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_416_background)
HXDLIN( 416)		::kha::System_obj::background();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,background,(void))

void SystemImpl_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_420_shutdown)
HXDLIN( 420)		::kha::System_obj::shutdown();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,shutdown,(void))

void SystemImpl_obj::dropFiles(::String filePath){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_424_dropFiles)
HXDLIN( 424)		::kha::System_obj::dropFiles(filePath);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,dropFiles,(void))

::String SystemImpl_obj::copy(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_428_copy)
HXDLIN( 428)		if (hx::IsNotNull( ::kha::System_obj::copyListener )) {
HXLINE( 429)			return ( (::String)(::kha::System_obj::copyListener()) );
            		}
            		else {
HXLINE( 432)			return null();
            		}
HXLINE( 428)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,copy,return )

::String SystemImpl_obj::cut(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_437_cut)
HXDLIN( 437)		if (hx::IsNotNull( ::kha::System_obj::cutListener )) {
HXLINE( 438)			return ( (::String)(::kha::System_obj::cutListener()) );
            		}
            		else {
HXLINE( 441)			return null();
            		}
HXLINE( 437)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,cut,return )

void SystemImpl_obj::paste(::String data){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_446_paste)
HXDLIN( 446)		if (hx::IsNotNull( ::kha::System_obj::pasteListener )) {
HXLINE( 447)			::kha::System_obj::pasteListener(data);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,paste,(void))

void SystemImpl_obj::login(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_454_login)
            	
		Kore::System::login();
	

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,login,(void))

void SystemImpl_obj::loginevent(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_459_loginevent)
HXDLIN( 459)		if (hx::IsNotNull( ::kha::System_obj::loginListener )) {
HXLINE( 460)			::kha::System_obj::loginListener();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,loginevent,(void))

void SystemImpl_obj::logoutevent(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_465_logoutevent)
HXDLIN( 465)		if (hx::IsNotNull( ::kha::System_obj::logoutListener )) {
HXLINE( 466)			::kha::System_obj::logoutListener();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,logoutevent,(void))

void SystemImpl_obj::initKore(::String name,int width,int height, ::kha::WindowOptions win, ::kha::FramebufferOptions frame){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_475_initKore)
            	
		Kore::WindowOptions window = convertWindowOptions(win);
		Kore::FramebufferOptions framebuffer = convertFramebufferOptions(frame);
		init_kore(name, width, height, &window, &framebuffer);
	

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(SystemImpl_obj,initKore,(void))

void SystemImpl_obj::setKeepScreenOn(bool on){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_480_setKeepScreenOn)
HXDLIN( 480)		Kore::System::setKeepScreenOn(on);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,setKeepScreenOn,(void))

void SystemImpl_obj::loadUrl(::String url){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_484_loadUrl)
HXDLIN( 484)		Kore::System::loadURL(url);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,loadUrl,(void))

::String SystemImpl_obj::getGamepadId(int index){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_489_getGamepadId)
            	return ::String(::getGamepadId(index));

HXDLIN( 489)		return HX_("unknown",8a,23,7b,e1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getGamepadId,return )

Float SystemImpl_obj::safeZone(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_493_safeZone)
HXDLIN( 493)		return Kore::System::safeZone();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,safeZone,return )

bool SystemImpl_obj::automaticSafeZone(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_497_automaticSafeZone)
HXDLIN( 497)		return Kore::System::automaticSafeZone();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,automaticSafeZone,return )

void SystemImpl_obj::setSafeZone(Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_501_setSafeZone)
HXDLIN( 501)		Kore::System::setSafeZone(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,setSafeZone,(void))

void SystemImpl_obj::unlockAchievement(int id){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_505_unlockAchievement)
HXDLIN( 505)		Kore::System::unlockAchievement(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,unlockAchievement,(void))


SystemImpl_obj::SystemImpl_obj()
{
}

bool SystemImpl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { outValue = ( pen ); return true; }
		if (HX_FIELD_EQ(inName,"cut") ) { outValue = cut_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { outValue = ( mouse ); return true; }
		if (HX_FIELD_EQ(inName,"frame") ) { outValue = frame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyUp") ) { outValue = keyUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"penUp") ) { outValue = penUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pause") ) { outValue = pause_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"paste") ) { outValue = paste_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"login") ) { outValue = login_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getPen") ) { outValue = getPen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseX") ) { outValue = ( mouseX ); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { outValue = ( mouseY ); return true; }
		if (HX_FIELD_EQ(inName,"resume") ) { outValue = resume_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"needs3d") ) { outValue = ( needs3d ); return true; }
		if (HX_FIELD_EQ(inName,"getTime") ) { outValue = getTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"vibrate") ) { outValue = vibrate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"surface") ) { outValue = ( surface ); return true; }
		if (HX_FIELD_EQ(inName,"keyDown") ) { outValue = keyDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseUp") ) { outValue = mouseUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"penDown") ) { outValue = penDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"penMove") ) { outValue = penMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadUrl") ) { outValue = loadUrl_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getMouse") ) { outValue = getMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVsync") ) { outValue = getVsync_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyboard") ) { outValue = ( keyboard ); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1") ) { outValue = ( gamepad1 ); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2") ) { outValue = ( gamepad2 ); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3") ) { outValue = ( gamepad3 ); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4") ) { outValue = ( gamepad4 ); return true; }
		if (HX_FIELD_EQ(inName,"postInit") ) { outValue = postInit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyPress") ) { outValue = keyPress_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchEnd") ) { outValue = touchEnd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shutdown") ) { outValue = shutdown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initKore") ) { outValue = initKore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"safeZone") ) { outValue = safeZone_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"screenDpi") ) { outValue = screenDpi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lockMouse") ) { outValue = lockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseDown") ) { outValue = mouseDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseMove") ) { outValue = mouseMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchMove") ) { outValue = touchMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dropFiles") ) { outValue = dropFiles_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mouseWheel") ) { outValue = mouseWheel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseLeave") ) { outValue = mouseLeave_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchStart") ) { outValue = touchStart_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"foreground") ) { outValue = foreground_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"background") ) { outValue = background_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loginevent") ) { outValue = loginevent_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getKeyboard") ) { outValue = getKeyboard_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"windowWidth") ) { outValue = windowWidth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSystemId") ) { outValue = getSystemId_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLanguage") ) { outValue = getLanguage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unlockMouse") ) { outValue = unlockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"logoutevent") ) { outValue = logoutevent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setSafeZone") ) { outValue = setSafeZone_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"windowHeight") ) { outValue = windowHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"framebuffers") ) { outValue = ( framebuffers ); return true; }
		if (HX_FIELD_EQ(inName,"loadFinished") ) { outValue = loadFinished_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"canLockMouse") ) { outValue = canLockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1Axis") ) { outValue = gamepad1Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2Axis") ) { outValue = gamepad2Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3Axis") ) { outValue = gamepad3Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4Axis") ) { outValue = gamepad4Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGamepadId") ) { outValue = getGamepadId_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isMouseLocked") ) { outValue = isMouseLocked_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getRefreshRate") ) { outValue = getRefreshRate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1Button") ) { outValue = gamepad1Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2Button") ) { outValue = gamepad2Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3Button") ) { outValue = gamepad3Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4Button") ) { outValue = gamepad4Button_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"requestShutdown") ) { outValue = requestShutdown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onWindowCreated") ) { outValue = onWindowCreated_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setKeepScreenOn") ) { outValue = setKeepScreenOn_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hideSystemCursor") ) { outValue = hideSystemCursor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"showSystemCursor") ) { outValue = showSystemCursor_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getScreenRotation") ) { outValue = getScreenRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"automaticSafeZone") ) { outValue = automaticSafeZone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unlockAchievement") ) { outValue = unlockAchievement_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mouseLockListeners") ) { outValue = ( mouseLockListeners ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"checkGamepadConnected") ) { outValue = checkGamepadConnected_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"notifyOfMouseLockChange") ) { outValue = notifyOfMouseLockChange_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"removeFromMouseLockChange") ) { outValue = removeFromMouseLockChange_dyn(); return true; }
	}
	return false;
}

bool SystemImpl_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=ioValue.Cast<  ::kha::input::Pen >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=ioValue.Cast<  ::kha::input::Mouse >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mouseX") ) { mouseX=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { mouseY=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"needs3d") ) { needs3d=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"surface") ) { surface=ioValue.Cast<  ::kha::input::Surface >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { keyboard=ioValue.Cast<  ::kha::input::Keyboard >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1") ) { gamepad1=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2") ) { gamepad2=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3") ) { gamepad3=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4") ) { gamepad4=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"framebuffers") ) { framebuffers=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mouseLockListeners") ) { mouseLockListeners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *SystemImpl_obj_sMemberStorageInfo = 0;
static hx::StaticInfo SystemImpl_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &SystemImpl_obj::needs3d,HX_("needs3d",6e,d5,2d,aa)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &SystemImpl_obj::framebuffers,HX_("framebuffers",e6,3a,ca,84)},
	{hx::fsObject /*  ::kha::input::Keyboard */ ,(void *) &SystemImpl_obj::keyboard,HX_("keyboard",a7,bc,29,68)},
	{hx::fsObject /*  ::kha::input::Mouse */ ,(void *) &SystemImpl_obj::mouse,HX_("mouse",25,16,65,0c)},
	{hx::fsObject /*  ::kha::input::Pen */ ,(void *) &SystemImpl_obj::pen,HX_("pen",d9,54,55,00)},
	{hx::fsObject /*  ::kha::input::Gamepad */ ,(void *) &SystemImpl_obj::gamepad1,HX_("gamepad1",70,ac,9e,cb)},
	{hx::fsObject /*  ::kha::input::Gamepad */ ,(void *) &SystemImpl_obj::gamepad2,HX_("gamepad2",71,ac,9e,cb)},
	{hx::fsObject /*  ::kha::input::Gamepad */ ,(void *) &SystemImpl_obj::gamepad3,HX_("gamepad3",72,ac,9e,cb)},
	{hx::fsObject /*  ::kha::input::Gamepad */ ,(void *) &SystemImpl_obj::gamepad4,HX_("gamepad4",73,ac,9e,cb)},
	{hx::fsObject /*  ::kha::input::Surface */ ,(void *) &SystemImpl_obj::surface,HX_("surface",2d,66,49,5d)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &SystemImpl_obj::mouseLockListeners,HX_("mouseLockListeners",af,da,5c,62)},
	{hx::fsInt,(void *) &SystemImpl_obj::mouseX,HX_("mouseX",93,4a,0e,cc)},
	{hx::fsInt,(void *) &SystemImpl_obj::mouseY,HX_("mouseY",94,4a,0e,cc)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void SystemImpl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SystemImpl_obj::needs3d,"needs3d");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::framebuffers,"framebuffers");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::keyboard,"keyboard");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouse,"mouse");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::pen,"pen");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad1,"gamepad1");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad2,"gamepad2");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad3,"gamepad3");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad4,"gamepad4");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::surface,"surface");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseLockListeners,"mouseLockListeners");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseX,"mouseX");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseY,"mouseY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SystemImpl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::needs3d,"needs3d");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::framebuffers,"framebuffers");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::keyboard,"keyboard");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouse,"mouse");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::pen,"pen");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad1,"gamepad1");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad2,"gamepad2");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad3,"gamepad3");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad4,"gamepad4");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::surface,"surface");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseLockListeners,"mouseLockListeners");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseX,"mouseX");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseY,"mouseY");
};

#endif

hx::Class SystemImpl_obj::__mClass;

static ::String SystemImpl_obj_sStaticFields[] = {
	HX_("needs3d",6e,d5,2d,aa),
	HX_("getMouse",af,25,3c,6c),
	HX_("getPen",e3,8d,24,a3),
	HX_("getKeyboard",5d,7f,1d,8e),
	HX_("getTime",c3,7b,7f,1f),
	HX_("windowWidth",f6,4b,35,bb),
	HX_("windowHeight",f7,a3,bc,c9),
	HX_("screenDpi",51,ab,f0,37),
	HX_("getVsync",5b,3d,7f,9d),
	HX_("getRefreshRate",65,35,de,c7),
	HX_("getScreenRotation",00,30,14,62),
	HX_("getSystemId",60,73,dd,87),
	HX_("vibrate",2f,cc,46,df),
	HX_("getLanguage",0e,43,05,a0),
	HX_("requestShutdown",05,ff,38,10),
	HX_("framebuffers",e6,3a,ca,84),
	HX_("keyboard",a7,bc,29,68),
	HX_("mouse",25,16,65,0c),
	HX_("pen",d9,54,55,00),
	HX_("gamepad1",70,ac,9e,cb),
	HX_("gamepad2",71,ac,9e,cb),
	HX_("gamepad3",72,ac,9e,cb),
	HX_("gamepad4",73,ac,9e,cb),
	HX_("surface",2d,66,49,5d),
	HX_("mouseLockListeners",af,da,5c,62),
	HX_("init",10,3b,bb,45),
	HX_("onWindowCreated",39,0f,07,54),
	HX_("postInit",90,9b,fa,03),
	HX_("loadFinished",b8,7f,77,4e),
	HX_("lockMouse",3a,d6,46,47),
	HX_("unlockMouse",c1,5c,ed,cc),
	HX_("canLockMouse",0a,40,67,ca),
	HX_("isMouseLocked",45,89,73,58),
	HX_("notifyOfMouseLockChange",e0,a9,ee,22),
	HX_("removeFromMouseLockChange",12,1e,2a,14),
	HX_("hideSystemCursor",07,93,7b,81),
	HX_("showSystemCursor",c2,1f,8d,c0),
	HX_("frame",2d,78,83,06),
	HX_("checkGamepadConnected",d0,ca,3a,b9),
	HX_("keyDown",a1,69,47,9c),
	HX_("keyUp",da,b9,fe,de),
	HX_("keyPress",64,f9,f1,0c),
	HX_("mouseX",93,4a,0e,cc),
	HX_("mouseY",94,4a,0e,cc),
	HX_("mouseDown",27,b1,c2,ee),
	HX_("mouseUp",e0,f3,72,c0),
	HX_("mouseMove",d6,9b,b5,f4),
	HX_("mouseWheel",36,28,87,e7),
	HX_("mouseLeave",92,28,20,90),
	HX_("penDown",db,59,ca,16),
	HX_("penUp",94,47,f7,bf),
	HX_("penMove",8a,44,bd,1c),
	HX_("gamepad1Axis",31,ed,97,86),
	HX_("gamepad1Button",82,76,c0,01),
	HX_("gamepad2Axis",b2,81,fe,19),
	HX_("gamepad2Button",43,ed,55,2b),
	HX_("gamepad3Axis",33,16,65,ad),
	HX_("gamepad3Button",04,64,eb,54),
	HX_("gamepad4Axis",b4,aa,cb,40),
	HX_("gamepad4Button",c5,da,80,7e),
	HX_("touchStart",23,58,9c,7d),
	HX_("touchEnd",5c,c5,09,00),
	HX_("touchMove",70,72,cd,0d),
	HX_("foreground",c3,18,ef,10),
	HX_("resume",ad,69,84,08),
	HX_("pause",f6,d6,57,bd),
	HX_("background",ee,93,1d,26),
	HX_("shutdown",96,fc,0b,6b),
	HX_("dropFiles",c8,0b,51,42),
	HX_("copy",b5,bb,c4,41),
	HX_("cut",82,85,4b,00),
	HX_("paste",53,53,56,bd),
	HX_("login",69,d9,f3,78),
	HX_("loginevent",11,32,b7,18),
	HX_("logoutevent",50,dd,99,42),
	HX_("initKore",87,a1,c5,4b),
	HX_("setKeepScreenOn",12,20,de,37),
	HX_("loadUrl",e9,a4,e3,08),
	HX_("getGamepadId",66,e7,8e,6e),
	HX_("safeZone",19,76,fc,9e),
	HX_("automaticSafeZone",e4,71,6c,7e),
	HX_("setSafeZone",db,3f,5d,cf),
	HX_("unlockAchievement",0b,e4,d1,6a),
	::String(null())
};

void SystemImpl_obj::__register()
{
	SystemImpl_obj _hx_dummy;
	SystemImpl_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.SystemImpl",99,8d,13,b1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SystemImpl_obj::__GetStatic;
	__mClass->mSetStaticField = &SystemImpl_obj::__SetStatic;
	__mClass->mMarkFunc = SystemImpl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SystemImpl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SystemImpl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SystemImpl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SystemImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SystemImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SystemImpl_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_51_boot)
HXDLIN(  51)		needs3d = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_118_boot)
HXDLIN( 118)		framebuffers = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace kha
