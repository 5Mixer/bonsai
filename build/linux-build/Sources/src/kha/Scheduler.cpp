// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_kha_Display
#include <hxinc/kha/Display.h>
#endif
#ifndef INCLUDED_kha_FrameTask
#include <hxinc/kha/FrameTask.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha_TimeTask
#include <hxinc/kha/TimeTask.h>
#endif
#ifndef INCLUDED_kha_Window
#include <hxinc/kha/Window.h>
#endif
#ifndef INCLUDED_kha_netsync_Session
#include <hxinc/kha/netsync/Session.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_69_init,"kha.Scheduler","init",0x2bf4b74d,"kha.Scheduler.init","kha/Scheduler.hx",69,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_89_start,"kha.Scheduler","start",0x101ead85,"kha.Scheduler.start","kha/Scheduler.hx",89,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_112_stop,"kha.Scheduler","stop",0x32956c3f,"kha.Scheduler.stop","kha/Scheduler.hx",112,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_116_isStopped,"kha.Scheduler","isStopped",0xd70a55e6,"kha.Scheduler.isStopped","kha/Scheduler.hx",116,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_120_warpTimeTasksBack,"kha.Scheduler","warpTimeTasksBack",0x71b62f43,"kha.Scheduler.warpTimeTasksBack","kha/Scheduler.hx",120,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_133_warp,"kha.Scheduler","warp",0x352bde85,"kha.Scheduler.warp","kha/Scheduler.hx",133,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_173_executeFrame,"kha.Scheduler","executeFrame",0x3aa53ef5,"kha.Scheduler.executeFrame","kha/Scheduler.hx",173,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_282_executeTimeTasks,"kha.Scheduler","executeTimeTasks",0x97823d09,"kha.Scheduler.executeTimeTasks","kha/Scheduler.hx",282,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_310_archiveTimeTask,"kha.Scheduler","archiveTimeTask",0xf7ae86b7,"kha.Scheduler.archiveTimeTask","kha/Scheduler.hx",310,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_323_time,"kha.Scheduler","time",0x3336484a,"kha.Scheduler.time","kha/Scheduler.hx",323,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_330_realTime,"kha.Scheduler","realTime",0xd6422948,"kha.Scheduler.realTime","kha/Scheduler.hx",330,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_333_resetTime,"kha.Scheduler","resetTime",0x2292dc1f,"kha.Scheduler.resetTime","kha/Scheduler.hx",333,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_346_addBreakableFrameTask,"kha.Scheduler","addBreakableFrameTask",0x44621e9d,"kha.Scheduler.addBreakableFrameTask","kha/Scheduler.hx",346,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_353_addFrameTask,"kha.Scheduler","addFrameTask",0xb36720ee,"kha.Scheduler.addFrameTask","kha/Scheduler.hx",353,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_360_pauseFrameTask,"kha.Scheduler","pauseFrameTask",0xfc4302b9,"kha.Scheduler.pauseFrameTask","kha/Scheduler.hx",360,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_369_removeFrameTask,"kha.Scheduler","removeFrameTask",0x21b33c11,"kha.Scheduler.removeFrameTask","kha/Scheduler.hx",369,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_378_generateGroupId,"kha.Scheduler","generateGroupId",0x08ceed28,"kha.Scheduler.generateGroupId","kha/Scheduler.hx",378,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_381_addBreakableTimeTaskToGroup,"kha.Scheduler","addBreakableTimeTaskToGroup",0x55e602bd,"kha.Scheduler.addBreakableTimeTaskToGroup","kha/Scheduler.hx",381,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_400_addTimeTaskToGroup,"kha.Scheduler","addTimeTaskToGroup",0xa9e317ce,"kha.Scheduler.addTimeTaskToGroup","kha/Scheduler.hx",400,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_407_addBreakableTimeTask,"kha.Scheduler","addBreakableTimeTask",0x71683bc7,"kha.Scheduler.addBreakableTimeTask","kha/Scheduler.hx",407,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_411_addTimeTask,"kha.Scheduler","addTimeTask",0x71e7ae96,"kha.Scheduler.addTimeTask","kha/Scheduler.hx",411,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_414_getTimeTask,"kha.Scheduler","getTimeTask",0x667f3a0b,"kha.Scheduler.getTimeTask","kha/Scheduler.hx",414,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_429_pauseTimeTask,"kha.Scheduler","pauseTimeTask",0xa3984f2b,"kha.Scheduler.pauseTimeTask","kha/Scheduler.hx",429,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_439_pauseRunningTimeTask,"kha.Scheduler","pauseRunningTimeTask",0x8966fef8,"kha.Scheduler.pauseRunningTimeTask","kha/Scheduler.hx",439,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_451_pauseTimeTasks,"kha.Scheduler","pauseTimeTasks",0x81acf6e8,"kha.Scheduler.pauseTimeTasks","kha/Scheduler.hx",451,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_462_removeTimeTask,"kha.Scheduler","removeTimeTask",0x701a88d3,"kha.Scheduler.removeTimeTask","kha/Scheduler.hx",462,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_470_removeTimeTasks,"kha.Scheduler","removeTimeTasks",0xa71d3040,"kha.Scheduler.removeTimeTasks","kha/Scheduler.hx",470,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_490_numTasksInSchedule,"kha.Scheduler","numTasksInSchedule",0x5bfae3e1,"kha.Scheduler.numTasksInSchedule","kha/Scheduler.hx",490,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_493_insertSorted,"kha.Scheduler","insertSorted",0x20607c93,"kha.Scheduler.insertSorted","kha/Scheduler.hx",493,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_506_sortFrameTasks,"kha.Scheduler","sortFrameTasks",0xfb8e299c,"kha.Scheduler.sortFrameTasks","kha/Scheduler.hx",506,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_503_sortFrameTasks,"kha.Scheduler","sortFrameTasks",0xfb8e299c,"kha.Scheduler.sortFrameTasks","kha/Scheduler.hx",503,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_42_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",42,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_60_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",60,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_61_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",61,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_65_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",65,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_67_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",67,0xd275db8e)
namespace kha{

void Scheduler_obj::__construct() { }

Dynamic Scheduler_obj::__CreateEmpty() { return new Scheduler_obj; }

void *Scheduler_obj::_hx_vtable = 0;

Dynamic Scheduler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Scheduler_obj > _hx_result = new Scheduler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Scheduler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0cb5f5b7;
}

::Array< ::Dynamic> Scheduler_obj::timeTasks;

::Array< ::Dynamic> Scheduler_obj::pausedTimeTasks;

::Array< ::Dynamic> Scheduler_obj::outdatedTimeTasks;

::Array< ::Dynamic> Scheduler_obj::timeTasksScratchpad;

Float Scheduler_obj::timeWarpSaveTime;

::Array< ::Dynamic> Scheduler_obj::frameTasks;

::Array< ::Dynamic> Scheduler_obj::toDeleteFrame;

Float Scheduler_obj::current;

Float Scheduler_obj::lastTime;

bool Scheduler_obj::frame_tasks_sorted;

bool Scheduler_obj::stopped;

bool Scheduler_obj::vsync;

Float Scheduler_obj::onedifhz;

int Scheduler_obj::currentFrameTaskId;

int Scheduler_obj::currentTimeTaskId;

int Scheduler_obj::currentGroupId;

int Scheduler_obj::DIF_COUNT;

Float Scheduler_obj::maxframetime;

::Array< Float > Scheduler_obj::deltas;

Float Scheduler_obj::startTime;

 ::kha::TimeTask Scheduler_obj::activeTimeTask;

void Scheduler_obj::init(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_69_init)
HXLINE(  70)		::kha::Scheduler_obj::deltas = ::Array_obj< Float >::__new();
HXLINE(  71)		{
HXLINE(  71)			int _g = 0;
HXDLIN(  71)			int _g1 = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN(  71)			while((_g < _g1)){
HXLINE(  71)				_g = (_g + 1);
HXDLIN(  71)				int i = (_g - 1);
HXDLIN(  71)				::kha::Scheduler_obj::deltas[i] = ( (Float)(0) );
            			}
            		}
HXLINE(  73)		::kha::Scheduler_obj::stopped = true;
HXLINE(  74)		::kha::Scheduler_obj::frame_tasks_sorted = true;
HXLINE(  75)		::kha::Scheduler_obj::current = (::kha::Scheduler_obj::lastTime = ::kha::Scheduler_obj::realTime());
HXLINE(  77)		::kha::Scheduler_obj::currentFrameTaskId = 0;
HXLINE(  78)		::kha::Scheduler_obj::currentTimeTaskId = 0;
HXLINE(  79)		::kha::Scheduler_obj::currentGroupId = 0;
HXLINE(  81)		::kha::Scheduler_obj::timeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  82)		::kha::Scheduler_obj::pausedTimeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  83)		::kha::Scheduler_obj::outdatedTimeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  84)		::kha::Scheduler_obj::timeTasksScratchpad = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  85)		::kha::Scheduler_obj::frameTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  86)		::kha::Scheduler_obj::toDeleteFrame = ::Array_obj< ::Dynamic>::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,init,(void))

void Scheduler_obj::start(hx::Null< bool >  __o_restartTimers){
            		bool restartTimers = __o_restartTimers.Default(false);
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_89_start)
HXLINE(  90)		::kha::Scheduler_obj::vsync = ::kha::Window_obj::get(0)->get_vSynced();
HXLINE(  91)		int hz = ::kha::Display_obj::get_primary()->get_frequency();
HXLINE(  92)		bool _hx_tmp;
HXDLIN(  92)		if ((hz >= 57)) {
HXLINE(  92)			_hx_tmp = (hz <= 63);
            		}
            		else {
HXLINE(  92)			_hx_tmp = false;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  92)			hz = 60;
            		}
HXLINE(  93)		::kha::Scheduler_obj::onedifhz = (((Float)1.0) / ( (Float)(hz) ));
HXLINE(  95)		::kha::Scheduler_obj::stopped = false;
HXLINE(  96)		::kha::Scheduler_obj::resetTime();
HXLINE(  97)		Float _hx_tmp1 = ::kha::Scheduler_obj::realTime();
HXDLIN(  97)		::kha::Scheduler_obj::lastTime = (_hx_tmp1 - ::kha::Scheduler_obj::startTime);
HXLINE(  98)		{
HXLINE(  98)			int _g = 0;
HXDLIN(  98)			int _g1 = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN(  98)			while((_g < _g1)){
HXLINE(  98)				_g = (_g + 1);
HXDLIN(  98)				int i = (_g - 1);
HXDLIN(  98)				::kha::Scheduler_obj::deltas[i] = ( (Float)(0) );
            			}
            		}
HXLINE( 100)		if (restartTimers) {
HXLINE( 101)			{
HXLINE( 101)				int _g2 = 0;
HXDLIN( 101)				::Array< ::Dynamic> _g3 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 101)				while((_g2 < _g3->length)){
HXLINE( 101)					 ::kha::TimeTask timeTask = _g3->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 101)					_g2 = (_g2 + 1);
HXLINE( 102)					timeTask->paused = false;
            				}
            			}
HXLINE( 105)			{
HXLINE( 105)				int _g4 = 0;
HXDLIN( 105)				::Array< ::Dynamic> _g5 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 105)				while((_g4 < _g5->length)){
HXLINE( 105)					 ::kha::FrameTask frameTask = _g5->__get(_g4).StaticCast<  ::kha::FrameTask >();
HXDLIN( 105)					_g4 = (_g4 + 1);
HXLINE( 106)					frameTask->paused = false;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,start,(void))

void Scheduler_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_112_stop)
HXDLIN( 112)		::kha::Scheduler_obj::stopped = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,stop,(void))

bool Scheduler_obj::isStopped(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_116_isStopped)
HXDLIN( 116)		return ::kha::Scheduler_obj::stopped;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,isStopped,return )

void Scheduler_obj::warpTimeTasksBack(Float time,::Array< ::Dynamic> tasks){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_120_warpTimeTasksBack)
HXDLIN( 120)		int _g = 0;
HXDLIN( 120)		while((_g < tasks->length)){
HXDLIN( 120)			 ::kha::TimeTask timeTask = tasks->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 120)			_g = (_g + 1);
HXLINE( 121)			if ((timeTask->start >= time)) {
HXLINE( 122)				timeTask->next = timeTask->start;
            			}
            			else {
HXLINE( 124)				if ((timeTask->period > 0)) {
HXLINE( 125)					Float sinceStart = (time - timeTask->start);
HXLINE( 126)					int times = ::Math_obj::ceil((sinceStart / timeTask->period));
HXLINE( 127)					timeTask->next = (timeTask->start + (( (Float)(times) ) * timeTask->period));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,warpTimeTasksBack,(void))

void Scheduler_obj::warp(Float time){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_133_warp)
HXDLIN( 133)		if ((time < ::kha::Scheduler_obj::lastTime)) {
HXLINE( 134)			::kha::Scheduler_obj::current = time;
HXLINE( 135)			::kha::Scheduler_obj::lastTime = time;
HXLINE( 137)			::kha::Scheduler_obj::warpTimeTasksBack(time,::kha::Scheduler_obj::outdatedTimeTasks);
HXLINE( 138)			::kha::Scheduler_obj::warpTimeTasksBack(time,::kha::Scheduler_obj::timeTasks);
HXLINE( 140)			{
HXLINE( 140)				int _g = 0;
HXDLIN( 140)				::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::outdatedTimeTasks;
HXDLIN( 140)				while((_g < _g1->length)){
HXLINE( 140)					 ::kha::TimeTask task = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 140)					_g = (_g + 1);
HXLINE( 141)					if ((task->next >= time)) {
HXLINE( 142)						::kha::Scheduler_obj::timeTasksScratchpad->push(task);
            					}
            				}
            			}
HXLINE( 145)			{
HXLINE( 145)				int _g2 = 0;
HXDLIN( 145)				::Array< ::Dynamic> _g3 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 145)				while((_g2 < _g3->length)){
HXLINE( 145)					 ::kha::TimeTask task1 = _g3->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 145)					_g2 = (_g2 + 1);
HXLINE( 146)					::kha::Scheduler_obj::outdatedTimeTasks->remove(task1);
            				}
            			}
HXLINE( 148)			{
HXLINE( 148)				int _g4 = 0;
HXDLIN( 148)				::Array< ::Dynamic> _g5 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 148)				while((_g4 < _g5->length)){
HXLINE( 148)					 ::kha::TimeTask task2 = _g5->__get(_g4).StaticCast<  ::kha::TimeTask >();
HXDLIN( 148)					_g4 = (_g4 + 1);
HXLINE( 149)					::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,task2);
            				}
            			}
HXLINE( 151)			while((::kha::Scheduler_obj::timeTasksScratchpad->length > 0)){
HXLINE( 152)				::kha::Scheduler_obj::timeTasksScratchpad->remove(::kha::Scheduler_obj::timeTasksScratchpad->__get(0).StaticCast<  ::kha::TimeTask >());
            			}
            		}
            		else {
HXLINE( 155)			if ((time > ::kha::Scheduler_obj::lastTime)) {
HXLINE( 164)				 ::Dynamic _hx_tmp = hx::ClassOf< ::kha::Scheduler >();
HXDLIN( 164)				::kha::Scheduler_obj::startTime = (::kha::Scheduler_obj::startTime - (time - ::kha::Scheduler_obj::lastTime));
HXLINE( 166)				::kha::Scheduler_obj::current = time;
HXLINE( 167)				::kha::Scheduler_obj::lastTime = time;
HXLINE( 169)				::kha::Scheduler_obj::executeTimeTasks(time);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,warp,(void))

void Scheduler_obj::executeFrame(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_173_executeFrame)
HXLINE( 174)		Float now = ::kha::Scheduler_obj::realTime();
HXDLIN( 174)		Float now1 = (now - ::kha::Scheduler_obj::startTime);
HXLINE( 175)		Float delta = (now1 - ::kha::Scheduler_obj::lastTime);
HXLINE( 177)		Float frameEnd = ::kha::Scheduler_obj::current;
HXLINE( 179)		if ((delta >= 0)) {
HXLINE( 180)			if (hx::IsNull( ::kha::netsync::Session_obj::the() )) {
HXLINE( 183)				if ((delta > ::kha::Scheduler_obj::maxframetime)) {
HXLINE( 184)					 ::Dynamic _hx_tmp = hx::ClassOf< ::kha::Scheduler >();
HXDLIN( 184)					::kha::Scheduler_obj::startTime = (::kha::Scheduler_obj::startTime + (delta - ::kha::Scheduler_obj::maxframetime));
HXLINE( 185)					delta = ::kha::Scheduler_obj::maxframetime;
HXLINE( 186)					frameEnd = (frameEnd + delta);
            				}
            				else {
HXLINE( 189)					if (::kha::Scheduler_obj::vsync) {
HXLINE( 192)						Float realdif = ::kha::Scheduler_obj::onedifhz;
HXLINE( 193)						while((realdif < (delta - ::kha::Scheduler_obj::onedifhz))){
HXLINE( 194)							realdif = (realdif + ::kha::Scheduler_obj::onedifhz);
            						}
HXLINE( 197)						delta = realdif;
HXLINE( 198)						{
HXLINE( 198)							int _g = 0;
HXDLIN( 198)							int _g1 = (::kha::Scheduler_obj::DIF_COUNT - 2);
HXDLIN( 198)							while((_g < _g1)){
HXLINE( 198)								_g = (_g + 1);
HXDLIN( 198)								int i = (_g - 1);
HXLINE( 199)								delta = (delta + ::kha::Scheduler_obj::deltas->__get(i));
HXLINE( 200)								::kha::Scheduler_obj::deltas[i] = ::kha::Scheduler_obj::deltas->__get((i + 1));
            							}
            						}
HXLINE( 202)						delta = (delta + ::kha::Scheduler_obj::deltas->__get((::kha::Scheduler_obj::DIF_COUNT - 2)));
HXLINE( 203)						delta = (delta / ( (Float)(::kha::Scheduler_obj::DIF_COUNT) ));
HXLINE( 204)						::kha::Scheduler_obj::deltas[(::kha::Scheduler_obj::DIF_COUNT - 2)] = realdif;
HXLINE( 206)						frameEnd = (frameEnd + delta);
            					}
            					else {
HXLINE( 209)						{
HXLINE( 209)							int _g2 = 0;
HXDLIN( 209)							int _g11 = (::kha::Scheduler_obj::DIF_COUNT - 1);
HXDLIN( 209)							while((_g2 < _g11)){
HXLINE( 209)								_g2 = (_g2 + 1);
HXDLIN( 209)								int i1 = (_g2 - 1);
HXLINE( 210)								::kha::Scheduler_obj::deltas[i1] = ::kha::Scheduler_obj::deltas->__get((i1 + 1));
            							}
            						}
HXLINE( 212)						::kha::Scheduler_obj::deltas[(::kha::Scheduler_obj::DIF_COUNT - 1)] = delta;
HXLINE( 214)						Float next = ( (Float)(0) );
HXLINE( 215)						{
HXLINE( 215)							int _g21 = 0;
HXDLIN( 215)							int _g3 = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN( 215)							while((_g21 < _g3)){
HXLINE( 215)								_g21 = (_g21 + 1);
HXDLIN( 215)								int i2 = (_g21 - 1);
HXLINE( 216)								next = (next + ::kha::Scheduler_obj::deltas->__get(i2));
            							}
            						}
HXLINE( 218)						next = (next / ( (Float)(::kha::Scheduler_obj::DIF_COUNT) ));
HXLINE( 223)						frameEnd = (frameEnd + next);
            					}
            				}
            			}
            			else {
HXLINE( 228)				frameEnd = (frameEnd + delta);
            			}
HXLINE( 231)			::kha::Scheduler_obj::lastTime = frameEnd;
HXLINE( 232)			if (!(::kha::Scheduler_obj::stopped)) {
HXLINE( 233)				::kha::Scheduler_obj::current = frameEnd;
            			}
HXLINE( 237)			{
HXLINE( 237)				int _g4 = 0;
HXDLIN( 237)				::Array< ::Dynamic> _g12 = ::kha::Scheduler_obj::pausedTimeTasks;
HXDLIN( 237)				while((_g4 < _g12->length)){
HXLINE( 237)					 ::kha::TimeTask pausedTask = _g12->__get(_g4).StaticCast<  ::kha::TimeTask >();
HXDLIN( 237)					_g4 = (_g4 + 1);
HXLINE( 238)					 ::kha::TimeTask pausedTask1 = pausedTask;
HXDLIN( 238)					pausedTask1->next = (pausedTask1->next + delta);
            				}
            			}
HXLINE( 241)			if (::kha::Scheduler_obj::stopped) {
HXLINE( 243)				int _g22 = 0;
HXDLIN( 243)				::Array< ::Dynamic> _g31 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 243)				while((_g22 < _g31->length)){
HXLINE( 243)					 ::kha::TimeTask timeTask = _g31->__get(_g22).StaticCast<  ::kha::TimeTask >();
HXDLIN( 243)					_g22 = (_g22 + 1);
HXLINE( 244)					 ::kha::TimeTask timeTask1 = timeTask;
HXDLIN( 244)					timeTask1->next = (timeTask1->next + delta);
            				}
            			}
HXLINE( 248)			::kha::Scheduler_obj::executeTimeTasks(frameEnd);
HXLINE( 251)			{
HXLINE( 251)				int _g23 = 0;
HXDLIN( 251)				::Array< ::Dynamic> _g32 = ::kha::Scheduler_obj::outdatedTimeTasks;
HXDLIN( 251)				while((_g23 < _g32->length)){
HXLINE( 251)					 ::kha::TimeTask task = _g32->__get(_g23).StaticCast<  ::kha::TimeTask >();
HXDLIN( 251)					_g23 = (_g23 + 1);
HXLINE( 252)					if ((task->next < (frameEnd - ((Float)10.0)))) {
HXLINE( 253)						::kha::Scheduler_obj::timeTasksScratchpad->push(task);
            					}
            				}
            			}
HXLINE( 256)			{
HXLINE( 256)				int _g41 = 0;
HXDLIN( 256)				::Array< ::Dynamic> _g5 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 256)				while((_g41 < _g5->length)){
HXLINE( 256)					 ::kha::TimeTask task1 = _g5->__get(_g41).StaticCast<  ::kha::TimeTask >();
HXDLIN( 256)					_g41 = (_g41 + 1);
HXLINE( 257)					::kha::Scheduler_obj::outdatedTimeTasks->remove(task1);
            				}
            			}
HXLINE( 259)			while((::kha::Scheduler_obj::timeTasksScratchpad->length > 0)){
HXLINE( 260)				::kha::Scheduler_obj::timeTasksScratchpad->remove(::kha::Scheduler_obj::timeTasksScratchpad->__get(0).StaticCast<  ::kha::TimeTask >());
            			}
            		}
HXLINE( 264)		::kha::Scheduler_obj::sortFrameTasks();
HXLINE( 265)		{
HXLINE( 265)			int _g6 = 0;
HXDLIN( 265)			::Array< ::Dynamic> _g13 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 265)			while((_g6 < _g13->length)){
HXLINE( 265)				 ::kha::FrameTask frameTask = _g13->__get(_g6).StaticCast<  ::kha::FrameTask >();
HXDLIN( 265)				_g6 = (_g6 + 1);
HXLINE( 266)				bool _hx_tmp1;
HXDLIN( 266)				bool _hx_tmp2;
HXDLIN( 266)				if (!(::kha::Scheduler_obj::stopped)) {
HXLINE( 266)					_hx_tmp2 = !(frameTask->paused);
            				}
            				else {
HXLINE( 266)					_hx_tmp2 = false;
            				}
HXDLIN( 266)				if (_hx_tmp2) {
HXLINE( 266)					_hx_tmp1 = frameTask->active;
            				}
            				else {
HXLINE( 266)					_hx_tmp1 = false;
            				}
HXDLIN( 266)				if (_hx_tmp1) {
HXLINE( 267)					if (!(( (bool)(frameTask->task()) ))) {
HXLINE( 267)						frameTask->active = false;
            					}
            				}
            			}
            		}
HXLINE( 271)		{
HXLINE( 271)			int _g24 = 0;
HXDLIN( 271)			::Array< ::Dynamic> _g33 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 271)			while((_g24 < _g33->length)){
HXLINE( 271)				 ::kha::FrameTask frameTask1 = _g33->__get(_g24).StaticCast<  ::kha::FrameTask >();
HXDLIN( 271)				_g24 = (_g24 + 1);
HXLINE( 272)				if (!(frameTask1->active)) {
HXLINE( 273)					::kha::Scheduler_obj::toDeleteFrame->push(frameTask1);
            				}
            			}
            		}
HXLINE( 277)		while((::kha::Scheduler_obj::toDeleteFrame->length > 0)){
HXLINE( 278)			::Array< ::Dynamic> _hx_tmp3 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 278)			_hx_tmp3->remove(::kha::Scheduler_obj::toDeleteFrame->pop().StaticCast<  ::kha::FrameTask >());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,executeFrame,(void))

void Scheduler_obj::executeTimeTasks(Float until){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_282_executeTimeTasks)
HXLINE( 283)		while((::kha::Scheduler_obj::timeTasks->length > 0)){
HXLINE( 284)			::kha::Scheduler_obj::activeTimeTask = ::kha::Scheduler_obj::timeTasks->__get(0).StaticCast<  ::kha::TimeTask >();
HXLINE( 286)			if ((::kha::Scheduler_obj::activeTimeTask->next <= until)) {
HXLINE( 287)				 ::kha::TimeTask _hx_tmp = ::kha::Scheduler_obj::activeTimeTask;
HXDLIN( 287)				_hx_tmp->next = (_hx_tmp->next + ::kha::Scheduler_obj::activeTimeTask->period);
HXLINE( 288)				::kha::Scheduler_obj::timeTasks->remove(::kha::Scheduler_obj::activeTimeTask);
HXLINE( 290)				bool _hx_tmp1;
HXDLIN( 290)				if (::kha::Scheduler_obj::activeTimeTask->active) {
HXLINE( 290)					_hx_tmp1 = ( (bool)(::kha::Scheduler_obj::activeTimeTask->task()) );
            				}
            				else {
HXLINE( 290)					_hx_tmp1 = false;
            				}
HXDLIN( 290)				if (_hx_tmp1) {
HXLINE( 291)					bool _hx_tmp2;
HXDLIN( 291)					if ((::kha::Scheduler_obj::activeTimeTask->period > 0)) {
HXLINE( 291)						if ((::kha::Scheduler_obj::activeTimeTask->duration != 0)) {
HXLINE( 291)							_hx_tmp2 = (::kha::Scheduler_obj::activeTimeTask->duration >= (::kha::Scheduler_obj::activeTimeTask->start + ::kha::Scheduler_obj::activeTimeTask->next));
            						}
            						else {
HXLINE( 291)							_hx_tmp2 = true;
            						}
            					}
            					else {
HXLINE( 291)						_hx_tmp2 = false;
            					}
HXDLIN( 291)					if (_hx_tmp2) {
HXLINE( 292)						::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,::kha::Scheduler_obj::activeTimeTask);
            					}
            					else {
HXLINE( 295)						::kha::Scheduler_obj::archiveTimeTask(::kha::Scheduler_obj::activeTimeTask,until);
            					}
            				}
            				else {
HXLINE( 299)					::kha::Scheduler_obj::activeTimeTask->active = false;
HXLINE( 300)					::kha::Scheduler_obj::archiveTimeTask(::kha::Scheduler_obj::activeTimeTask,until);
            				}
            			}
            			else {
HXLINE( 304)				goto _hx_goto_28;
            			}
            		}
            		_hx_goto_28:;
HXLINE( 307)		::kha::Scheduler_obj::activeTimeTask = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,executeTimeTasks,(void))

void Scheduler_obj::archiveTimeTask( ::kha::TimeTask timeTask,Float frameEnd){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_310_archiveTimeTask)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,archiveTimeTask,(void))

Float Scheduler_obj::time(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_323_time)
HXDLIN( 323)		return ::kha::Scheduler_obj::current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,time,return )

Float Scheduler_obj::realTime(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_330_realTime)
HXDLIN( 330)		return ::kha::System_obj::get_time();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,realTime,return )

void Scheduler_obj::resetTime(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_333_resetTime)
HXLINE( 334)		Float now = ::kha::System_obj::get_time();
HXLINE( 335)		Float dif = (now - ::kha::Scheduler_obj::startTime);
HXLINE( 336)		::kha::Scheduler_obj::startTime = now;
HXLINE( 337)		{
HXLINE( 337)			int _g = 0;
HXDLIN( 337)			::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 337)			while((_g < _g1->length)){
HXLINE( 337)				 ::kha::TimeTask timeTask = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 337)				_g = (_g + 1);
HXLINE( 338)				 ::kha::TimeTask timeTask1 = timeTask;
HXDLIN( 338)				timeTask1->start = (timeTask1->start - dif);
HXLINE( 339)				 ::kha::TimeTask timeTask2 = timeTask;
HXDLIN( 339)				timeTask2->next = (timeTask2->next - dif);
            			}
            		}
HXLINE( 341)		{
HXLINE( 341)			int _g2 = 0;
HXDLIN( 341)			int _g3 = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN( 341)			while((_g2 < _g3)){
HXLINE( 341)				_g2 = (_g2 + 1);
HXDLIN( 341)				int i = (_g2 - 1);
HXDLIN( 341)				::kha::Scheduler_obj::deltas[i] = ( (Float)(0) );
            			}
            		}
HXLINE( 342)		::kha::Scheduler_obj::current = ( (Float)(0) );
HXLINE( 343)		::kha::Scheduler_obj::lastTime = ( (Float)(0) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,resetTime,(void))

int Scheduler_obj::addBreakableFrameTask( ::Dynamic task,int priority){
            	HX_GC_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_346_addBreakableFrameTask)
HXLINE( 347)		::Array< ::Dynamic> _hx_tmp = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 347)		_hx_tmp->push( ::kha::FrameTask_obj::__alloc( HX_CTX ,task,priority,++::kha::Scheduler_obj::currentFrameTaskId));
HXLINE( 348)		::kha::Scheduler_obj::frame_tasks_sorted = false;
HXLINE( 349)		return ::kha::Scheduler_obj::currentFrameTaskId;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,addBreakableFrameTask,return )

int Scheduler_obj::addFrameTask( ::Dynamic task,int priority){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,task) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_353_addFrameTask)
HXLINE( 354)			task();
HXLINE( 355)			return true;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_353_addFrameTask)
HXDLIN( 353)		return ::kha::Scheduler_obj::addBreakableFrameTask( ::Dynamic(new _hx_Closure_0(task)),priority);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,addFrameTask,return )

void Scheduler_obj::pauseFrameTask(int id,bool paused){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_360_pauseFrameTask)
HXDLIN( 360)		int _g = 0;
HXDLIN( 360)		::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 360)		while((_g < _g1->length)){
HXDLIN( 360)			 ::kha::FrameTask frameTask = _g1->__get(_g).StaticCast<  ::kha::FrameTask >();
HXDLIN( 360)			_g = (_g + 1);
HXLINE( 361)			if ((frameTask->id == id)) {
HXLINE( 362)				frameTask->paused = paused;
HXLINE( 363)				goto _hx_goto_39;
            			}
            		}
            		_hx_goto_39:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseFrameTask,(void))

void Scheduler_obj::removeFrameTask(int id){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_369_removeFrameTask)
HXDLIN( 369)		int _g = 0;
HXDLIN( 369)		::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 369)		while((_g < _g1->length)){
HXDLIN( 369)			 ::kha::FrameTask frameTask = _g1->__get(_g).StaticCast<  ::kha::FrameTask >();
HXDLIN( 369)			_g = (_g + 1);
HXLINE( 370)			if ((frameTask->id == id)) {
HXLINE( 371)				frameTask->active = false;
HXLINE( 372)				goto _hx_goto_41;
            			}
            		}
            		_hx_goto_41:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeFrameTask,(void))

int Scheduler_obj::generateGroupId(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_378_generateGroupId)
HXDLIN( 378)		return ++::kha::Scheduler_obj::currentGroupId;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,generateGroupId,return )

int Scheduler_obj::addBreakableTimeTaskToGroup(int groupId, ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
            		Float period = __o_period.Default(0);
            		Float duration = __o_duration.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_381_addBreakableTimeTaskToGroup)
HXLINE( 382)		 ::kha::TimeTask t =  ::kha::TimeTask_obj::__alloc( HX_CTX );
HXLINE( 383)		t->active = true;
HXLINE( 384)		t->_hx_set_task(HX_CTX, task);
HXLINE( 385)		t->id = ++::kha::Scheduler_obj::currentTimeTaskId;
HXLINE( 386)		t->groupId = groupId;
HXLINE( 388)		t->start = (::kha::Scheduler_obj::current + start);
HXLINE( 389)		t->period = ( (Float)(0) );
HXLINE( 390)		if ((period != 0)) {
HXLINE( 390)			t->period = period;
            		}
HXLINE( 391)		t->duration = ( (Float)(0) );
HXLINE( 392)		if ((duration != 0)) {
HXLINE( 392)			t->duration = (t->start + duration);
            		}
HXLINE( 394)		t->next = t->start;
HXLINE( 395)		::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,t);
HXLINE( 396)		return t->id;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Scheduler_obj,addBreakableTimeTaskToGroup,return )

int Scheduler_obj::addTimeTaskToGroup(int groupId, ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,task) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_400_addTimeTaskToGroup)
HXLINE( 401)			task();
HXLINE( 402)			return true;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		Float period = __o_period.Default(0);
            		Float duration = __o_duration.Default(0);
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_400_addTimeTaskToGroup)
HXDLIN( 400)		return ::kha::Scheduler_obj::addBreakableTimeTaskToGroup(groupId, ::Dynamic(new _hx_Closure_0(task)),start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Scheduler_obj,addTimeTaskToGroup,return )

int Scheduler_obj::addBreakableTimeTask( ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
            		Float period = __o_period.Default(0);
            		Float duration = __o_duration.Default(0);
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_407_addBreakableTimeTask)
HXDLIN( 407)		return ::kha::Scheduler_obj::addBreakableTimeTaskToGroup(0,task,start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Scheduler_obj,addBreakableTimeTask,return )

int Scheduler_obj::addTimeTask( ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
            		Float period = __o_period.Default(0);
            		Float duration = __o_duration.Default(0);
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_411_addTimeTask)
HXDLIN( 411)		return ::kha::Scheduler_obj::addTimeTaskToGroup(0,task,start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Scheduler_obj,addTimeTask,return )

 ::kha::TimeTask Scheduler_obj::getTimeTask(int id){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_414_getTimeTask)
HXLINE( 415)		bool _hx_tmp;
HXDLIN( 415)		if (hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask )) {
HXLINE( 415)			_hx_tmp = (::kha::Scheduler_obj::activeTimeTask->id == id);
            		}
            		else {
HXLINE( 415)			_hx_tmp = false;
            		}
HXDLIN( 415)		if (_hx_tmp) {
HXLINE( 415)			return ::kha::Scheduler_obj::activeTimeTask;
            		}
HXLINE( 416)		{
HXLINE( 416)			int _g = 0;
HXDLIN( 416)			::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 416)			while((_g < _g1->length)){
HXLINE( 416)				 ::kha::TimeTask timeTask = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 416)				_g = (_g + 1);
HXLINE( 417)				if ((timeTask->id == id)) {
HXLINE( 418)					return timeTask;
            				}
            			}
            		}
HXLINE( 421)		{
HXLINE( 421)			int _g2 = 0;
HXDLIN( 421)			::Array< ::Dynamic> _g3 = ::kha::Scheduler_obj::pausedTimeTasks;
HXDLIN( 421)			while((_g2 < _g3->length)){
HXLINE( 421)				 ::kha::TimeTask timeTask1 = _g3->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 421)				_g2 = (_g2 + 1);
HXLINE( 422)				if ((timeTask1->id == id)) {
HXLINE( 423)					return timeTask1;
            				}
            			}
            		}
HXLINE( 426)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,getTimeTask,return )

void Scheduler_obj::pauseTimeTask(int id,bool paused){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_429_pauseTimeTask)
HXLINE( 430)		 ::kha::TimeTask timeTask = ::kha::Scheduler_obj::getTimeTask(id);
HXLINE( 431)		if (hx::IsNotNull( timeTask )) {
HXLINE( 432)			::kha::Scheduler_obj::pauseRunningTimeTask(timeTask,paused);
            		}
HXLINE( 434)		bool _hx_tmp;
HXDLIN( 434)		if (hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask )) {
HXLINE( 434)			_hx_tmp = (::kha::Scheduler_obj::activeTimeTask->id == id);
            		}
            		else {
HXLINE( 434)			_hx_tmp = false;
            		}
HXDLIN( 434)		if (_hx_tmp) {
HXLINE( 435)			::kha::Scheduler_obj::activeTimeTask->paused = paused;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseTimeTask,(void))

void Scheduler_obj::pauseRunningTimeTask( ::kha::TimeTask timeTask,bool paused){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_439_pauseRunningTimeTask)
HXLINE( 440)		timeTask->paused = paused;
HXLINE( 441)		if (paused) {
HXLINE( 442)			::kha::Scheduler_obj::timeTasks->remove(timeTask);
HXLINE( 443)			::kha::Scheduler_obj::pausedTimeTasks->push(timeTask);
            		}
            		else {
HXLINE( 446)			::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,timeTask);
HXLINE( 447)			::kha::Scheduler_obj::pausedTimeTasks->remove(timeTask);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseRunningTimeTask,(void))

void Scheduler_obj::pauseTimeTasks(int groupId,bool paused){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_451_pauseTimeTasks)
HXLINE( 452)		{
HXLINE( 452)			int _g = 0;
HXDLIN( 452)			::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 452)			while((_g < _g1->length)){
HXLINE( 452)				 ::kha::TimeTask timeTask = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 452)				_g = (_g + 1);
HXLINE( 453)				if ((timeTask->groupId == groupId)) {
HXLINE( 454)					::kha::Scheduler_obj::pauseRunningTimeTask(timeTask,paused);
            				}
            			}
            		}
HXLINE( 457)		bool _hx_tmp;
HXDLIN( 457)		if (hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask )) {
HXLINE( 457)			_hx_tmp = (::kha::Scheduler_obj::activeTimeTask->groupId == groupId);
            		}
            		else {
HXLINE( 457)			_hx_tmp = false;
            		}
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 458)			::kha::Scheduler_obj::activeTimeTask->paused = paused;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseTimeTasks,(void))

void Scheduler_obj::removeTimeTask(int id){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_462_removeTimeTask)
HXLINE( 463)		 ::kha::TimeTask timeTask = ::kha::Scheduler_obj::getTimeTask(id);
HXLINE( 464)		if (hx::IsNotNull( timeTask )) {
HXLINE( 465)			timeTask->active = false;
HXLINE( 466)			::kha::Scheduler_obj::timeTasks->remove(timeTask);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeTimeTask,(void))

void Scheduler_obj::removeTimeTasks(int groupId){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_470_removeTimeTasks)
HXLINE( 471)		{
HXLINE( 471)			int _g = 0;
HXDLIN( 471)			::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 471)			while((_g < _g1->length)){
HXLINE( 471)				 ::kha::TimeTask timeTask = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 471)				_g = (_g + 1);
HXLINE( 472)				if ((timeTask->groupId == groupId)) {
HXLINE( 473)					timeTask->active = false;
HXLINE( 474)					::kha::Scheduler_obj::timeTasksScratchpad->push(timeTask);
            				}
            			}
            		}
HXLINE( 477)		{
HXLINE( 477)			int _g2 = 0;
HXDLIN( 477)			::Array< ::Dynamic> _g3 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 477)			while((_g2 < _g3->length)){
HXLINE( 477)				 ::kha::TimeTask timeTask1 = _g3->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 477)				_g2 = (_g2 + 1);
HXLINE( 478)				::kha::Scheduler_obj::timeTasks->remove(timeTask1);
            			}
            		}
HXLINE( 480)		while((::kha::Scheduler_obj::timeTasksScratchpad->length > 0)){
HXLINE( 481)			::kha::Scheduler_obj::timeTasksScratchpad->remove(::kha::Scheduler_obj::timeTasksScratchpad->__get(0).StaticCast<  ::kha::TimeTask >());
            		}
HXLINE( 484)		bool _hx_tmp;
HXDLIN( 484)		if (hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask )) {
HXLINE( 484)			_hx_tmp = (::kha::Scheduler_obj::activeTimeTask->groupId == groupId);
            		}
            		else {
HXLINE( 484)			_hx_tmp = false;
            		}
HXDLIN( 484)		if (_hx_tmp) {
HXLINE( 485)			::kha::Scheduler_obj::activeTimeTask->active = false;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeTimeTasks,(void))

int Scheduler_obj::numTasksInSchedule(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_490_numTasksInSchedule)
HXDLIN( 490)		return (::kha::Scheduler_obj::timeTasks->length + ::kha::Scheduler_obj::frameTasks->length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,numTasksInSchedule,return )

void Scheduler_obj::insertSorted(::Array< ::Dynamic> list, ::kha::TimeTask task){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_493_insertSorted)
HXLINE( 494)		{
HXLINE( 494)			int _g = 0;
HXDLIN( 494)			int _g1 = list->length;
HXDLIN( 494)			while((_g < _g1)){
HXLINE( 494)				_g = (_g + 1);
HXDLIN( 494)				int i = (_g - 1);
HXLINE( 495)				if ((list->__get(i).StaticCast<  ::kha::TimeTask >()->next > task->next)) {
HXLINE( 496)					list->insert(i,task);
HXLINE( 497)					return;
            				}
            			}
            		}
HXLINE( 500)		list->push(task);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,insertSorted,(void))

void Scheduler_obj::sortFrameTasks(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::kha::FrameTask a, ::kha::FrameTask b){
            			HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_506_sortFrameTasks)
HXLINE( 506)			if ((a->priority > b->priority)) {
HXLINE( 506)				return 1;
            			}
            			else {
HXLINE( 506)				if ((a->priority < b->priority)) {
HXLINE( 506)					return -1;
            				}
            				else {
HXLINE( 506)					return 0;
            				}
            			}
HXDLIN( 506)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_503_sortFrameTasks)
HXLINE( 504)		if (::kha::Scheduler_obj::frame_tasks_sorted) {
HXLINE( 504)			return;
            		}
HXLINE( 505)		::kha::Scheduler_obj::frameTasks->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 508)		::kha::Scheduler_obj::frame_tasks_sorted = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,sortFrameTasks,(void))


Scheduler_obj::Scheduler_obj()
{
}

bool Scheduler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warp") ) { outValue = warp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"time") ) { outValue = time_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vsync") ) { outValue = ( vsync ); return true; }
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"deltas") ) { outValue = ( deltas ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { outValue = ( current ); return true; }
		if (HX_FIELD_EQ(inName,"stopped") ) { outValue = ( stopped ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastTime") ) { outValue = ( lastTime ); return true; }
		if (HX_FIELD_EQ(inName,"onedifhz") ) { outValue = ( onedifhz ); return true; }
		if (HX_FIELD_EQ(inName,"realTime") ) { outValue = realTime_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeTasks") ) { outValue = ( timeTasks ); return true; }
		if (HX_FIELD_EQ(inName,"DIF_COUNT") ) { outValue = ( DIF_COUNT ); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = ( startTime ); return true; }
		if (HX_FIELD_EQ(inName,"isStopped") ) { outValue = isStopped_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetTime") ) { outValue = resetTime_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameTasks") ) { outValue = ( frameTasks ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addTimeTask") ) { outValue = addTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTimeTask") ) { outValue = getTimeTask_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maxframetime") ) { outValue = ( maxframetime ); return true; }
		if (HX_FIELD_EQ(inName,"executeFrame") ) { outValue = executeFrame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addFrameTask") ) { outValue = addFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"insertSorted") ) { outValue = insertSorted_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toDeleteFrame") ) { outValue = ( toDeleteFrame ); return true; }
		if (HX_FIELD_EQ(inName,"pauseTimeTask") ) { outValue = pauseTimeTask_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentGroupId") ) { outValue = ( currentGroupId ); return true; }
		if (HX_FIELD_EQ(inName,"activeTimeTask") ) { outValue = ( activeTimeTask ); return true; }
		if (HX_FIELD_EQ(inName,"pauseFrameTask") ) { outValue = pauseFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseTimeTasks") ) { outValue = pauseTimeTasks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeTimeTask") ) { outValue = removeTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortFrameTasks") ) { outValue = sortFrameTasks_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pausedTimeTasks") ) { outValue = ( pausedTimeTasks ); return true; }
		if (HX_FIELD_EQ(inName,"archiveTimeTask") ) { outValue = archiveTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeFrameTask") ) { outValue = removeFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"generateGroupId") ) { outValue = generateGroupId_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeTimeTasks") ) { outValue = removeTimeTasks_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"executeTimeTasks") ) { outValue = executeTimeTasks_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"outdatedTimeTasks") ) { outValue = ( outdatedTimeTasks ); return true; }
		if (HX_FIELD_EQ(inName,"currentTimeTaskId") ) { outValue = ( currentTimeTaskId ); return true; }
		if (HX_FIELD_EQ(inName,"warpTimeTasksBack") ) { outValue = warpTimeTasksBack_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"frame_tasks_sorted") ) { outValue = ( frame_tasks_sorted ); return true; }
		if (HX_FIELD_EQ(inName,"currentFrameTaskId") ) { outValue = ( currentFrameTaskId ); return true; }
		if (HX_FIELD_EQ(inName,"addTimeTaskToGroup") ) { outValue = addTimeTaskToGroup_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numTasksInSchedule") ) { outValue = numTasksInSchedule_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"timeTasksScratchpad") ) { outValue = ( timeTasksScratchpad ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"addBreakableTimeTask") ) { outValue = addBreakableTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseRunningTimeTask") ) { outValue = pauseRunningTimeTask_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"addBreakableFrameTask") ) { outValue = addBreakableFrameTask_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"addBreakableTimeTaskToGroup") ) { outValue = addBreakableTimeTaskToGroup_dyn(); return true; }
	}
	return false;
}

bool Scheduler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"vsync") ) { vsync=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"deltas") ) { deltas=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"stopped") ) { stopped=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastTime") ) { lastTime=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"onedifhz") ) { onedifhz=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeTasks") ) { timeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"DIF_COUNT") ) { DIF_COUNT=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameTasks") ) { frameTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maxframetime") ) { maxframetime=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toDeleteFrame") ) { toDeleteFrame=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentGroupId") ) { currentGroupId=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"activeTimeTask") ) { activeTimeTask=ioValue.Cast<  ::kha::TimeTask >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pausedTimeTasks") ) { pausedTimeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"outdatedTimeTasks") ) { outdatedTimeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"currentTimeTaskId") ) { currentTimeTaskId=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"frame_tasks_sorted") ) { frame_tasks_sorted=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"currentFrameTaskId") ) { currentFrameTaskId=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"timeTasksScratchpad") ) { timeTasksScratchpad=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Scheduler_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Scheduler_obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Scheduler_obj::timeTasks,HX_("timeTasks",41,72,e1,bf)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Scheduler_obj::pausedTimeTasks,HX_("pausedTimeTasks",b3,8b,45,b2)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Scheduler_obj::outdatedTimeTasks,HX_("outdatedTimeTasks",f9,7d,ac,ed)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Scheduler_obj::timeTasksScratchpad,HX_("timeTasksScratchpad",fa,41,1b,54)},
	{hx::fsFloat,(void *) &Scheduler_obj::timeWarpSaveTime,HX_("timeWarpSaveTime",ff,83,49,b7)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Scheduler_obj::frameTasks,HX_("frameTasks",21,d2,16,ee)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Scheduler_obj::toDeleteFrame,HX_("toDeleteFrame",47,aa,e4,97)},
	{hx::fsFloat,(void *) &Scheduler_obj::current,HX_("current",39,9c,e3,cb)},
	{hx::fsFloat,(void *) &Scheduler_obj::lastTime,HX_("lastTime",83,e5,45,e0)},
	{hx::fsBool,(void *) &Scheduler_obj::frame_tasks_sorted,HX_("frame_tasks_sorted",a0,b7,4e,b9)},
	{hx::fsBool,(void *) &Scheduler_obj::stopped,HX_("stopped",0d,d2,61,43)},
	{hx::fsBool,(void *) &Scheduler_obj::vsync,HX_("vsync",d1,2d,a8,3d)},
	{hx::fsFloat,(void *) &Scheduler_obj::onedifhz,HX_("onedifhz",6d,1e,eb,e6)},
	{hx::fsInt,(void *) &Scheduler_obj::currentFrameTaskId,HX_("currentFrameTaskId",d4,ca,7c,dd)},
	{hx::fsInt,(void *) &Scheduler_obj::currentTimeTaskId,HX_("currentTimeTaskId",06,e4,97,fc)},
	{hx::fsInt,(void *) &Scheduler_obj::currentGroupId,HX_("currentGroupId",c1,f5,8b,94)},
	{hx::fsInt,(void *) &Scheduler_obj::DIF_COUNT,HX_("DIF_COUNT",d1,ab,99,7a)},
	{hx::fsFloat,(void *) &Scheduler_obj::maxframetime,HX_("maxframetime",96,df,54,45)},
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Scheduler_obj::deltas,HX_("deltas",7b,11,e4,6a)},
	{hx::fsFloat,(void *) &Scheduler_obj::startTime,HX_("startTime",8f,45,f0,05)},
	{hx::fsObject /*  ::kha::TimeTask */ ,(void *) &Scheduler_obj::activeTimeTask,HX_("activeTimeTask",d8,75,b0,05)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Scheduler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeTasks,"timeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::pausedTimeTasks,"pausedTimeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::outdatedTimeTasks,"outdatedTimeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeTasksScratchpad,"timeTasksScratchpad");
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeWarpSaveTime,"timeWarpSaveTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::frameTasks,"frameTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::toDeleteFrame,"toDeleteFrame");
	HX_MARK_MEMBER_NAME(Scheduler_obj::current,"current");
	HX_MARK_MEMBER_NAME(Scheduler_obj::lastTime,"lastTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::frame_tasks_sorted,"frame_tasks_sorted");
	HX_MARK_MEMBER_NAME(Scheduler_obj::stopped,"stopped");
	HX_MARK_MEMBER_NAME(Scheduler_obj::vsync,"vsync");
	HX_MARK_MEMBER_NAME(Scheduler_obj::onedifhz,"onedifhz");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentFrameTaskId,"currentFrameTaskId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentTimeTaskId,"currentTimeTaskId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentGroupId,"currentGroupId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::DIF_COUNT,"DIF_COUNT");
	HX_MARK_MEMBER_NAME(Scheduler_obj::maxframetime,"maxframetime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::deltas,"deltas");
	HX_MARK_MEMBER_NAME(Scheduler_obj::startTime,"startTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::activeTimeTask,"activeTimeTask");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Scheduler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeTasks,"timeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::pausedTimeTasks,"pausedTimeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::outdatedTimeTasks,"outdatedTimeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeTasksScratchpad,"timeTasksScratchpad");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeWarpSaveTime,"timeWarpSaveTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::frameTasks,"frameTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::toDeleteFrame,"toDeleteFrame");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::current,"current");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::lastTime,"lastTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::frame_tasks_sorted,"frame_tasks_sorted");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::stopped,"stopped");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::vsync,"vsync");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::onedifhz,"onedifhz");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentFrameTaskId,"currentFrameTaskId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentTimeTaskId,"currentTimeTaskId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentGroupId,"currentGroupId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::DIF_COUNT,"DIF_COUNT");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::maxframetime,"maxframetime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::deltas,"deltas");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::startTime,"startTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::activeTimeTask,"activeTimeTask");
};

#endif

hx::Class Scheduler_obj::__mClass;

static ::String Scheduler_obj_sStaticFields[] = {
	HX_("timeTasks",41,72,e1,bf),
	HX_("pausedTimeTasks",b3,8b,45,b2),
	HX_("outdatedTimeTasks",f9,7d,ac,ed),
	HX_("timeTasksScratchpad",fa,41,1b,54),
	HX_("timeWarpSaveTime",ff,83,49,b7),
	HX_("frameTasks",21,d2,16,ee),
	HX_("toDeleteFrame",47,aa,e4,97),
	HX_("current",39,9c,e3,cb),
	HX_("lastTime",83,e5,45,e0),
	HX_("frame_tasks_sorted",a0,b7,4e,b9),
	HX_("stopped",0d,d2,61,43),
	HX_("vsync",d1,2d,a8,3d),
	HX_("onedifhz",6d,1e,eb,e6),
	HX_("currentFrameTaskId",d4,ca,7c,dd),
	HX_("currentTimeTaskId",06,e4,97,fc),
	HX_("currentGroupId",c1,f5,8b,94),
	HX_("DIF_COUNT",d1,ab,99,7a),
	HX_("maxframetime",96,df,54,45),
	HX_("deltas",7b,11,e4,6a),
	HX_("startTime",8f,45,f0,05),
	HX_("activeTimeTask",d8,75,b0,05),
	HX_("init",10,3b,bb,45),
	HX_("start",62,74,0b,84),
	HX_("stop",02,f0,5b,4c),
	HX_("isStopped",43,4f,60,47),
	HX_("warpTimeTasksBack",a0,4d,e0,2f),
	HX_("warp",48,62,f2,4e),
	HX_("executeFrame",b8,bd,09,c1),
	HX_("executeTimeTasks",4c,d9,20,e4),
	HX_("archiveTimeTask",d4,63,91,51),
	HX_("time",0d,cc,fc,4c),
	HX_("realTime",8b,4a,29,10),
	HX_("resetTime",7c,d5,e8,92),
	HX_("addBreakableFrameTask",7a,2f,37,f1),
	HX_("addFrameTask",b1,9f,cb,39),
	HX_("pauseFrameTask",3c,f8,d6,43),
	HX_("removeFrameTask",2e,19,96,7b),
	HX_("generateGroupId",45,ca,b1,62),
	HX_("addBreakableTimeTaskToGroup",5a,97,ee,0d),
	HX_("addTimeTaskToGroup",d1,8a,93,50),
	HX_("addBreakableTimeTask",8a,b5,5d,7b),
	HX_("addTimeTask",33,79,b4,1e),
	HX_("getTimeTask",a8,04,4c,13),
	HX_("pauseTimeTask",08,bb,22,b5),
	HX_("pauseRunningTimeTask",bb,78,5c,93),
	HX_("pauseTimeTasks",6b,ec,40,c9),
	HX_("removeTimeTask",56,7e,ae,b7),
	HX_("removeTimeTasks",5d,0d,00,01),
	HX_("numTasksInSchedule",e4,56,ab,02),
	HX_("insertSorted",56,fb,c4,a6),
	HX_("sortFrameTasks",1f,1f,22,43),
	::String(null())
};

void Scheduler_obj::__register()
{
	Scheduler_obj _hx_dummy;
	Scheduler_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.Scheduler",51,4d,26,ea);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Scheduler_obj::__GetStatic;
	__mClass->mSetStaticField = &Scheduler_obj::__SetStatic;
	__mClass->mMarkFunc = Scheduler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Scheduler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Scheduler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Scheduler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scheduler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scheduler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Scheduler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_42_boot)
HXDLIN(  42)		timeWarpSaveTime = ((Float)10.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_60_boot)
HXDLIN(  60)		DIF_COUNT = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_61_boot)
HXDLIN(  61)		maxframetime = ((Float)0.5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_65_boot)
HXDLIN(  65)		startTime = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_67_boot)
HXDLIN(  67)		activeTimeTask = null();
            	}
}

} // end namespace kha
