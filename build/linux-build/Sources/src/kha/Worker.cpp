// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_Worker
#include <hxinc/kha/Worker.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_Thread_Impl_
#include <hxinc/sys/thread/_Thread/Thread_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1bb5df79bd9b0825_91_new,"kha.Worker","new",0x9484909a,"kha.Worker.new","kha/Worker.hx",91,0x3bca77f5)
HX_LOCAL_STACK_FRAME(_hx_pos_1bb5df79bd9b0825_99_notify,"kha.Worker","notify",0x6ad67acf,"kha.Worker.notify","kha/Worker.hx",99,0x3bca77f5)
HX_LOCAL_STACK_FRAME(_hx_pos_1bb5df79bd9b0825_108_post,"kha.Worker","post",0x60d3f6e6,"kha.Worker.post","kha/Worker.hx",108,0x3bca77f5)
HX_LOCAL_STACK_FRAME(_hx_pos_1bb5df79bd9b0825_95_create,"kha.Worker","create",0xb52d0702,"kha.Worker.create","kha/Worker.hx",95,0x3bca77f5)
HX_LOCAL_STACK_FRAME(_hx_pos_1bb5df79bd9b0825_112_notifyWorker,"kha.Worker","notifyWorker",0x07fba4ad,"kha.Worker.notifyWorker","kha/Worker.hx",112,0x3bca77f5)
HX_LOCAL_STACK_FRAME(_hx_pos_1bb5df79bd9b0825_121_postFromWorker,"kha.Worker","postFromWorker",0x4d0b0c0e,"kha.Worker.postFromWorker","kha/Worker.hx",121,0x3bca77f5)
namespace kha{

void Worker_obj::__construct( ::Dynamic thread){
            	HX_GC_STACKFRAME(&_hx_pos_1bb5df79bd9b0825_91_new)
HXDLIN(  91)		this->_hx_set_thread(HX_CTX, thread);
            	}

Dynamic Worker_obj::__CreateEmpty() { return new Worker_obj; }

void *Worker_obj::_hx_vtable = 0;

Dynamic Worker_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Worker_obj > _hx_result = new Worker_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Worker_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x482db782;
}

void Worker_obj::notify( ::Dynamic func){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,func) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_1bb5df79bd9b0825_99_notify)
HXLINE( 100)			 ::Dynamic message = ::sys::thread::_Thread::Thread_Impl__obj::readMessage(false);
HXLINE( 101)			if (hx::IsNotNull( message )) {
HXLINE( 102)				func(message);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_1bb5df79bd9b0825_99_notify)
HXDLIN(  99)		::kha::Scheduler_obj::addFrameTask( ::Dynamic(new _hx_Closure_0(func)),0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Worker_obj,notify,(void))

void Worker_obj::post( ::Dynamic message){
            	HX_STACKFRAME(&_hx_pos_1bb5df79bd9b0825_108_post)
HXDLIN( 108)		 ::__hxcpp_thread_send(this->thread,message);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Worker_obj,post,(void))

 ::Dynamic Worker_obj::_mainThread;

 ::kha::Worker Worker_obj::create(hx::Class clazz){
            	HX_GC_STACKFRAME(&_hx_pos_1bb5df79bd9b0825_95_create)
HXDLIN(  95)		 ::Dynamic this1 =  ::__hxcpp_thread_create(::Reflect_obj::field(clazz,HX_("main",39,38,56,48)));
HXDLIN(  95)		return  ::kha::Worker_obj::__alloc( HX_CTX ,this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Worker_obj,create,return )

void Worker_obj::notifyWorker( ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_1bb5df79bd9b0825_112_notifyWorker)
HXDLIN( 112)		while(true){
HXLINE( 113)			 ::Dynamic message = ::sys::thread::_Thread::Thread_Impl__obj::readMessage(true);
HXLINE( 114)			if (hx::IsNotNull( message )) {
HXLINE( 115)				func(message);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Worker_obj,notifyWorker,(void))

void Worker_obj::postFromWorker( ::Dynamic message){
            	HX_STACKFRAME(&_hx_pos_1bb5df79bd9b0825_121_postFromWorker)
HXDLIN( 121)		 ::__hxcpp_thread_send(::kha::Worker_obj::_mainThread,message);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Worker_obj,postFromWorker,(void))


hx::ObjectPtr< Worker_obj > Worker_obj::__new( ::Dynamic thread) {
	hx::ObjectPtr< Worker_obj > __this = new Worker_obj();
	__this->__construct(thread);
	return __this;
}

hx::ObjectPtr< Worker_obj > Worker_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic thread) {
	Worker_obj *__this = (Worker_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Worker_obj), true, "kha.Worker"));
	*(void **)__this = Worker_obj::_hx_vtable;
	__this->__construct(thread);
	return __this;
}

Worker_obj::Worker_obj()
{
}

void Worker_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Worker);
	HX_MARK_MEMBER_NAME(thread,"thread");
	HX_MARK_END_CLASS();
}

void Worker_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(thread,"thread");
}

hx::Val Worker_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"post") ) { return hx::Val( post_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"thread") ) { return hx::Val( thread ); }
		if (HX_FIELD_EQ(inName,"notify") ) { return hx::Val( notify_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Worker_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_mainThread") ) { outValue = ( _mainThread ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"notifyWorker") ) { outValue = notifyWorker_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"postFromWorker") ) { outValue = postFromWorker_dyn(); return true; }
	}
	return false;
}

hx::Val Worker_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"thread") ) { _hx_set_thread(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Worker_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"_mainThread") ) { _mainThread=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Worker_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("thread",ca,7a,b9,8e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Worker_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Worker_obj,thread),HX_("thread",ca,7a,b9,8e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Worker_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(void *) &Worker_obj::_mainThread,HX_("_mainThread",02,65,ef,b6)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Worker_obj_sMemberFields[] = {
	HX_("thread",ca,7a,b9,8e),
	HX_("notify",c9,da,b8,31),
	HX_("post",60,84,5c,4a),
	::String(null()) };

static void Worker_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Worker_obj::_mainThread,"_mainThread");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Worker_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Worker_obj::_mainThread,"_mainThread");
};

#endif

hx::Class Worker_obj::__mClass;

static ::String Worker_obj_sStaticFields[] = {
	HX_("_mainThread",02,65,ef,b6),
	HX_("create",fc,66,0f,7c),
	HX_("notifyWorker",27,3c,65,37),
	HX_("postFromWorker",08,f6,a4,5b),
	::String(null())
};

void Worker_obj::__register()
{
	Worker_obj _hx_dummy;
	Worker_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.Worker",a8,fb,5d,34);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Worker_obj::__GetStatic;
	__mClass->mSetStaticField = &Worker_obj::__SetStatic;
	__mClass->mMarkFunc = Worker_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Worker_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Worker_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Worker_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Worker_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Worker_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Worker_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
