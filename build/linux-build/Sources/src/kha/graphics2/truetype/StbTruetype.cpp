// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_StbTruetype
#include <hxinc/kha/graphics2/truetype/StbTruetype.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__active_edge
#include <hxinc/kha/graphics2/truetype/Stbtt__active_edge.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__bitmap
#include <hxinc/kha/graphics2/truetype/Stbtt__bitmap.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__edge
#include <hxinc/kha/graphics2/truetype/Stbtt__edge.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt__point
#include <hxinc/kha/graphics2/truetype/Stbtt__point.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_aligned_quad
#include <hxinc/kha/graphics2/truetype/Stbtt_aligned_quad.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_bakedchar
#include <hxinc/kha/graphics2/truetype/Stbtt_bakedchar.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_fontinfo
#include <hxinc/kha/graphics2/truetype/Stbtt_fontinfo.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_font_v_metrics
#include <hxinc/kha/graphics2/truetype/Stbtt_temp_font_v_metrics.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_glyph_h_metrics
#include <hxinc/kha/graphics2/truetype/Stbtt_temp_glyph_h_metrics.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_rect
#include <hxinc/kha/graphics2/truetype/Stbtt_temp_rect.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_region
#include <hxinc/kha/graphics2/truetype/Stbtt_temp_region.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_vertex
#include <hxinc/kha/graphics2/truetype/Stbtt_vertex.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_VectorOfIntPointer
#include <hxinc/kha/graphics2/truetype/VectorOfIntPointer.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <hxinc/kha/internal/BytesBlob.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_182_STBTT_assert,"kha.graphics2.truetype.StbTruetype","STBTT_assert",0x69bc9cde,"kha.graphics2.truetype.StbTruetype.STBTT_assert","kha/graphics2/truetype/StbTruetype.hx",182,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_183_STBTT_POINT_SIZE,"kha.graphics2.truetype.StbTruetype","STBTT_POINT_SIZE",0xe08bac88,"kha.graphics2.truetype.StbTruetype.STBTT_POINT_SIZE","kha/graphics2/truetype/StbTruetype.hx",183,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_260_ttBYTE,"kha.graphics2.truetype.StbTruetype","ttBYTE",0x1ef477a2,"kha.graphics2.truetype.StbTruetype.ttBYTE","kha/graphics2/truetype/StbTruetype.hx",260,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_263_ttCHAR,"kha.graphics2.truetype.StbTruetype","ttCHAR",0x1f90b770,"kha.graphics2.truetype.StbTruetype.ttCHAR","kha/graphics2/truetype/StbTruetype.hx",263,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_270_ttUSHORT,"kha.graphics2.truetype.StbTruetype","ttUSHORT",0x3b34d301,"kha.graphics2.truetype.StbTruetype.ttUSHORT","kha/graphics2/truetype/StbTruetype.hx",270,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_276_ttSHORT,"kha.graphics2.truetype.StbTruetype","ttSHORT",0xb583b282,"kha.graphics2.truetype.StbTruetype.ttSHORT","kha/graphics2/truetype/StbTruetype.hx",276,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_285_ttULONG,"kha.graphics2.truetype.StbTruetype","ttULONG",0xdef5b277,"kha.graphics2.truetype.StbTruetype.ttULONG","kha/graphics2/truetype/StbTruetype.hx",285,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_287_ttLONG,"kha.graphics2.truetype.StbTruetype","ttLONG",0x2588fe16,"kha.graphics2.truetype.StbTruetype.ttLONG","kha/graphics2/truetype/StbTruetype.hx",287,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_295_ttFixed,"kha.graphics2.truetype.StbTruetype","ttFixed",0x4f3d5f7a,"kha.graphics2.truetype.StbTruetype.ttFixed","kha/graphics2/truetype/StbTruetype.hx",295,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_297_stbtt_tag4,"kha.graphics2.truetype.StbTruetype","stbtt_tag4",0x787a9892,"kha.graphics2.truetype.StbTruetype.stbtt_tag4","kha/graphics2/truetype/StbTruetype.hx",297,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_298_stbtt_tag,"kha.graphics2.truetype.StbTruetype","stbtt_tag",0x6ebf1d62,"kha.graphics2.truetype.StbTruetype.stbtt_tag","kha/graphics2/truetype/StbTruetype.hx",298,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_300_stbtt__isfont,"kha.graphics2.truetype.StbTruetype","stbtt__isfont",0x3c7def60,"kha.graphics2.truetype.StbTruetype.stbtt__isfont","kha/graphics2/truetype/StbTruetype.hx",300,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_310_stbtt__find_table,"kha.graphics2.truetype.StbTruetype","stbtt__find_table",0x8d01186f,"kha.graphics2.truetype.StbTruetype.stbtt__find_table","kha/graphics2/truetype/StbTruetype.hx",310,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_321_stbtt_GetFontOffsetForIndex,"kha.graphics2.truetype.StbTruetype","stbtt_GetFontOffsetForIndex",0x75577749,"kha.graphics2.truetype.StbTruetype.stbtt_GetFontOffsetForIndex","kha/graphics2/truetype/StbTruetype.hx",321,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_339_stbtt_InitFont,"kha.graphics2.truetype.StbTruetype","stbtt_InitFont",0x8c3a8917,"kha.graphics2.truetype.StbTruetype.stbtt_InitFont","kha/graphics2/truetype/StbTruetype.hx",339,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_391_stbtt_FindGlyphIndex,"kha.graphics2.truetype.StbTruetype","stbtt_FindGlyphIndex",0xbf6bd177,"kha.graphics2.truetype.StbTruetype.stbtt_FindGlyphIndex","kha/graphics2/truetype/StbTruetype.hx",391,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_484_stbtt_GetCodepointShape,"kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointShape",0x654c383c,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointShape","kha/graphics2/truetype/StbTruetype.hx",484,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_487_stbtt_setvertex,"kha.graphics2.truetype.StbTruetype","stbtt_setvertex",0x3161958e,"kha.graphics2.truetype.StbTruetype.stbtt_setvertex","kha/graphics2/truetype/StbTruetype.hx",487,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_495_stbtt__GetGlyfOffset,"kha.graphics2.truetype.StbTruetype","stbtt__GetGlyfOffset",0x4b91fab4,"kha.graphics2.truetype.StbTruetype.stbtt__GetGlyfOffset","kha/graphics2/truetype/StbTruetype.hx",495,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_512_stbtt_GetGlyphBox,"kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBox",0x7a6db15d,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBox","kha/graphics2/truetype/StbTruetype.hx",512,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_524_stbtt_GetCodepointBox,"kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBox",0x10930666,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBox","kha/graphics2/truetype/StbTruetype.hx",524,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_527_stbtt_IsGlyphEmpty,"kha.graphics2.truetype.StbTruetype","stbtt_IsGlyphEmpty",0x18ddade3,"kha.graphics2.truetype.StbTruetype.stbtt_IsGlyphEmpty","kha/graphics2/truetype/StbTruetype.hx",527,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_536_stbtt__close_shape,"kha.graphics2.truetype.StbTruetype","stbtt__close_shape",0xb4462613,"kha.graphics2.truetype.StbTruetype.stbtt__close_shape","kha/graphics2/truetype/StbTruetype.hx",536,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_551_copyVertices,"kha.graphics2.truetype.StbTruetype","copyVertices",0xec2e2f68,"kha.graphics2.truetype.StbTruetype.copyVertices","kha/graphics2/truetype/StbTruetype.hx",551,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_556_stbtt_GetGlyphShape,"kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphShape",0xfb60cef3,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphShape","kha/graphics2/truetype/StbTruetype.hx",556,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_814_stbtt_GetGlyphHMetrics,"kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphHMetrics",0x4333ea29,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphHMetrics","kha/graphics2/truetype/StbTruetype.hx",814,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_827_stbtt_GetGlyphKernAdvance,"kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphKernAdvance",0x1e04b09e,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphKernAdvance","kha/graphics2/truetype/StbTruetype.hx",827,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_857_stbtt_GetCodepointKernAdvance,"kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointKernAdvance",0x7383b6a7,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointKernAdvance","kha/graphics2/truetype/StbTruetype.hx",857,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_864_stbtt_GetCodepointHMetrics,"kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointHMetrics",0x35d0b480,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointHMetrics","kha/graphics2/truetype/StbTruetype.hx",864,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_867_stbtt_GetFontVMetrics,"kha.graphics2.truetype.StbTruetype","stbtt_GetFontVMetrics",0x39aaf1fa,"kha.graphics2.truetype.StbTruetype.stbtt_GetFontVMetrics","kha/graphics2/truetype/StbTruetype.hx",867,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_875_stbtt_GetFontBoundingBox,"kha.graphics2.truetype.StbTruetype","stbtt_GetFontBoundingBox",0xf62c3d9a,"kha.graphics2.truetype.StbTruetype.stbtt_GetFontBoundingBox","kha/graphics2/truetype/StbTruetype.hx",875,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_884_stbtt_ScaleForPixelHeight,"kha.graphics2.truetype.StbTruetype","stbtt_ScaleForPixelHeight",0x31fdc196,"kha.graphics2.truetype.StbTruetype.stbtt_ScaleForPixelHeight","kha/graphics2/truetype/StbTruetype.hx",884,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_889_stbtt_ScaleForMappingEmToPixels,"kha.graphics2.truetype.StbTruetype","stbtt_ScaleForMappingEmToPixels",0xa0885387,"kha.graphics2.truetype.StbTruetype.stbtt_ScaleForMappingEmToPixels","kha/graphics2/truetype/StbTruetype.hx",889,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_899_stbtt_GetGlyphBitmapBoxSubpixel,"kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBitmapBoxSubpixel",0x27894954,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel","kha/graphics2/truetype/StbTruetype.hx",899,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_922_stbtt_GetGlyphBitmapBox,"kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBitmapBox",0xb80f022e,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBitmapBox","kha/graphics2/truetype/StbTruetype.hx",922,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_926_stbtt_GetCodepointBitmapBoxSubpixel,"kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBitmapBoxSubpixel",0x1d51fc1d,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel","kha/graphics2/truetype/StbTruetype.hx",926,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_930_stbtt_GetCodepointBitmapBox,"kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBitmapBox",0x0ea343f7,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBitmapBox","kha/graphics2/truetype/StbTruetype.hx",930,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_937_stbtt__new_active,"kha.graphics2.truetype.StbTruetype","stbtt__new_active",0x85e5272c,"kha.graphics2.truetype.StbTruetype.stbtt__new_active","kha/graphics2/truetype/StbTruetype.hx",937,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_955_stbtt__handle_clipped_edge,"kha.graphics2.truetype.StbTruetype","stbtt__handle_clipped_edge",0xa6dfd0ed,"kha.graphics2.truetype.StbTruetype.stbtt__handle_clipped_edge","kha/graphics2/truetype/StbTruetype.hx",955,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_991_stbtt__fill_active_edges_new,"kha.graphics2.truetype.StbTruetype","stbtt__fill_active_edges_new",0xf3ac6eb3,"kha.graphics2.truetype.StbTruetype.stbtt__fill_active_edges_new","kha/graphics2/truetype/StbTruetype.hx",991,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1152_stbtt__rasterize_sorted_edges,"kha.graphics2.truetype.StbTruetype","stbtt__rasterize_sorted_edges",0x45291a03,"kha.graphics2.truetype.StbTruetype.stbtt__rasterize_sorted_edges","kha/graphics2/truetype/StbTruetype.hx",1152,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1248_STBTT__COMPARE,"kha.graphics2.truetype.StbTruetype","STBTT__COMPARE",0x3c42521e,"kha.graphics2.truetype.StbTruetype.STBTT__COMPARE","kha/graphics2/truetype/StbTruetype.hx",1248,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1250_stbtt__sort_edges_ins_sort,"kha.graphics2.truetype.StbTruetype","stbtt__sort_edges_ins_sort",0x1b014492,"kha.graphics2.truetype.StbTruetype.stbtt__sort_edges_ins_sort","kha/graphics2/truetype/StbTruetype.hx",1250,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1270_stbtt__sort_edges_quicksort,"kha.graphics2.truetype.StbTruetype","stbtt__sort_edges_quicksort",0x0f0bde68,"kha.graphics2.truetype.StbTruetype.stbtt__sort_edges_quicksort","kha/graphics2/truetype/StbTruetype.hx",1270,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1332_stbtt__sort_edges,"kha.graphics2.truetype.StbTruetype","stbtt__sort_edges",0x1f8f8edc,"kha.graphics2.truetype.StbTruetype.stbtt__sort_edges","kha/graphics2/truetype/StbTruetype.hx",1332,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1337_stbtt__rasterize,"kha.graphics2.truetype.StbTruetype","stbtt__rasterize",0x7ac8deb0,"kha.graphics2.truetype.StbTruetype.stbtt__rasterize","kha/graphics2/truetype/StbTruetype.hx",1337,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1396_stbtt__add_point,"kha.graphics2.truetype.StbTruetype","stbtt__add_point",0xa284662b,"kha.graphics2.truetype.StbTruetype.stbtt__add_point","kha/graphics2/truetype/StbTruetype.hx",1396,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1403_stbtt__tesselate_curve,"kha.graphics2.truetype.StbTruetype","stbtt__tesselate_curve",0xc138f203,"kha.graphics2.truetype.StbTruetype.stbtt__tesselate_curve","kha/graphics2/truetype/StbTruetype.hx",1403,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1423_stbtt_FlattenCurves,"kha.graphics2.truetype.StbTruetype","stbtt_FlattenCurves",0x59f844b0,"kha.graphics2.truetype.StbTruetype.stbtt_FlattenCurves","kha/graphics2/truetype/StbTruetype.hx",1423,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1493_stbtt_Rasterize,"kha.graphics2.truetype.StbTruetype","stbtt_Rasterize",0x2524cddf,"kha.graphics2.truetype.StbTruetype.stbtt_Rasterize","kha/graphics2/truetype/StbTruetype.hx",1493,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1507_stbtt_GetGlyphBitmapSubpixel,"kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBitmapSubpixel",0x89588a03,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBitmapSubpixel","kha/graphics2/truetype/StbTruetype.hx",1507,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1547_stbtt_GetGlyphBitmap,"kha.graphics2.truetype.StbTruetype","stbtt_GetGlyphBitmap",0xcd367bdd,"kha.graphics2.truetype.StbTruetype.stbtt_GetGlyphBitmap","kha/graphics2/truetype/StbTruetype.hx",1547,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1550_stbtt_MakeGlyphBitmapSubpixel,"kha.graphics2.truetype.StbTruetype","stbtt_MakeGlyphBitmapSubpixel",0xcea2707b,"kha.graphics2.truetype.StbTruetype.stbtt_MakeGlyphBitmapSubpixel","kha/graphics2/truetype/StbTruetype.hx",1550,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1570_stbtt_MakeGlyphBitmap,"kha.graphics2.truetype.StbTruetype","stbtt_MakeGlyphBitmap",0x89f92a55,"kha.graphics2.truetype.StbTruetype.stbtt_MakeGlyphBitmap","kha/graphics2/truetype/StbTruetype.hx",1570,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1574_stbtt_GetCodepointBitmapSubpixel,"kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBitmapSubpixel",0x6a742f9a,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBitmapSubpixel","kha/graphics2/truetype/StbTruetype.hx",1574,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1578_stbtt_MakeCodepointBitmapSubpixel,"kha.graphics2.truetype.StbTruetype","stbtt_MakeCodepointBitmapSubpixel",0xc9beb212,"kha.graphics2.truetype.StbTruetype.stbtt_MakeCodepointBitmapSubpixel","kha/graphics2/truetype/StbTruetype.hx",1578,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1582_stbtt_GetCodepointBitmap,"kha.graphics2.truetype.StbTruetype","stbtt_GetCodepointBitmap",0x11473274,"kha.graphics2.truetype.StbTruetype.stbtt_GetCodepointBitmap","kha/graphics2/truetype/StbTruetype.hx",1582,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1586_stbtt_MakeCodepointBitmap,"kha.graphics2.truetype.StbTruetype","stbtt_MakeCodepointBitmap",0x280e7cec,"kha.graphics2.truetype.StbTruetype.stbtt_MakeCodepointBitmap","kha/graphics2/truetype/StbTruetype.hx",1586,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1599_stbtt_BakeFontBitmap,"kha.graphics2.truetype.StbTruetype","stbtt_BakeFontBitmap",0x6b4863af,"kha.graphics2.truetype.StbTruetype.stbtt_BakeFontBitmap","kha/graphics2/truetype/StbTruetype.hx",1599,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_1656_stbtt_GetBakedQuad,"kha.graphics2.truetype.StbTruetype","stbtt_GetBakedQuad",0x21e67034,"kha.graphics2.truetype.StbTruetype.stbtt_GetBakedQuad","kha/graphics2/truetype/StbTruetype.hx",1656,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_185_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",185,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_186_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",186,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_187_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",187,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_189_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",189,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_190_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",190,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_191_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",191,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_192_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",192,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_193_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",193,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_196_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",196,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_197_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",197,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_198_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",198,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_199_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",199,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_202_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",202,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_203_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",203,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_204_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",204,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_205_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",205,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_206_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",206,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_209_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",209,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_210_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",210,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_211_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",211,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_212_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",212,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_215_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",215,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_216_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",216,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_217_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",217,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_218_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",218,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_219_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",219,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_220_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",220,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_221_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",221,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_222_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",222,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_226_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",226,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_227_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",227,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_228_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",228,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_229_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",229,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_230_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",230,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_231_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",231,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_232_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",232,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_233_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",233,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_234_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",234,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_235_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",235,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_236_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",236,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_237_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",237,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_240_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",240,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_241_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",241,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_242_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",242,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_243_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",243,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_244_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",244,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_245_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",245,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_246_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",246,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_247_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",247,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_248_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",248,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_249_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",249,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_250_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",250,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_251_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",251,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_252_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",252,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_253_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",253,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_255_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",255,0x5d9e0de9)
HX_LOCAL_STACK_FRAME(_hx_pos_d244f07465627071_257_boot,"kha.graphics2.truetype.StbTruetype","boot",0x311214cc,"kha.graphics2.truetype.StbTruetype.boot","kha/graphics2/truetype/StbTruetype.hx",257,0x5d9e0de9)
namespace kha{
namespace graphics2{
namespace truetype{

void StbTruetype_obj::__construct() { }

Dynamic StbTruetype_obj::__CreateEmpty() { return new StbTruetype_obj; }

void *StbTruetype_obj::_hx_vtable = 0;

Dynamic StbTruetype_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StbTruetype_obj > _hx_result = new StbTruetype_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StbTruetype_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x170942de;
}

void StbTruetype_obj::STBTT_assert(bool value){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_182_STBTT_assert)
HXDLIN( 182)		if (!(value)) {
HXDLIN( 182)			HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,STBTT_assert,(void))

Float StbTruetype_obj::STBTT_POINT_SIZE(Float x){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_183_STBTT_POINT_SIZE)
HXDLIN( 183)		return -(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,STBTT_POINT_SIZE,return )

int StbTruetype_obj::STBTT_vmove;

int StbTruetype_obj::STBTT_vline;

int StbTruetype_obj::STBTT_vcurve;

int StbTruetype_obj::STBTT_MACSTYLE_DONTCARE;

int StbTruetype_obj::STBTT_MACSTYLE_BOLD;

int StbTruetype_obj::STBTT_MACSTYLE_ITALIC;

int StbTruetype_obj::STBTT_MACSTYLE_UNDERSCORE;

int StbTruetype_obj::STBTT_MACSTYLE_NONE;

int StbTruetype_obj::STBTT_PLATFORM_ID_UNICODE;

int StbTruetype_obj::STBTT_PLATFORM_ID_MAC;

int StbTruetype_obj::STBTT_PLATFORM_ID_ISO;

int StbTruetype_obj::STBTT_PLATFORM_ID_MICROSOFT;

int StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_0;

int StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_1;

int StbTruetype_obj::STBTT_UNICODE_EID_ISO_10646;

int StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_BMP;

int StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_FULL;

int StbTruetype_obj::STBTT_MS_EID_SYMBOL;

int StbTruetype_obj::STBTT_MS_EID_UNICODE_BMP;

int StbTruetype_obj::STBTT_MS_EID_SHIFTJIS;

int StbTruetype_obj::STBTT_MS_EID_UNICODE_FULL;

int StbTruetype_obj::STBTT_MAC_EID_ROMAN;

int StbTruetype_obj::STBTT_MAC_EID_ARABIC;

int StbTruetype_obj::STBTT_MAC_EID_JAPANESE;

int StbTruetype_obj::STBTT_MAC_EID_HEBREW;

int StbTruetype_obj::STBTT_MAC_EID_CHINESE_TRAD;

int StbTruetype_obj::STBTT_MAC_EID_GREEK;

int StbTruetype_obj::STBTT_MAC_EID_KOREAN;

int StbTruetype_obj::STBTT_MAC_EID_RUSSIAN;

int StbTruetype_obj::STBTT_MS_LANG_ENGLISH;

int StbTruetype_obj::STBTT_MS_LANG_ITALIAN;

int StbTruetype_obj::STBTT_MS_LANG_CHINESE;

int StbTruetype_obj::STBTT_MS_LANG_JAPANESE;

int StbTruetype_obj::STBTT_MS_LANG_DUTCH;

int StbTruetype_obj::STBTT_MS_LANG_KOREAN;

int StbTruetype_obj::STBTT_MS_LANG_FRENCH;

int StbTruetype_obj::STBTT_MS_LANG_RUSSIAN;

int StbTruetype_obj::STBTT_MS_LANG_GERMAN;

int StbTruetype_obj::STBTT_MS_LANG_SPANISH;

int StbTruetype_obj::STBTT_MS_LANG_HEBREW;

int StbTruetype_obj::STBTT_MS_LANG_SWEDISH;

int StbTruetype_obj::STBTT_MAC_LANG_ENGLISH;

int StbTruetype_obj::STBTT_MAC_LANG_JAPANESE;

int StbTruetype_obj::STBTT_MAC_LANG_ARABIC;

int StbTruetype_obj::STBTT_MAC_LANG_KOREAN;

int StbTruetype_obj::STBTT_MAC_LANG_DUTCH;

int StbTruetype_obj::STBTT_MAC_LANG_RUSSIAN;

int StbTruetype_obj::STBTT_MAC_LANG_FRENCH;

int StbTruetype_obj::STBTT_MAC_LANG_SPANISH;

int StbTruetype_obj::STBTT_MAC_LANG_GERMAN;

int StbTruetype_obj::STBTT_MAC_LANG_SWEDISH;

int StbTruetype_obj::STBTT_MAC_LANG_HEBREW;

int StbTruetype_obj::STBTT_MAC_LANG_CHINESE_SIMPLIFIED;

int StbTruetype_obj::STBTT_MAC_LANG_ITALIAN;

int StbTruetype_obj::STBTT_MAC_LANG_CHINESE_TRAD;

int StbTruetype_obj::STBTT_MAX_OVERSAMPLE;

int StbTruetype_obj::STBTT_RASTERIZER_VERSION;

int StbTruetype_obj::ttBYTE( ::kha::internal::BytesBlob p,hx::Null< int >  __o_pos){
            		int pos = __o_pos.Default(0);
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_260_ttBYTE)
HXDLIN( 260)		return p->readU8(pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttBYTE,return )

int StbTruetype_obj::ttCHAR( ::kha::internal::BytesBlob p,hx::Null< int >  __o_pos){
            		int pos = __o_pos.Default(0);
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_263_ttCHAR)
HXLINE( 264)		int n = p->readU8(pos);
HXLINE( 265)		if ((n >= 128)) {
HXLINE( 266)			return (n - 256);
            		}
HXLINE( 267)		return n;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttCHAR,return )

int StbTruetype_obj::ttUSHORT( ::kha::internal::BytesBlob p,hx::Null< int >  __o_pos){
            		int pos = __o_pos.Default(0);
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_270_ttUSHORT)
HXLINE( 271)		int ch1 = p->readU8(pos);
HXLINE( 272)		int ch2 = p->readU8((pos + 1));
HXLINE( 273)		return (ch2 | (ch1 << 8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttUSHORT,return )

int StbTruetype_obj::ttSHORT( ::kha::internal::BytesBlob p,hx::Null< int >  __o_pos){
            		int pos = __o_pos.Default(0);
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_276_ttSHORT)
HXLINE( 277)		int ch1 = p->readU8(pos);
HXLINE( 278)		int ch2 = p->readU8((pos + 1));
HXLINE( 279)		int n = (ch2 | (ch1 << 8));
HXLINE( 280)		if (((n & 32768) != 0)) {
HXLINE( 281)			return (n - 65536);
            		}
HXLINE( 282)		return n;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttSHORT,return )

int StbTruetype_obj::ttULONG( ::kha::internal::BytesBlob p,hx::Null< int >  __o_pos){
            		int pos = __o_pos.Default(0);
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_285_ttULONG)
HXDLIN( 285)		int ch1 = p->readU8(pos);
HXDLIN( 285)		int ch2 = p->readU8((pos + 1));
HXDLIN( 285)		int ch3 = p->readU8((pos + 2));
HXDLIN( 285)		int ch4 = p->readU8((pos + 3));
HXDLIN( 285)		return (((ch4 | (ch3 << 8)) | (ch2 << 16)) | (ch1 << 24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttULONG,return )

int StbTruetype_obj::ttLONG( ::kha::internal::BytesBlob p,hx::Null< int >  __o_pos){
            		int pos = __o_pos.Default(0);
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_287_ttLONG)
HXLINE( 288)		int ch1 = p->readU8(pos);
HXLINE( 289)		int ch2 = p->readU8((pos + 1));
HXLINE( 290)		int ch3 = p->readU8((pos + 2));
HXLINE( 291)		int ch4 = p->readU8((pos + 3));
HXLINE( 292)		return (((ch4 | (ch3 << 8)) | (ch2 << 16)) | (ch1 << 24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttLONG,return )

int StbTruetype_obj::ttFixed( ::kha::internal::BytesBlob p,hx::Null< int >  __o_pos){
            		int pos = __o_pos.Default(0);
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_295_ttFixed)
HXDLIN( 295)		int ch1 = p->readU8(pos);
HXDLIN( 295)		int ch2 = p->readU8((pos + 1));
HXDLIN( 295)		int ch3 = p->readU8((pos + 2));
HXDLIN( 295)		int ch4 = p->readU8((pos + 3));
HXDLIN( 295)		return (((ch4 | (ch3 << 8)) | (ch2 << 16)) | (ch1 << 24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,ttFixed,return )

bool StbTruetype_obj::stbtt_tag4( ::kha::internal::BytesBlob p,int pos,int c0,int c1,int c2,int c3){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_297_stbtt_tag4)
HXDLIN( 297)		bool _hx_tmp;
HXDLIN( 297)		bool _hx_tmp1;
HXDLIN( 297)		if ((p->readU8(pos) == c0)) {
HXDLIN( 297)			_hx_tmp1 = (p->readU8((pos + 1)) == c1);
            		}
            		else {
HXDLIN( 297)			_hx_tmp1 = false;
            		}
HXDLIN( 297)		if (_hx_tmp1) {
HXDLIN( 297)			_hx_tmp = (p->readU8((pos + 2)) == c2);
            		}
            		else {
HXDLIN( 297)			_hx_tmp = false;
            		}
HXDLIN( 297)		if (_hx_tmp) {
HXDLIN( 297)			return (p->readU8((pos + 3)) == c3);
            		}
            		else {
HXDLIN( 297)			return false;
            		}
HXDLIN( 297)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt_tag4,return )

bool StbTruetype_obj::stbtt_tag( ::kha::internal::BytesBlob p,int pos,::String str){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_298_stbtt_tag)
HXDLIN( 298)		int c0 = ( (int)(str.charCodeAt(0)) );
HXDLIN( 298)		int c1 = ( (int)(str.charCodeAt(1)) );
HXDLIN( 298)		int c2 = ( (int)(str.charCodeAt(2)) );
HXDLIN( 298)		int c3 = ( (int)(str.charCodeAt(3)) );
HXDLIN( 298)		bool _hx_tmp;
HXDLIN( 298)		bool _hx_tmp1;
HXDLIN( 298)		if ((p->readU8(pos) == c0)) {
HXDLIN( 298)			_hx_tmp1 = (p->readU8((pos + 1)) == c1);
            		}
            		else {
HXDLIN( 298)			_hx_tmp1 = false;
            		}
HXDLIN( 298)		if (_hx_tmp1) {
HXDLIN( 298)			_hx_tmp = (p->readU8((pos + 2)) == c2);
            		}
            		else {
HXDLIN( 298)			_hx_tmp = false;
            		}
HXDLIN( 298)		if (_hx_tmp) {
HXDLIN( 298)			return (p->readU8((pos + 3)) == c3);
            		}
            		else {
HXDLIN( 298)			return false;
            		}
HXDLIN( 298)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_tag,return )

bool StbTruetype_obj::stbtt__isfont( ::kha::internal::BytesBlob font){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_300_stbtt__isfont)
HXLINE( 302)		int c0 = ( (int)(HX_("1",31,00,00,00).charCodeAt(0)) );
HXDLIN( 302)		bool _hx_tmp;
HXDLIN( 302)		bool _hx_tmp1;
HXDLIN( 302)		bool _hx_tmp2;
HXDLIN( 302)		if ((font->readU8(0) == c0)) {
HXLINE( 302)			_hx_tmp2 = (font->readU8(1) == 0);
            		}
            		else {
HXLINE( 302)			_hx_tmp2 = false;
            		}
HXDLIN( 302)		if (_hx_tmp2) {
HXLINE( 302)			_hx_tmp1 = (font->readU8(2) == 0);
            		}
            		else {
HXLINE( 302)			_hx_tmp1 = false;
            		}
HXDLIN( 302)		if (_hx_tmp1) {
HXLINE( 302)			_hx_tmp = (font->readU8(3) == 0);
            		}
            		else {
HXLINE( 302)			_hx_tmp = false;
            		}
HXDLIN( 302)		if (_hx_tmp) {
HXLINE( 302)			return true;
            		}
HXLINE( 303)		int c01 = ( (int)(HX_("typ1",86,f2,08,4d).charCodeAt(0)) );
HXDLIN( 303)		int c1 = ( (int)(HX_("typ1",86,f2,08,4d).charCodeAt(1)) );
HXDLIN( 303)		int c2 = ( (int)(HX_("typ1",86,f2,08,4d).charCodeAt(2)) );
HXDLIN( 303)		int c3 = ( (int)(HX_("typ1",86,f2,08,4d).charCodeAt(3)) );
HXDLIN( 303)		bool _hx_tmp3;
HXDLIN( 303)		bool _hx_tmp4;
HXDLIN( 303)		bool _hx_tmp5;
HXDLIN( 303)		if ((font->readU8(0) == c01)) {
HXLINE( 303)			_hx_tmp5 = (font->readU8(1) == c1);
            		}
            		else {
HXLINE( 303)			_hx_tmp5 = false;
            		}
HXDLIN( 303)		if (_hx_tmp5) {
HXLINE( 303)			_hx_tmp4 = (font->readU8(2) == c2);
            		}
            		else {
HXLINE( 303)			_hx_tmp4 = false;
            		}
HXDLIN( 303)		if (_hx_tmp4) {
HXLINE( 303)			_hx_tmp3 = (font->readU8(3) == c3);
            		}
            		else {
HXLINE( 303)			_hx_tmp3 = false;
            		}
HXDLIN( 303)		if (_hx_tmp3) {
HXLINE( 303)			return true;
            		}
HXLINE( 304)		int c02 = ( (int)(HX_("OTTO",e0,e1,77,34).charCodeAt(0)) );
HXDLIN( 304)		int c11 = ( (int)(HX_("OTTO",e0,e1,77,34).charCodeAt(1)) );
HXDLIN( 304)		int c21 = ( (int)(HX_("OTTO",e0,e1,77,34).charCodeAt(2)) );
HXDLIN( 304)		int c31 = ( (int)(HX_("OTTO",e0,e1,77,34).charCodeAt(3)) );
HXDLIN( 304)		bool _hx_tmp6;
HXDLIN( 304)		bool _hx_tmp7;
HXDLIN( 304)		bool _hx_tmp8;
HXDLIN( 304)		if ((font->readU8(0) == c02)) {
HXLINE( 304)			_hx_tmp8 = (font->readU8(1) == c11);
            		}
            		else {
HXLINE( 304)			_hx_tmp8 = false;
            		}
HXDLIN( 304)		if (_hx_tmp8) {
HXLINE( 304)			_hx_tmp7 = (font->readU8(2) == c21);
            		}
            		else {
HXLINE( 304)			_hx_tmp7 = false;
            		}
HXDLIN( 304)		if (_hx_tmp7) {
HXLINE( 304)			_hx_tmp6 = (font->readU8(3) == c31);
            		}
            		else {
HXLINE( 304)			_hx_tmp6 = false;
            		}
HXDLIN( 304)		if (_hx_tmp6) {
HXLINE( 304)			return true;
            		}
HXLINE( 305)		bool _hx_tmp9;
HXDLIN( 305)		bool _hx_tmp10;
HXDLIN( 305)		bool _hx_tmp11;
HXDLIN( 305)		if ((font->readU8(0) == 0)) {
HXLINE( 305)			_hx_tmp11 = (font->readU8(1) == 1);
            		}
            		else {
HXLINE( 305)			_hx_tmp11 = false;
            		}
HXDLIN( 305)		if (_hx_tmp11) {
HXLINE( 305)			_hx_tmp10 = (font->readU8(2) == 0);
            		}
            		else {
HXLINE( 305)			_hx_tmp10 = false;
            		}
HXDLIN( 305)		if (_hx_tmp10) {
HXLINE( 305)			_hx_tmp9 = (font->readU8(3) == 0);
            		}
            		else {
HXLINE( 305)			_hx_tmp9 = false;
            		}
HXDLIN( 305)		if (_hx_tmp9) {
HXLINE( 305)			return true;
            		}
HXLINE( 306)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,stbtt__isfont,return )

int StbTruetype_obj::stbtt__find_table( ::kha::internal::BytesBlob data,int fontstart,::String tag){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_310_stbtt__find_table)
HXLINE( 311)		int pos = (fontstart + 4);
HXDLIN( 311)		int ch1 = data->readU8(pos);
HXDLIN( 311)		int ch2 = data->readU8((pos + 1));
HXDLIN( 311)		int num_tables = (ch2 | (ch1 << 8));
HXLINE( 312)		int tabledir = (fontstart + 12);
HXLINE( 313)		{
HXLINE( 313)			int _g = 0;
HXDLIN( 313)			int _g1 = num_tables;
HXDLIN( 313)			while((_g < _g1)){
HXLINE( 313)				_g = (_g + 1);
HXDLIN( 313)				int i = (_g - 1);
HXLINE( 314)				int loc = (tabledir + (16 * i));
HXLINE( 315)				int c0 = ( (int)(tag.charCodeAt(0)) );
HXDLIN( 315)				int c1 = ( (int)(tag.charCodeAt(1)) );
HXDLIN( 315)				int c2 = ( (int)(tag.charCodeAt(2)) );
HXDLIN( 315)				int c3 = ( (int)(tag.charCodeAt(3)) );
HXDLIN( 315)				bool _hx_tmp;
HXDLIN( 315)				bool _hx_tmp1;
HXDLIN( 315)				bool _hx_tmp2;
HXDLIN( 315)				if ((data->readU8(loc) == c0)) {
HXLINE( 315)					_hx_tmp2 = (data->readU8((loc + 1)) == c1);
            				}
            				else {
HXLINE( 315)					_hx_tmp2 = false;
            				}
HXDLIN( 315)				if (_hx_tmp2) {
HXLINE( 315)					_hx_tmp1 = (data->readU8((loc + 2)) == c2);
            				}
            				else {
HXLINE( 315)					_hx_tmp1 = false;
            				}
HXDLIN( 315)				if (_hx_tmp1) {
HXLINE( 315)					_hx_tmp = (data->readU8((loc + 3)) == c3);
            				}
            				else {
HXLINE( 315)					_hx_tmp = false;
            				}
HXDLIN( 315)				if (_hx_tmp) {
HXLINE( 316)					int pos1 = (loc + 8);
HXDLIN( 316)					int ch11 = data->readU8(pos1);
HXDLIN( 316)					int ch21 = data->readU8((pos1 + 1));
HXDLIN( 316)					int ch3 = data->readU8((pos1 + 2));
HXDLIN( 316)					int ch4 = data->readU8((pos1 + 3));
HXDLIN( 316)					return (((ch4 | (ch3 << 8)) | (ch21 << 16)) | (ch11 << 24));
            				}
            			}
            		}
HXLINE( 318)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt__find_table,return )

int StbTruetype_obj::stbtt_GetFontOffsetForIndex( ::kha::internal::BytesBlob font_collection,int index){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_321_stbtt_GetFontOffsetForIndex)
HXLINE( 323)		if (::kha::graphics2::truetype::StbTruetype_obj::stbtt__isfont(font_collection)) {
HXLINE( 324)			if ((index == 0)) {
HXLINE( 324)				return 0;
            			}
            			else {
HXLINE( 324)				return -1;
            			}
            		}
HXLINE( 327)		int c0 = ( (int)(HX_("ttcf",23,1c,05,4d).charCodeAt(0)) );
HXDLIN( 327)		int c1 = ( (int)(HX_("ttcf",23,1c,05,4d).charCodeAt(1)) );
HXDLIN( 327)		int c2 = ( (int)(HX_("ttcf",23,1c,05,4d).charCodeAt(2)) );
HXDLIN( 327)		int c3 = ( (int)(HX_("ttcf",23,1c,05,4d).charCodeAt(3)) );
HXDLIN( 327)		bool _hx_tmp;
HXDLIN( 327)		bool _hx_tmp1;
HXDLIN( 327)		bool _hx_tmp2;
HXDLIN( 327)		if ((font_collection->readU8(0) == c0)) {
HXLINE( 327)			_hx_tmp2 = (font_collection->readU8(1) == c1);
            		}
            		else {
HXLINE( 327)			_hx_tmp2 = false;
            		}
HXDLIN( 327)		if (_hx_tmp2) {
HXLINE( 327)			_hx_tmp1 = (font_collection->readU8(2) == c2);
            		}
            		else {
HXLINE( 327)			_hx_tmp1 = false;
            		}
HXDLIN( 327)		if (_hx_tmp1) {
HXLINE( 327)			_hx_tmp = (font_collection->readU8(3) == c3);
            		}
            		else {
HXLINE( 327)			_hx_tmp = false;
            		}
HXDLIN( 327)		if (_hx_tmp) {
HXLINE( 329)			bool _hx_tmp3;
HXDLIN( 329)			int ch1 = font_collection->readU8(4);
HXDLIN( 329)			int ch2 = font_collection->readU8(5);
HXDLIN( 329)			int ch3 = font_collection->readU8(6);
HXDLIN( 329)			int ch4 = font_collection->readU8(7);
HXDLIN( 329)			if (((((ch4 | (ch3 << 8)) | (ch2 << 16)) | (ch1 << 24)) != 65536)) {
HXLINE( 329)				int ch11 = font_collection->readU8(4);
HXDLIN( 329)				int ch21 = font_collection->readU8(5);
HXDLIN( 329)				int ch31 = font_collection->readU8(6);
HXDLIN( 329)				int ch41 = font_collection->readU8(7);
HXDLIN( 329)				_hx_tmp3 = ((((ch41 | (ch31 << 8)) | (ch21 << 16)) | (ch11 << 24)) == 131072);
            			}
            			else {
HXLINE( 329)				_hx_tmp3 = true;
            			}
HXDLIN( 329)			if (_hx_tmp3) {
HXLINE( 330)				int ch12 = font_collection->readU8(8);
HXDLIN( 330)				int ch22 = font_collection->readU8(9);
HXDLIN( 330)				int ch32 = font_collection->readU8(10);
HXDLIN( 330)				int ch42 = font_collection->readU8(11);
HXDLIN( 330)				int n = (((ch42 | (ch32 << 8)) | (ch22 << 16)) | (ch12 << 24));
HXLINE( 331)				if ((index >= n)) {
HXLINE( 332)					return -1;
            				}
HXLINE( 333)				int pos = (12 + (index * 4));
HXDLIN( 333)				int ch13 = font_collection->readU8(pos);
HXDLIN( 333)				int ch23 = font_collection->readU8((pos + 1));
HXDLIN( 333)				int ch33 = font_collection->readU8((pos + 2));
HXDLIN( 333)				int ch43 = font_collection->readU8((pos + 3));
HXDLIN( 333)				return (((ch43 | (ch33 << 8)) | (ch23 << 16)) | (ch13 << 24));
            			}
            		}
HXLINE( 336)		return -1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetFontOffsetForIndex,return )

bool StbTruetype_obj::stbtt_InitFont( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::internal::BytesBlob data,int fontstart){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_339_stbtt_InitFont)
HXLINE( 343)		info->_hx_set_data(HX_CTX, data);
HXLINE( 344)		info->fontstart = fontstart;
HXLINE( 340)		int cmap = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("cmap",19,2a,c3,41));
HXLINE( 347)		info->loca = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("loca",e1,9b,b7,47));
HXLINE( 348)		info->head = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("head",20,29,0b,45));
HXLINE( 349)		info->glyf = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("glyf",32,57,67,44));
HXLINE( 350)		info->hhea = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("hhea",5c,73,0d,45));
HXLINE( 351)		info->hmtx = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("hmtx",c9,4b,11,45));
HXLINE( 352)		info->kern = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("kern",d6,db,06,47));
HXLINE( 353)		bool _hx_tmp;
HXDLIN( 353)		bool _hx_tmp1;
HXDLIN( 353)		bool _hx_tmp2;
HXDLIN( 353)		bool _hx_tmp3;
HXDLIN( 353)		bool _hx_tmp4;
HXDLIN( 353)		if ((cmap != 0)) {
HXLINE( 353)			_hx_tmp4 = (info->loca == 0);
            		}
            		else {
HXLINE( 353)			_hx_tmp4 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp4)) {
HXLINE( 353)			_hx_tmp3 = (info->head == 0);
            		}
            		else {
HXLINE( 353)			_hx_tmp3 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp3)) {
HXLINE( 353)			_hx_tmp2 = (info->glyf == 0);
            		}
            		else {
HXLINE( 353)			_hx_tmp2 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp2)) {
HXLINE( 353)			_hx_tmp1 = (info->hhea == 0);
            		}
            		else {
HXLINE( 353)			_hx_tmp1 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp1)) {
HXLINE( 353)			_hx_tmp = (info->hmtx == 0);
            		}
            		else {
HXLINE( 353)			_hx_tmp = true;
            		}
HXDLIN( 353)		if (_hx_tmp) {
HXLINE( 354)			return false;
            		}
HXLINE( 340)		int t = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__find_table(data,fontstart,HX_("maxp",4c,45,56,48));
HXLINE( 357)		if ((t != 0)) {
HXLINE( 358)			int pos = (t + 4);
HXDLIN( 358)			int ch1 = data->readU8(pos);
HXDLIN( 358)			int ch2 = data->readU8((pos + 1));
HXDLIN( 358)			info->numGlyphs = (ch2 | (ch1 << 8));
            		}
            		else {
HXLINE( 360)			info->numGlyphs = 65535;
            		}
HXLINE( 365)		int pos1 = (cmap + 2);
HXDLIN( 365)		int ch11 = data->readU8(pos1);
HXDLIN( 365)		int ch21 = data->readU8((pos1 + 1));
HXLINE( 341)		int numTables = (ch21 | (ch11 << 8));
HXLINE( 366)		info->index_map = 0;
HXLINE( 368)		{
HXLINE( 368)			int _g = 0;
HXDLIN( 368)			int _g1 = numTables;
HXDLIN( 368)			while((_g < _g1)){
HXLINE( 368)				_g = (_g + 1);
HXDLIN( 368)				int i = (_g - 1);
HXLINE( 369)				int encoding_record = ((cmap + 4) + (8 * i));
HXLINE( 371)				{
HXLINE( 371)					int ch12 = data->readU8(encoding_record);
HXDLIN( 371)					int ch22 = data->readU8((encoding_record + 1));
HXDLIN( 371)					switch((int)((ch22 | (ch12 << 8)))){
            						case (int)0: {
HXLINE( 381)							int pos2 = (encoding_record + 4);
HXDLIN( 381)							int ch13 = data->readU8(pos2);
HXDLIN( 381)							int ch23 = data->readU8((pos2 + 1));
HXDLIN( 381)							int ch3 = data->readU8((pos2 + 2));
HXDLIN( 381)							int ch4 = data->readU8((pos2 + 3));
HXDLIN( 381)							info->index_map = (cmap + (((ch4 | (ch3 << 8)) | (ch23 << 16)) | (ch13 << 24)));
            						}
            						break;
            						case (int)3: {
HXLINE( 373)							int pos3 = (encoding_record + 2);
HXDLIN( 373)							int ch14 = data->readU8(pos3);
HXDLIN( 373)							int ch24 = data->readU8((pos3 + 1));
HXDLIN( 373)							switch((int)((ch24 | (ch14 << 8)))){
            								case (int)1: case (int)10: {
HXLINE( 376)									int pos4 = (encoding_record + 4);
HXDLIN( 376)									int ch15 = data->readU8(pos4);
HXDLIN( 376)									int ch25 = data->readU8((pos4 + 1));
HXDLIN( 376)									int ch31 = data->readU8((pos4 + 2));
HXDLIN( 376)									int ch41 = data->readU8((pos4 + 3));
HXDLIN( 376)									info->index_map = (cmap + (((ch41 | (ch31 << 8)) | (ch25 << 16)) | (ch15 << 24)));
            								}
            								break;
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 384)		if ((info->index_map == 0)) {
HXLINE( 385)			return false;
            		}
HXLINE( 387)		int pos5 = (info->head + 50);
HXDLIN( 387)		int ch16 = data->readU8(pos5);
HXDLIN( 387)		int ch26 = data->readU8((pos5 + 1));
HXDLIN( 387)		info->indexToLocFormat = (ch26 | (ch16 << 8));
HXLINE( 388)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_InitFont,return )

int StbTruetype_obj::stbtt_FindGlyphIndex( ::kha::graphics2::truetype::Stbtt_fontinfo info,int unicode_codepoint){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_391_stbtt_FindGlyphIndex)
HXLINE( 392)		 ::kha::internal::BytesBlob data = info->data;
HXLINE( 393)		int index_map = info->index_map;
HXLINE( 395)		int ch1 = data->readU8(index_map);
HXDLIN( 395)		int ch2 = data->readU8((index_map + 1));
HXDLIN( 395)		int format = (ch2 | (ch1 << 8));
HXLINE( 396)		if ((format == 0)) {
HXLINE( 397)			int pos = (index_map + 2);
HXDLIN( 397)			int ch11 = data->readU8(pos);
HXDLIN( 397)			int ch21 = data->readU8((pos + 1));
HXDLIN( 397)			int bytes = (ch21 | (ch11 << 8));
HXLINE( 398)			if ((unicode_codepoint < (bytes - 6))) {
HXLINE( 399)				return data->readU8(((index_map + 6) + unicode_codepoint));
            			}
HXLINE( 400)			return 0;
            		}
            		else {
HXLINE( 401)			if ((format == 6)) {
HXLINE( 402)				int pos1 = (index_map + 6);
HXDLIN( 402)				int ch12 = data->readU8(pos1);
HXDLIN( 402)				int ch22 = data->readU8((pos1 + 1));
HXDLIN( 402)				int first = (ch22 | (ch12 << 8));
HXLINE( 403)				int pos2 = (index_map + 8);
HXDLIN( 403)				int ch13 = data->readU8(pos2);
HXDLIN( 403)				int ch23 = data->readU8((pos2 + 1));
HXDLIN( 403)				int count = (ch23 | (ch13 << 8));
HXLINE( 404)				bool _hx_tmp;
HXDLIN( 404)				if ((unicode_codepoint >= first)) {
HXLINE( 404)					_hx_tmp = (unicode_codepoint < (first + count));
            				}
            				else {
HXLINE( 404)					_hx_tmp = false;
            				}
HXDLIN( 404)				if (_hx_tmp) {
HXLINE( 405)					int pos3 = ((index_map + 10) + ((unicode_codepoint - first) * 2));
HXDLIN( 405)					int ch14 = data->readU8(pos3);
HXDLIN( 405)					int ch24 = data->readU8((pos3 + 1));
HXDLIN( 405)					return (ch24 | (ch14 << 8));
            				}
HXLINE( 406)				return 0;
            			}
            			else {
HXLINE( 407)				if ((format == 2)) {
HXLINE( 408)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
            				else {
HXLINE( 410)					if ((format == 4)) {
HXLINE( 411)						int pos4 = (index_map + 6);
HXDLIN( 411)						int ch15 = data->readU8(pos4);
HXDLIN( 411)						int ch25 = data->readU8((pos4 + 1));
HXDLIN( 411)						int segcount = ((ch25 | (ch15 << 8)) >> 1);
HXLINE( 412)						int pos5 = (index_map + 8);
HXDLIN( 412)						int ch16 = data->readU8(pos5);
HXDLIN( 412)						int ch26 = data->readU8((pos5 + 1));
HXDLIN( 412)						int searchRange = ((ch26 | (ch16 << 8)) >> 1);
HXLINE( 413)						int pos6 = (index_map + 10);
HXDLIN( 413)						int ch17 = data->readU8(pos6);
HXDLIN( 413)						int ch27 = data->readU8((pos6 + 1));
HXDLIN( 413)						int entrySelector = (ch27 | (ch17 << 8));
HXLINE( 414)						int pos7 = (index_map + 12);
HXDLIN( 414)						int ch18 = data->readU8(pos7);
HXDLIN( 414)						int ch28 = data->readU8((pos7 + 1));
HXDLIN( 414)						int rangeShift = ((ch28 | (ch18 << 8)) >> 1);
HXLINE( 417)						int endCount = (index_map + 14);
HXLINE( 418)						int search = endCount;
HXLINE( 420)						if ((unicode_codepoint > 65535)) {
HXLINE( 421)							return 0;
            						}
HXLINE( 425)						int pos8 = (search + (rangeShift * 2));
HXDLIN( 425)						int ch19 = data->readU8(pos8);
HXDLIN( 425)						int ch29 = data->readU8((pos8 + 1));
HXDLIN( 425)						if ((unicode_codepoint >= (ch29 | (ch19 << 8)))) {
HXLINE( 426)							search = (search + (rangeShift * 2));
            						}
HXLINE( 429)						search = (search - 2);
HXLINE( 430)						while((entrySelector != 0)){
HXLINE( 432)							searchRange = (searchRange >> 1);
HXLINE( 433)							int pos9 = (search + (searchRange * 2));
HXDLIN( 433)							int ch110 = data->readU8(pos9);
HXDLIN( 433)							int ch210 = data->readU8((pos9 + 1));
HXLINE( 431)							int end = (ch210 | (ch110 << 8));
HXLINE( 434)							if ((unicode_codepoint > end)) {
HXLINE( 435)								search = (search + (searchRange * 2));
            							}
HXLINE( 436)							entrySelector = (entrySelector - 1);
            						}
HXLINE( 438)						search = (search + 2);
HXLINE( 442)						int item = ((search - endCount) >> 1);
HXLINE( 444)						{
HXLINE( 444)							int pos10 = (endCount + (2 * item));
HXDLIN( 444)							int ch111 = data->readU8(pos10);
HXDLIN( 444)							int ch211 = data->readU8((pos10 + 1));
HXDLIN( 444)							if ((unicode_codepoint > (ch211 | (ch111 << 8)))) {
HXLINE( 444)								HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            							}
            						}
HXLINE( 445)						int pos11 = ((((index_map + 14) + (segcount * 2)) + 2) + (2 * item));
HXDLIN( 445)						int ch112 = data->readU8(pos11);
HXDLIN( 445)						int ch212 = data->readU8((pos11 + 1));
HXLINE( 441)						int start = (ch212 | (ch112 << 8));
HXLINE( 446)						if ((unicode_codepoint < start)) {
HXLINE( 447)							return 0;
            						}
HXLINE( 449)						int pos12 = ((((index_map + 14) + (segcount * 6)) + 2) + (2 * item));
HXDLIN( 449)						int ch113 = data->readU8(pos12);
HXDLIN( 449)						int ch213 = data->readU8((pos12 + 1));
HXLINE( 441)						int offset = (ch213 | (ch113 << 8));
HXLINE( 450)						if ((offset == 0)) {
HXLINE( 451)							int pos13 = ((((index_map + 14) + (segcount * 4)) + 2) + (2 * item));
HXDLIN( 451)							int ch114 = data->readU8(pos13);
HXDLIN( 451)							int ch214 = data->readU8((pos13 + 1));
HXDLIN( 451)							int n = (ch214 | (ch114 << 8));
HXDLIN( 451)							int _hx_tmp1;
HXDLIN( 451)							if (((n & 32768) != 0)) {
HXLINE( 451)								_hx_tmp1 = (n - 65536);
            							}
            							else {
HXLINE( 451)								_hx_tmp1 = n;
            							}
HXDLIN( 451)							return (unicode_codepoint + _hx_tmp1);
            						}
HXLINE( 453)						int pos14 = ((((((offset + ((unicode_codepoint - start) * 2)) + index_map) + 14) + (segcount * 6)) + 2) + (2 * item));
HXDLIN( 453)						int ch115 = data->readU8(pos14);
HXDLIN( 453)						int ch215 = data->readU8((pos14 + 1));
HXDLIN( 453)						return (ch215 | (ch115 << 8));
            					}
            					else {
HXLINE( 455)						bool _hx_tmp2;
HXDLIN( 455)						if ((format != 12)) {
HXLINE( 455)							_hx_tmp2 = (format == 13);
            						}
            						else {
HXLINE( 455)							_hx_tmp2 = true;
            						}
HXDLIN( 455)						if (_hx_tmp2) {
HXLINE( 456)							int pos15 = (index_map + 12);
HXDLIN( 456)							int ch116 = data->readU8(pos15);
HXDLIN( 456)							int ch216 = data->readU8((pos15 + 1));
HXDLIN( 456)							int ch3 = data->readU8((pos15 + 2));
HXDLIN( 456)							int ch4 = data->readU8((pos15 + 3));
HXDLIN( 456)							int ngroups = (((ch4 | (ch3 << 8)) | (ch216 << 16)) | (ch116 << 24));
HXLINE( 457)							int low = 0;
HXDLIN( 457)							int high = ngroups;
HXLINE( 460)							while((low < high)){
HXLINE( 461)								int mid = (low + ((high - low) >> 1));
HXLINE( 462)								int pos16 = ((index_map + 16) + (mid * 12));
HXDLIN( 462)								int ch117 = data->readU8(pos16);
HXDLIN( 462)								int ch217 = data->readU8((pos16 + 1));
HXDLIN( 462)								int ch31 = data->readU8((pos16 + 2));
HXDLIN( 462)								int ch41 = data->readU8((pos16 + 3));
HXDLIN( 462)								int start_char = (((ch41 | (ch31 << 8)) | (ch217 << 16)) | (ch117 << 24));
HXLINE( 463)								int pos17 = (((index_map + 16) + (mid * 12)) + 4);
HXDLIN( 463)								int ch118 = data->readU8(pos17);
HXDLIN( 463)								int ch218 = data->readU8((pos17 + 1));
HXDLIN( 463)								int ch32 = data->readU8((pos17 + 2));
HXDLIN( 463)								int ch42 = data->readU8((pos17 + 3));
HXDLIN( 463)								int end_char = (((ch42 | (ch32 << 8)) | (ch218 << 16)) | (ch118 << 24));
HXLINE( 464)								if ((unicode_codepoint < start_char)) {
HXLINE( 465)									high = mid;
            								}
            								else {
HXLINE( 466)									if ((unicode_codepoint > end_char)) {
HXLINE( 467)										low = (mid + 1);
            									}
            									else {
HXLINE( 469)										int pos18 = (((index_map + 16) + (mid * 12)) + 8);
HXDLIN( 469)										int ch119 = data->readU8(pos18);
HXDLIN( 469)										int ch219 = data->readU8((pos18 + 1));
HXDLIN( 469)										int ch33 = data->readU8((pos18 + 2));
HXDLIN( 469)										int ch43 = data->readU8((pos18 + 3));
HXDLIN( 469)										int start_glyph = (((ch43 | (ch33 << 8)) | (ch219 << 16)) | (ch119 << 24));
HXLINE( 470)										if ((format == 12)) {
HXLINE( 471)											return ((start_glyph + unicode_codepoint) - start_char);
            										}
            										else {
HXLINE( 473)											return start_glyph;
            										}
            									}
            								}
            							}
HXLINE( 476)							return 0;
            						}
            					}
            				}
            			}
            		}
HXLINE( 479)		HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
HXDLIN( 479)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_FindGlyphIndex,return )

::Array< ::Dynamic> StbTruetype_obj::stbtt_GetCodepointShape( ::kha::graphics2::truetype::Stbtt_fontinfo info,int unicode_codepoint){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_484_stbtt_GetCodepointShape)
HXDLIN( 484)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphShape(info,::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,unicode_codepoint));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetCodepointShape,return )

void StbTruetype_obj::stbtt_setvertex( ::kha::graphics2::truetype::Stbtt_vertex v,int type,int x,int y,int cx,int cy){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_487_stbtt_setvertex)
HXLINE( 488)		v->type = type;
HXLINE( 489)		v->x = x;
HXLINE( 490)		v->y = y;
HXLINE( 491)		v->cx = cx;
HXLINE( 492)		v->cy = cy;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt_setvertex,(void))

int StbTruetype_obj::stbtt__GetGlyfOffset( ::kha::graphics2::truetype::Stbtt_fontinfo info,int glyph_index){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_495_stbtt__GetGlyfOffset)
HXLINE( 496)		int g1;
HXDLIN( 496)		int g2;
HXLINE( 498)		if ((glyph_index >= info->numGlyphs)) {
HXLINE( 498)			return -1;
            		}
HXLINE( 499)		if ((info->indexToLocFormat >= 2)) {
HXLINE( 499)			return -1;
            		}
HXLINE( 501)		if ((info->indexToLocFormat == 0)) {
HXLINE( 502)			int info1 = info->glyf;
HXDLIN( 502)			 ::kha::internal::BytesBlob p = info->data;
HXDLIN( 502)			int pos = (info->loca + (glyph_index * 2));
HXDLIN( 502)			int ch1 = p->readU8(pos);
HXDLIN( 502)			int ch2 = p->readU8((pos + 1));
HXDLIN( 502)			g1 = (info1 + ((ch2 | (ch1 << 8)) * 2));
HXLINE( 503)			int info2 = info->glyf;
HXDLIN( 503)			 ::kha::internal::BytesBlob p1 = info->data;
HXDLIN( 503)			int pos1 = ((info->loca + (glyph_index * 2)) + 2);
HXDLIN( 503)			int ch11 = p1->readU8(pos1);
HXDLIN( 503)			int ch21 = p1->readU8((pos1 + 1));
HXDLIN( 503)			g2 = (info2 + ((ch21 | (ch11 << 8)) * 2));
            		}
            		else {
HXLINE( 505)			int info3 = info->glyf;
HXDLIN( 505)			 ::kha::internal::BytesBlob p2 = info->data;
HXDLIN( 505)			int pos2 = (info->loca + (glyph_index * 4));
HXDLIN( 505)			int ch12 = p2->readU8(pos2);
HXDLIN( 505)			int ch22 = p2->readU8((pos2 + 1));
HXDLIN( 505)			int ch3 = p2->readU8((pos2 + 2));
HXDLIN( 505)			int ch4 = p2->readU8((pos2 + 3));
HXDLIN( 505)			g1 = (info3 + (((ch4 | (ch3 << 8)) | (ch22 << 16)) | (ch12 << 24)));
HXLINE( 506)			int info4 = info->glyf;
HXDLIN( 506)			 ::kha::internal::BytesBlob p3 = info->data;
HXDLIN( 506)			int pos3 = ((info->loca + (glyph_index * 4)) + 4);
HXDLIN( 506)			int ch13 = p3->readU8(pos3);
HXDLIN( 506)			int ch23 = p3->readU8((pos3 + 1));
HXDLIN( 506)			int ch31 = p3->readU8((pos3 + 2));
HXDLIN( 506)			int ch41 = p3->readU8((pos3 + 3));
HXDLIN( 506)			g2 = (info4 + (((ch41 | (ch31 << 8)) | (ch23 << 16)) | (ch13 << 24)));
            		}
HXLINE( 509)		if ((g1 == g2)) {
HXLINE( 509)			return -1;
            		}
            		else {
HXLINE( 509)			return g1;
            		}
HXDLIN( 509)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt__GetGlyfOffset,return )

bool StbTruetype_obj::stbtt_GetGlyphBox( ::kha::graphics2::truetype::Stbtt_fontinfo info,int glyph_index, ::kha::graphics2::truetype::Stbtt_temp_rect rect){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_512_stbtt_GetGlyphBox)
HXLINE( 513)		int g = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__GetGlyfOffset(info,glyph_index);
HXLINE( 514)		if ((g < 0)) {
HXLINE( 514)			return false;
            		}
HXLINE( 516)		 ::kha::internal::BytesBlob p = info->data;
HXDLIN( 516)		int pos = (g + 2);
HXDLIN( 516)		int ch1 = p->readU8(pos);
HXDLIN( 516)		int ch2 = p->readU8((pos + 1));
HXDLIN( 516)		int n = (ch2 | (ch1 << 8));
HXDLIN( 516)		int _hx_tmp;
HXDLIN( 516)		if (((n & 32768) != 0)) {
HXLINE( 516)			_hx_tmp = (n - 65536);
            		}
            		else {
HXLINE( 516)			_hx_tmp = n;
            		}
HXDLIN( 516)		rect->x0 = _hx_tmp;
HXLINE( 517)		 ::kha::internal::BytesBlob p1 = info->data;
HXDLIN( 517)		int pos1 = (g + 4);
HXDLIN( 517)		int ch11 = p1->readU8(pos1);
HXDLIN( 517)		int ch21 = p1->readU8((pos1 + 1));
HXDLIN( 517)		int n1 = (ch21 | (ch11 << 8));
HXDLIN( 517)		int _hx_tmp1;
HXDLIN( 517)		if (((n1 & 32768) != 0)) {
HXLINE( 517)			_hx_tmp1 = (n1 - 65536);
            		}
            		else {
HXLINE( 517)			_hx_tmp1 = n1;
            		}
HXDLIN( 517)		rect->y0 = _hx_tmp1;
HXLINE( 518)		 ::kha::internal::BytesBlob p2 = info->data;
HXDLIN( 518)		int pos2 = (g + 6);
HXDLIN( 518)		int ch12 = p2->readU8(pos2);
HXDLIN( 518)		int ch22 = p2->readU8((pos2 + 1));
HXDLIN( 518)		int n2 = (ch22 | (ch12 << 8));
HXDLIN( 518)		int _hx_tmp2;
HXDLIN( 518)		if (((n2 & 32768) != 0)) {
HXLINE( 518)			_hx_tmp2 = (n2 - 65536);
            		}
            		else {
HXLINE( 518)			_hx_tmp2 = n2;
            		}
HXDLIN( 518)		rect->x1 = _hx_tmp2;
HXLINE( 519)		 ::kha::internal::BytesBlob p3 = info->data;
HXDLIN( 519)		int pos3 = (g + 8);
HXDLIN( 519)		int ch13 = p3->readU8(pos3);
HXDLIN( 519)		int ch23 = p3->readU8((pos3 + 1));
HXDLIN( 519)		int n3 = (ch23 | (ch13 << 8));
HXDLIN( 519)		int _hx_tmp3;
HXDLIN( 519)		if (((n3 & 32768) != 0)) {
HXLINE( 519)			_hx_tmp3 = (n3 - 65536);
            		}
            		else {
HXLINE( 519)			_hx_tmp3 = n3;
            		}
HXDLIN( 519)		rect->y1 = _hx_tmp3;
HXLINE( 520)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_GetGlyphBox,return )

bool StbTruetype_obj::stbtt_GetCodepointBox( ::kha::graphics2::truetype::Stbtt_fontinfo info,int codepoint, ::kha::graphics2::truetype::Stbtt_temp_rect rect){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_524_stbtt_GetCodepointBox)
HXDLIN( 524)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBox(info,::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,codepoint),rect);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_GetCodepointBox,return )

bool StbTruetype_obj::stbtt_IsGlyphEmpty( ::kha::graphics2::truetype::Stbtt_fontinfo info,int glyph_index){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_527_stbtt_IsGlyphEmpty)
HXLINE( 528)		int numberOfContours;
HXLINE( 529)		int g = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__GetGlyfOffset(info,glyph_index);
HXLINE( 530)		if ((g < 0)) {
HXLINE( 530)			return true;
            		}
HXLINE( 531)		 ::kha::internal::BytesBlob p = info->data;
HXDLIN( 531)		int ch1 = p->readU8(g);
HXDLIN( 531)		int ch2 = p->readU8((g + 1));
HXDLIN( 531)		int n = (ch2 | (ch1 << 8));
HXDLIN( 531)		if (((n & 32768) != 0)) {
HXLINE( 531)			numberOfContours = (n - 65536);
            		}
            		else {
HXLINE( 531)			numberOfContours = n;
            		}
HXLINE( 532)		return (numberOfContours == 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_IsGlyphEmpty,return )

int StbTruetype_obj::stbtt__close_shape(::Array< ::Dynamic> vertices,int num_vertices,bool was_off,bool start_off,int sx,int sy,int scx,int scy,int cx,int cy){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_536_stbtt__close_shape)
HXLINE( 537)		if (start_off) {
HXLINE( 538)			if (was_off) {
HXLINE( 539)				num_vertices = (num_vertices + 1);
HXDLIN( 539)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(num_vertices - 1))) ),3,((cx + scx) >> 1),((cy + scy) >> 1),cx,cy);
            			}
HXLINE( 540)			num_vertices = (num_vertices + 1);
HXDLIN( 540)			::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(num_vertices - 1))) ),3,sx,sy,scx,scy);
            		}
            		else {
HXLINE( 542)			if (was_off) {
HXLINE( 543)				num_vertices = (num_vertices + 1);
HXDLIN( 543)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(num_vertices - 1))) ),3,sx,sy,cx,cy);
            			}
            			else {
HXLINE( 545)				num_vertices = (num_vertices + 1);
HXDLIN( 545)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(num_vertices - 1))) ),2,sx,sy,0,0);
            			}
            		}
HXLINE( 547)		return num_vertices;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(StbTruetype_obj,stbtt__close_shape,return )

void StbTruetype_obj::copyVertices(::Array< ::Dynamic> from,::Array< ::Dynamic> to,int offset,int count){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_551_copyVertices)
HXDLIN( 551)		int _g = 0;
HXDLIN( 551)		int _g1 = count;
HXDLIN( 551)		while((_g < _g1)){
HXDLIN( 551)			_g = (_g + 1);
HXDLIN( 551)			int i = (_g - 1);
HXLINE( 552)			{
HXLINE( 552)				 ::kha::graphics2::truetype::Stbtt_vertex val = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(from,i)) );
HXDLIN( 552)				to->__unsafe_set((offset + i),val);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,copyVertices,(void))

::Array< ::Dynamic> StbTruetype_obj::stbtt_GetGlyphShape( ::kha::graphics2::truetype::Stbtt_fontinfo info,int glyph_index){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_556_stbtt_GetGlyphShape)
HXLINE( 557)		int numberOfContours;
HXLINE( 558)		 ::kha::internal::BytesBlob data = info->data;
HXLINE( 559)		::Array< ::Dynamic> vertices = null();
HXLINE( 560)		int num_vertices = 0;
HXLINE( 561)		int g = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__GetGlyfOffset(info,glyph_index);
HXLINE( 563)		if ((g < 0)) {
HXLINE( 563)			return null();
            		}
HXLINE( 565)		int ch1 = data->readU8(g);
HXDLIN( 565)		int ch2 = data->readU8((g + 1));
HXDLIN( 565)		int n = (ch2 | (ch1 << 8));
HXDLIN( 565)		if (((n & 32768) != 0)) {
HXLINE( 565)			numberOfContours = (n - 65536);
            		}
            		else {
HXLINE( 565)			numberOfContours = n;
            		}
HXLINE( 567)		if ((numberOfContours > 0)) {
HXLINE( 568)			int flags = 0;
HXLINE( 569)			int j = 0;
HXDLIN( 569)			int next_move = 0;
HXDLIN( 569)			int off = 0;
HXLINE( 570)			bool was_off = false;
HXLINE( 571)			bool start_off = false;
HXLINE( 573)			int endPtsOfContoursOffset = (g + 10);
HXLINE( 574)			int pos = (endPtsOfContoursOffset + (numberOfContours * 2));
HXDLIN( 574)			int ch11 = data->readU8(pos);
HXDLIN( 574)			int ch21 = data->readU8((pos + 1));
HXLINE( 569)			int ins = (ch21 | (ch11 << 8));
HXLINE( 575)			int pointsIndex = (((endPtsOfContoursOffset + (numberOfContours * 2)) + 2) + ins);
HXLINE( 577)			int pos1 = ((endPtsOfContoursOffset + (numberOfContours * 2)) - 2);
HXDLIN( 577)			int ch12 = data->readU8(pos1);
HXDLIN( 577)			int ch22 = data->readU8((pos1 + 1));
HXLINE( 569)			int n1 = (1 + (ch22 | (ch12 << 8)));
HXDLIN( 569)			int m = (n1 + (2 * numberOfContours));
HXLINE( 580)			::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(m);
HXDLIN( 580)			vertices = this1;
HXLINE( 581)			if (hx::IsNull( vertices )) {
HXLINE( 582)				return null();
            			}
            			else {
HXLINE( 584)				int _g = 0;
HXDLIN( 584)				int _g1 = vertices->length;
HXDLIN( 584)				while((_g < _g1)){
HXLINE( 584)					_g = (_g + 1);
HXDLIN( 584)					int i = (_g - 1);
HXLINE( 585)					{
HXLINE( 585)						 ::kha::graphics2::truetype::Stbtt_vertex val =  ::kha::graphics2::truetype::Stbtt_vertex_obj::__alloc( HX_CTX );
HXDLIN( 585)						vertices->__unsafe_set(i,val);
            					}
            				}
            			}
HXLINE( 589)			next_move = 0;
HXLINE( 568)			int flagcount = 0;
HXLINE( 596)			off = (m - n1);
HXLINE( 600)			{
HXLINE( 600)				int _g2 = 0;
HXDLIN( 600)				int _g11 = n1;
HXDLIN( 600)				while((_g2 < _g11)){
HXLINE( 600)					_g2 = (_g2 + 1);
HXDLIN( 600)					int i1 = (_g2 - 1);
HXLINE( 601)					if ((flagcount == 0)) {
HXLINE( 602)						pointsIndex = (pointsIndex + 1);
HXDLIN( 602)						flags = data->readU8((pointsIndex - 1));
HXLINE( 603)						if (((flags & 8) != 0)) {
HXLINE( 604)							pointsIndex = (pointsIndex + 1);
HXDLIN( 604)							flagcount = data->readU8((pointsIndex - 1));
            						}
            					}
            					else {
HXLINE( 606)						flagcount = (flagcount - 1);
            					}
HXLINE( 607)					( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i1))) )->type = flags;
            				}
            			}
HXLINE( 572)			int x = 0;
HXLINE( 612)			{
HXLINE( 612)				int _g21 = 0;
HXDLIN( 612)				int _g3 = n1;
HXDLIN( 612)				while((_g21 < _g3)){
HXLINE( 612)					_g21 = (_g21 + 1);
HXDLIN( 612)					int i2 = (_g21 - 1);
HXLINE( 613)					flags = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i2))) )->type;
HXLINE( 614)					if (((flags & 2) != 0)) {
HXLINE( 615)						pointsIndex = (pointsIndex + 1);
HXDLIN( 615)						int dx = data->readU8((pointsIndex - 1));
HXLINE( 616)						int x1;
HXDLIN( 616)						if (((flags & 16) != 0)) {
HXLINE( 616)							x1 = dx;
            						}
            						else {
HXLINE( 616)							x1 = -(dx);
            						}
HXDLIN( 616)						x = (x + x1);
            					}
            					else {
HXLINE( 618)						if (((flags & 16) == 0)) {
HXLINE( 619)							int value;
HXLINE( 620)							int ch13 = data->readU8(pointsIndex);
HXLINE( 621)							int ch23 = data->readU8((pointsIndex + 1));
HXLINE( 622)							int n2 = (ch23 | (ch13 << 8));
HXLINE( 623)							if (((n2 & 32768) != 0)) {
HXLINE( 624)								value = (n2 - 65536);
            							}
            							else {
HXLINE( 626)								value = n2;
            							}
HXLINE( 627)							x = (x + value);
HXLINE( 628)							pointsIndex = (pointsIndex + 2);
            						}
            					}
HXLINE( 631)					( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i2))) )->x = x;
            				}
            			}
HXLINE( 572)			int y = 0;
HXLINE( 636)			{
HXLINE( 636)				int _g4 = 0;
HXDLIN( 636)				int _g5 = n1;
HXDLIN( 636)				while((_g4 < _g5)){
HXLINE( 636)					_g4 = (_g4 + 1);
HXDLIN( 636)					int i3 = (_g4 - 1);
HXLINE( 637)					flags = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i3))) )->type;
HXLINE( 638)					if (((flags & 4) != 0)) {
HXLINE( 639)						pointsIndex = (pointsIndex + 1);
HXDLIN( 639)						int dy = data->readU8((pointsIndex - 1));
HXLINE( 640)						int y1;
HXDLIN( 640)						if (((flags & 32) != 0)) {
HXLINE( 640)							y1 = dy;
            						}
            						else {
HXLINE( 640)							y1 = -(dy);
            						}
HXDLIN( 640)						y = (y + y1);
            					}
            					else {
HXLINE( 642)						if (((flags & 32) == 0)) {
HXLINE( 643)							int value1;
HXLINE( 644)							int ch14 = data->readU8(pointsIndex);
HXLINE( 645)							int ch24 = data->readU8((pointsIndex + 1));
HXLINE( 646)							int n3 = (ch24 | (ch14 << 8));
HXLINE( 647)							if (((n3 & 32768) != 0)) {
HXLINE( 648)								value1 = (n3 - 65536);
            							}
            							else {
HXLINE( 650)								value1 = n3;
            							}
HXLINE( 651)							y = (y + value1);
HXLINE( 652)							pointsIndex = (pointsIndex + 2);
            						}
            					}
HXLINE( 655)					( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i3))) )->y = y;
            				}
            			}
HXLINE( 659)			num_vertices = 0;
HXLINE( 572)			int scy = 0;
HXDLIN( 572)			int scx = scy;
HXDLIN( 572)			int cy = scx;
HXDLIN( 572)			int cx = cy;
HXDLIN( 572)			int sy = cx;
HXDLIN( 572)			int sx = sy;
HXLINE( 661)			int i4 = 0;
HXLINE( 662)			while((i4 < n1)){
HXLINE( 663)				flags = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i4))) )->type;
HXLINE( 664)				x = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i4))) )->x;
HXLINE( 665)				y = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(off + i4))) )->y;
HXLINE( 667)				if ((next_move == i4)) {
HXLINE( 668)					if ((i4 != 0)) {
HXLINE( 669)						num_vertices = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
            					}
HXLINE( 672)					start_off = ((flags & 1) == 0);
HXLINE( 673)					if (start_off) {
HXLINE( 676)						scx = x;
HXLINE( 677)						scy = y;
HXLINE( 678)						if (((( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + 1))) )->type & 1) == 0)) {
HXLINE( 680)							sx = ((x + ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + 1))) )->x) >> 1);
HXLINE( 681)							sy = ((y + ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + 1))) )->y) >> 1);
            						}
            						else {
HXLINE( 684)							sx = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + 1))) )->x;
HXLINE( 685)							sy = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,((off + i4) + 1))) )->y;
HXLINE( 686)							i4 = (i4 + 1);
            						}
            					}
            					else {
HXLINE( 689)						sx = x;
HXLINE( 690)						sy = y;
            					}
HXLINE( 692)					num_vertices = (num_vertices + 1);
HXDLIN( 692)					::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(num_vertices - 1))) ),1,sx,sy,0,0);
HXLINE( 693)					was_off = false;
HXLINE( 694)					int pos2 = (endPtsOfContoursOffset + (j * 2));
HXDLIN( 694)					int ch15 = data->readU8(pos2);
HXDLIN( 694)					int ch25 = data->readU8((pos2 + 1));
HXDLIN( 694)					next_move = (1 + (ch25 | (ch15 << 8)));
HXLINE( 695)					j = (j + 1);
            				}
            				else {
HXLINE( 697)					if (((flags & 1) == 0)) {
HXLINE( 698)						if (was_off) {
HXLINE( 699)							num_vertices = (num_vertices + 1);
HXDLIN( 699)							::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(num_vertices - 1))) ),3,((cx + x) >> 1),((cy + y) >> 1),cx,cy);
            						}
HXLINE( 700)						cx = x;
HXLINE( 701)						cy = y;
HXLINE( 702)						was_off = true;
            					}
            					else {
HXLINE( 704)						if (was_off) {
HXLINE( 705)							num_vertices = (num_vertices + 1);
HXDLIN( 705)							::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(num_vertices - 1))) ),3,x,y,cx,cy);
            						}
            						else {
HXLINE( 707)							num_vertices = (num_vertices + 1);
HXDLIN( 707)							::kha::graphics2::truetype::StbTruetype_obj::stbtt_setvertex(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,(num_vertices - 1))) ),2,x,y,0,0);
            						}
HXLINE( 708)						was_off = false;
            					}
            				}
HXLINE( 711)				i4 = (i4 + 1);
            			}
HXLINE( 713)			num_vertices = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
            		}
            		else {
HXLINE( 714)			if ((numberOfContours == -1)) {
HXLINE( 716)				int more = 1;
HXLINE( 717)				int compIndex = (g + 10);
HXLINE( 718)				num_vertices = 0;
HXLINE( 719)				vertices = null();
HXLINE( 720)				while((more != 0)){
HXLINE( 721)					int flags1;
HXDLIN( 721)					int gidx;
HXLINE( 722)					int comp_num_verts = 0;
HXDLIN( 722)					int i5;
HXLINE( 723)					::Array< ::Dynamic> comp_verts = null();
HXLINE( 724)					::Array< ::Dynamic> tmp = null();
HXLINE( 725)					Float mtx0 = ( (Float)(1) );
HXLINE( 726)					Float mtx1 = ( (Float)(0) );
HXLINE( 727)					Float mtx2 = ( (Float)(0) );
HXLINE( 728)					Float mtx3 = ( (Float)(1) );
HXLINE( 729)					Float mtx4 = ( (Float)(0) );
HXLINE( 730)					Float mtx5 = ( (Float)(0) );
HXLINE( 733)					int ch16 = data->readU8(compIndex);
HXDLIN( 733)					int ch26 = data->readU8((compIndex + 1));
HXDLIN( 733)					int n4 = (ch26 | (ch16 << 8));
HXDLIN( 733)					if (((n4 & 32768) != 0)) {
HXLINE( 733)						flags1 = (n4 - 65536);
            					}
            					else {
HXLINE( 733)						flags1 = n4;
            					}
HXDLIN( 733)					compIndex = (compIndex + 2);
HXLINE( 734)					int ch17 = data->readU8(compIndex);
HXDLIN( 734)					int ch27 = data->readU8((compIndex + 1));
HXDLIN( 734)					int n5 = (ch27 | (ch17 << 8));
HXDLIN( 734)					if (((n5 & 32768) != 0)) {
HXLINE( 734)						gidx = (n5 - 65536);
            					}
            					else {
HXLINE( 734)						gidx = n5;
            					}
HXDLIN( 734)					compIndex = (compIndex + 2);
HXLINE( 736)					if (((flags1 & 2) != 0)) {
HXLINE( 737)						if (((flags1 & 1) != 0)) {
HXLINE( 738)							int ch18 = data->readU8(compIndex);
HXDLIN( 738)							int ch28 = data->readU8((compIndex + 1));
HXDLIN( 738)							int n6 = (ch28 | (ch18 << 8));
HXDLIN( 738)							if (((n6 & 32768) != 0)) {
HXLINE( 738)								mtx4 = ( (Float)((n6 - 65536)) );
            							}
            							else {
HXLINE( 738)								mtx4 = ( (Float)(n6) );
            							}
HXDLIN( 738)							compIndex = (compIndex + 2);
HXLINE( 739)							int ch19 = data->readU8(compIndex);
HXDLIN( 739)							int ch29 = data->readU8((compIndex + 1));
HXDLIN( 739)							int n7 = (ch29 | (ch19 << 8));
HXDLIN( 739)							if (((n7 & 32768) != 0)) {
HXLINE( 739)								mtx5 = ( (Float)((n7 - 65536)) );
            							}
            							else {
HXLINE( 739)								mtx5 = ( (Float)(n7) );
            							}
HXDLIN( 739)							compIndex = (compIndex + 2);
            						}
            						else {
HXLINE( 741)							int n8 = data->readU8(compIndex);
HXDLIN( 741)							if ((n8 >= 128)) {
HXLINE( 741)								mtx4 = ( (Float)((n8 - 256)) );
            							}
            							else {
HXLINE( 741)								mtx4 = ( (Float)(n8) );
            							}
HXDLIN( 741)							compIndex = (compIndex + 1);
HXLINE( 742)							int n9 = data->readU8(compIndex);
HXDLIN( 742)							if ((n9 >= 128)) {
HXLINE( 742)								mtx5 = ( (Float)((n9 - 256)) );
            							}
            							else {
HXLINE( 742)								mtx5 = ( (Float)(n9) );
            							}
HXDLIN( 742)							compIndex = (compIndex + 1);
            						}
            					}
            					else {
HXLINE( 747)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
HXLINE( 749)					if (((flags1 & 8) != 0)) {
HXLINE( 750)						int ch110 = data->readU8(compIndex);
HXDLIN( 750)						int ch210 = data->readU8((compIndex + 1));
HXDLIN( 750)						int n10 = (ch210 | (ch110 << 8));
HXDLIN( 750)						int mtx31;
HXDLIN( 750)						if (((n10 & 32768) != 0)) {
HXLINE( 750)							mtx31 = (n10 - 65536);
            						}
            						else {
HXLINE( 750)							mtx31 = n10;
            						}
HXDLIN( 750)						mtx3 = (( (Float)(mtx31) ) / ((Float)16384.0));
HXDLIN( 750)						mtx0 = mtx3;
HXDLIN( 750)						compIndex = (compIndex + 2);
HXLINE( 751)						mtx2 = ( (Float)(0) );
HXDLIN( 751)						mtx1 = mtx2;
            					}
            					else {
HXLINE( 752)						if (((flags1 & 64) != 0)) {
HXLINE( 753)							int ch111 = data->readU8(compIndex);
HXDLIN( 753)							int ch211 = data->readU8((compIndex + 1));
HXDLIN( 753)							int n11 = (ch211 | (ch111 << 8));
HXDLIN( 753)							int mtx01;
HXDLIN( 753)							if (((n11 & 32768) != 0)) {
HXLINE( 753)								mtx01 = (n11 - 65536);
            							}
            							else {
HXLINE( 753)								mtx01 = n11;
            							}
HXDLIN( 753)							mtx0 = (( (Float)(mtx01) ) / ((Float)16384.0));
HXDLIN( 753)							compIndex = (compIndex + 2);
HXLINE( 754)							mtx2 = ( (Float)(0) );
HXDLIN( 754)							mtx1 = mtx2;
HXLINE( 755)							int ch112 = data->readU8(compIndex);
HXDLIN( 755)							int ch212 = data->readU8((compIndex + 1));
HXDLIN( 755)							int n12 = (ch212 | (ch112 << 8));
HXDLIN( 755)							int mtx32;
HXDLIN( 755)							if (((n12 & 32768) != 0)) {
HXLINE( 755)								mtx32 = (n12 - 65536);
            							}
            							else {
HXLINE( 755)								mtx32 = n12;
            							}
HXDLIN( 755)							mtx3 = (( (Float)(mtx32) ) / ((Float)16384.0));
HXDLIN( 755)							compIndex = (compIndex + 2);
            						}
            						else {
HXLINE( 756)							if (((flags1 & 128) != 0)) {
HXLINE( 757)								int ch113 = data->readU8(compIndex);
HXDLIN( 757)								int ch213 = data->readU8((compIndex + 1));
HXDLIN( 757)								int n13 = (ch213 | (ch113 << 8));
HXDLIN( 757)								int mtx02;
HXDLIN( 757)								if (((n13 & 32768) != 0)) {
HXLINE( 757)									mtx02 = (n13 - 65536);
            								}
            								else {
HXLINE( 757)									mtx02 = n13;
            								}
HXDLIN( 757)								mtx0 = (( (Float)(mtx02) ) / ((Float)16384.0));
HXDLIN( 757)								compIndex = (compIndex + 2);
HXLINE( 758)								int ch114 = data->readU8(compIndex);
HXDLIN( 758)								int ch214 = data->readU8((compIndex + 1));
HXDLIN( 758)								int n14 = (ch214 | (ch114 << 8));
HXDLIN( 758)								int mtx11;
HXDLIN( 758)								if (((n14 & 32768) != 0)) {
HXLINE( 758)									mtx11 = (n14 - 65536);
            								}
            								else {
HXLINE( 758)									mtx11 = n14;
            								}
HXDLIN( 758)								mtx1 = (( (Float)(mtx11) ) / ((Float)16384.0));
HXDLIN( 758)								compIndex = (compIndex + 2);
HXLINE( 759)								int ch115 = data->readU8(compIndex);
HXDLIN( 759)								int ch215 = data->readU8((compIndex + 1));
HXDLIN( 759)								int n15 = (ch215 | (ch115 << 8));
HXDLIN( 759)								int mtx21;
HXDLIN( 759)								if (((n15 & 32768) != 0)) {
HXLINE( 759)									mtx21 = (n15 - 65536);
            								}
            								else {
HXLINE( 759)									mtx21 = n15;
            								}
HXDLIN( 759)								mtx2 = (( (Float)(mtx21) ) / ((Float)16384.0));
HXDLIN( 759)								compIndex = (compIndex + 2);
HXLINE( 760)								int ch116 = data->readU8(compIndex);
HXDLIN( 760)								int ch216 = data->readU8((compIndex + 1));
HXDLIN( 760)								int n16 = (ch216 | (ch116 << 8));
HXDLIN( 760)								int mtx33;
HXDLIN( 760)								if (((n16 & 32768) != 0)) {
HXLINE( 760)									mtx33 = (n16 - 65536);
            								}
            								else {
HXLINE( 760)									mtx33 = n16;
            								}
HXDLIN( 760)								mtx3 = (( (Float)(mtx33) ) / ((Float)16384.0));
HXDLIN( 760)								compIndex = (compIndex + 2);
            							}
            						}
            					}
HXLINE( 731)					Float m1 = ::Math_obj::sqrt(((mtx0 * mtx0) + (mtx1 * mtx1)));
HXDLIN( 731)					Float n17 = ::Math_obj::sqrt(((mtx2 * mtx2) + (mtx3 * mtx3)));
HXLINE( 768)					comp_verts = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphShape(info,gidx);
HXLINE( 769)					if (hx::IsNull( comp_verts )) {
HXLINE( 769)						comp_num_verts = 0;
            					}
            					else {
HXLINE( 769)						comp_num_verts = comp_verts->length;
            					}
HXLINE( 770)					if ((comp_num_verts > 0)) {
HXLINE( 772)						{
HXLINE( 772)							int _g6 = 0;
HXDLIN( 772)							int _g12 = comp_num_verts;
HXDLIN( 772)							while((_g6 < _g12)){
HXLINE( 772)								_g6 = (_g6 + 1);
HXDLIN( 772)								int i6 = (_g6 - 1);
HXLINE( 773)								 ::kha::graphics2::truetype::Stbtt_vertex v = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(comp_verts,i6)) );
HXLINE( 774)								int x2 = v->x;
HXDLIN( 774)								int y2 = v->y;
HXLINE( 776)								v->x = ::Std_obj::_hx_int((m1 * (((mtx0 * ( (Float)(x2) )) + (mtx2 * ( (Float)(y2) ))) + mtx4)));
HXLINE( 777)								v->y = ::Std_obj::_hx_int((n17 * (((mtx1 * ( (Float)(x2) )) + (mtx3 * ( (Float)(y2) ))) + mtx5)));
HXLINE( 778)								x2 = v->cx;
HXDLIN( 778)								y2 = v->cy;
HXLINE( 779)								v->cx = ::Std_obj::_hx_int((m1 * (((mtx0 * ( (Float)(x2) )) + (mtx2 * ( (Float)(y2) ))) + mtx4)));
HXLINE( 780)								v->cy = ::Std_obj::_hx_int((n17 * (((mtx1 * ( (Float)(x2) )) + (mtx3 * ( (Float)(y2) ))) + mtx5)));
            							}
            						}
HXLINE( 783)						::Array< ::Dynamic> this2 = ::Array_obj< ::Dynamic>::__new((num_vertices + comp_num_verts));
HXDLIN( 783)						tmp = this2;
HXLINE( 784)						if (hx::IsNull( tmp )) {
HXLINE( 785)							return null();
            						}
HXLINE( 787)						if ((num_vertices > 0)) {
HXLINE( 787)							::kha::graphics2::truetype::StbTruetype_obj::copyVertices(vertices,tmp,0,num_vertices);
            						}
HXLINE( 788)						::kha::graphics2::truetype::StbTruetype_obj::copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
HXLINE( 789)						vertices = tmp;
HXLINE( 790)						num_vertices = (num_vertices + comp_num_verts);
            					}
HXLINE( 793)					more = (flags1 & 32);
            				}
            			}
            			else {
HXLINE( 795)				if ((numberOfContours < 0)) {
HXLINE( 797)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
            			}
            		}
HXLINE( 802)		if (hx::IsNull( vertices )) {
HXLINE( 802)			return null();
            		}
HXLINE( 803)		if ((vertices->length < num_vertices)) {
HXLINE( 803)			HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            		}
HXLINE( 804)		if ((num_vertices < vertices->length)) {
HXLINE( 805)			::Array< ::Dynamic> this3 = ::Array_obj< ::Dynamic>::__new(num_vertices);
HXDLIN( 805)			::Array< ::Dynamic> tmp1 = this3;
HXLINE( 806)			::kha::graphics2::truetype::StbTruetype_obj::copyVertices(vertices,tmp1,0,num_vertices);
HXLINE( 807)			return tmp1;
            		}
            		else {
HXLINE( 810)			return vertices;
            		}
HXLINE( 804)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetGlyphShape,return )

 ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics StbTruetype_obj::stbtt_GetGlyphHMetrics( ::kha::graphics2::truetype::Stbtt_fontinfo info,int glyph_index){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_814_stbtt_GetGlyphHMetrics)
HXLINE( 815)		 ::kha::internal::BytesBlob p = info->data;
HXDLIN( 815)		int pos = (info->hhea + 34);
HXDLIN( 815)		int ch1 = p->readU8(pos);
HXDLIN( 815)		int ch2 = p->readU8((pos + 1));
HXDLIN( 815)		int numOfLongHorMetrics = (ch2 | (ch1 << 8));
HXLINE( 816)		 ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics metrics =  ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics_obj::__alloc( HX_CTX );
HXLINE( 817)		if ((glyph_index < numOfLongHorMetrics)) {
HXLINE( 818)			 ::kha::internal::BytesBlob p1 = info->data;
HXDLIN( 818)			int pos1 = (info->hmtx + (4 * glyph_index));
HXDLIN( 818)			int ch11 = p1->readU8(pos1);
HXDLIN( 818)			int ch21 = p1->readU8((pos1 + 1));
HXDLIN( 818)			int n = (ch21 | (ch11 << 8));
HXDLIN( 818)			int _hx_tmp;
HXDLIN( 818)			if (((n & 32768) != 0)) {
HXLINE( 818)				_hx_tmp = (n - 65536);
            			}
            			else {
HXLINE( 818)				_hx_tmp = n;
            			}
HXDLIN( 818)			metrics->advanceWidth = _hx_tmp;
HXLINE( 819)			 ::kha::internal::BytesBlob p2 = info->data;
HXDLIN( 819)			int pos2 = ((info->hmtx + (4 * glyph_index)) + 2);
HXDLIN( 819)			int ch12 = p2->readU8(pos2);
HXDLIN( 819)			int ch22 = p2->readU8((pos2 + 1));
HXDLIN( 819)			int n1 = (ch22 | (ch12 << 8));
HXDLIN( 819)			int _hx_tmp1;
HXDLIN( 819)			if (((n1 & 32768) != 0)) {
HXLINE( 819)				_hx_tmp1 = (n1 - 65536);
            			}
            			else {
HXLINE( 819)				_hx_tmp1 = n1;
            			}
HXDLIN( 819)			metrics->leftSideBearing = _hx_tmp1;
            		}
            		else {
HXLINE( 821)			 ::kha::internal::BytesBlob p3 = info->data;
HXDLIN( 821)			int pos3 = (info->hmtx + (4 * (numOfLongHorMetrics - 1)));
HXDLIN( 821)			int ch13 = p3->readU8(pos3);
HXDLIN( 821)			int ch23 = p3->readU8((pos3 + 1));
HXDLIN( 821)			int n2 = (ch23 | (ch13 << 8));
HXDLIN( 821)			int _hx_tmp2;
HXDLIN( 821)			if (((n2 & 32768) != 0)) {
HXLINE( 821)				_hx_tmp2 = (n2 - 65536);
            			}
            			else {
HXLINE( 821)				_hx_tmp2 = n2;
            			}
HXDLIN( 821)			metrics->advanceWidth = _hx_tmp2;
HXLINE( 822)			 ::kha::internal::BytesBlob p4 = info->data;
HXDLIN( 822)			int pos4 = ((info->hmtx + (4 * numOfLongHorMetrics)) + (2 * (glyph_index - numOfLongHorMetrics)));
HXDLIN( 822)			int ch14 = p4->readU8(pos4);
HXDLIN( 822)			int ch24 = p4->readU8((pos4 + 1));
HXDLIN( 822)			int n3 = (ch24 | (ch14 << 8));
HXDLIN( 822)			int _hx_tmp3;
HXDLIN( 822)			if (((n3 & 32768) != 0)) {
HXLINE( 822)				_hx_tmp3 = (n3 - 65536);
            			}
            			else {
HXLINE( 822)				_hx_tmp3 = n3;
            			}
HXDLIN( 822)			metrics->leftSideBearing = _hx_tmp3;
            		}
HXLINE( 824)		return metrics;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetGlyphHMetrics,return )

int StbTruetype_obj::stbtt_GetGlyphKernAdvance( ::kha::graphics2::truetype::Stbtt_fontinfo info,int glyph1,int glyph2){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_827_stbtt_GetGlyphKernAdvance)
HXLINE( 828)		int kern = info->kern;
HXLINE( 829)		 ::kha::internal::BytesBlob data = info->data;
HXLINE( 830)		int straw;
HXLINE( 831)		int m;
HXLINE( 834)		if ((info->kern == 0)) {
HXLINE( 835)			return 0;
            		}
HXLINE( 836)		int pos = (kern + 2);
HXDLIN( 836)		int ch1 = data->readU8(pos);
HXDLIN( 836)		int ch2 = data->readU8((pos + 1));
HXDLIN( 836)		if (((ch2 | (ch1 << 8)) < 1)) {
HXLINE( 837)			return 0;
            		}
HXLINE( 838)		int pos1 = (kern + 8);
HXDLIN( 838)		int ch11 = data->readU8(pos1);
HXDLIN( 838)		int ch21 = data->readU8((pos1 + 1));
HXDLIN( 838)		if (((ch21 | (ch11 << 8)) != 1)) {
HXLINE( 839)			return 0;
            		}
HXLINE( 831)		int l = 0;
HXLINE( 842)		int pos2 = (kern + 10);
HXDLIN( 842)		int ch12 = data->readU8(pos2);
HXDLIN( 842)		int ch22 = data->readU8((pos2 + 1));
HXLINE( 831)		int r = ((ch22 | (ch12 << 8)) - 1);
HXLINE( 830)		int needle = ((glyph1 << 16) | glyph2);
HXLINE( 844)		while((l <= r)){
HXLINE( 845)			m = ((l + r) >> 1);
HXLINE( 846)			int pos3 = ((kern + 18) + (m * 6));
HXDLIN( 846)			int ch13 = data->readU8(pos3);
HXDLIN( 846)			int ch23 = data->readU8((pos3 + 1));
HXDLIN( 846)			int ch3 = data->readU8((pos3 + 2));
HXDLIN( 846)			int ch4 = data->readU8((pos3 + 3));
HXDLIN( 846)			straw = (((ch4 | (ch3 << 8)) | (ch23 << 16)) | (ch13 << 24));
HXLINE( 847)			if ((needle < straw)) {
HXLINE( 848)				r = (m - 1);
            			}
            			else {
HXLINE( 849)				if ((needle > straw)) {
HXLINE( 850)					l = (m + 1);
            				}
            				else {
HXLINE( 852)					int pos4 = ((kern + 22) + (m * 6));
HXDLIN( 852)					int ch14 = data->readU8(pos4);
HXDLIN( 852)					int ch24 = data->readU8((pos4 + 1));
HXDLIN( 852)					int n = (ch24 | (ch14 << 8));
HXDLIN( 852)					if (((n & 32768) != 0)) {
HXLINE( 852)						return (n - 65536);
            					}
            					else {
HXLINE( 852)						return n;
            					}
            				}
            			}
            		}
HXLINE( 854)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_GetGlyphKernAdvance,return )

int StbTruetype_obj::stbtt_GetCodepointKernAdvance( ::kha::graphics2::truetype::Stbtt_fontinfo info,int ch1,int ch2){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_857_stbtt_GetCodepointKernAdvance)
HXLINE( 858)		if ((info->kern == 0)) {
HXLINE( 859)			return 0;
            		}
HXLINE( 860)		int _hx_tmp = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,ch1);
HXDLIN( 860)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphKernAdvance(info,_hx_tmp,::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,ch2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt_GetCodepointKernAdvance,return )

 ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics StbTruetype_obj::stbtt_GetCodepointHMetrics( ::kha::graphics2::truetype::Stbtt_fontinfo info,int codepoint){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_864_stbtt_GetCodepointHMetrics)
HXDLIN( 864)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphHMetrics(info,::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,codepoint));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_GetCodepointHMetrics,return )

 ::kha::graphics2::truetype::Stbtt_temp_font_v_metrics StbTruetype_obj::stbtt_GetFontVMetrics( ::kha::graphics2::truetype::Stbtt_fontinfo info){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_867_stbtt_GetFontVMetrics)
HXLINE( 868)		 ::kha::graphics2::truetype::Stbtt_temp_font_v_metrics metrics =  ::kha::graphics2::truetype::Stbtt_temp_font_v_metrics_obj::__alloc( HX_CTX );
HXLINE( 869)		 ::kha::internal::BytesBlob p = info->data;
HXDLIN( 869)		int pos = (info->hhea + 4);
HXDLIN( 869)		int ch1 = p->readU8(pos);
HXDLIN( 869)		int ch2 = p->readU8((pos + 1));
HXDLIN( 869)		int n = (ch2 | (ch1 << 8));
HXDLIN( 869)		int _hx_tmp;
HXDLIN( 869)		if (((n & 32768) != 0)) {
HXLINE( 869)			_hx_tmp = (n - 65536);
            		}
            		else {
HXLINE( 869)			_hx_tmp = n;
            		}
HXDLIN( 869)		metrics->ascent = _hx_tmp;
HXLINE( 870)		 ::kha::internal::BytesBlob p1 = info->data;
HXDLIN( 870)		int pos1 = (info->hhea + 6);
HXDLIN( 870)		int ch11 = p1->readU8(pos1);
HXDLIN( 870)		int ch21 = p1->readU8((pos1 + 1));
HXDLIN( 870)		int n1 = (ch21 | (ch11 << 8));
HXDLIN( 870)		int _hx_tmp1;
HXDLIN( 870)		if (((n1 & 32768) != 0)) {
HXLINE( 870)			_hx_tmp1 = (n1 - 65536);
            		}
            		else {
HXLINE( 870)			_hx_tmp1 = n1;
            		}
HXDLIN( 870)		metrics->descent = _hx_tmp1;
HXLINE( 871)		 ::kha::internal::BytesBlob p2 = info->data;
HXDLIN( 871)		int pos2 = (info->hhea + 8);
HXDLIN( 871)		int ch12 = p2->readU8(pos2);
HXDLIN( 871)		int ch22 = p2->readU8((pos2 + 1));
HXDLIN( 871)		int n2 = (ch22 | (ch12 << 8));
HXDLIN( 871)		int _hx_tmp2;
HXDLIN( 871)		if (((n2 & 32768) != 0)) {
HXLINE( 871)			_hx_tmp2 = (n2 - 65536);
            		}
            		else {
HXLINE( 871)			_hx_tmp2 = n2;
            		}
HXDLIN( 871)		metrics->lineGap = _hx_tmp2;
HXLINE( 872)		return metrics;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,stbtt_GetFontVMetrics,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetFontBoundingBox( ::kha::graphics2::truetype::Stbtt_fontinfo info){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_875_stbtt_GetFontBoundingBox)
HXLINE( 876)		 ::kha::graphics2::truetype::Stbtt_temp_rect rect =  ::kha::graphics2::truetype::Stbtt_temp_rect_obj::__alloc( HX_CTX );
HXLINE( 877)		 ::kha::internal::BytesBlob p = info->data;
HXDLIN( 877)		int pos = (info->head + 36);
HXDLIN( 877)		int ch1 = p->readU8(pos);
HXDLIN( 877)		int ch2 = p->readU8((pos + 1));
HXDLIN( 877)		int n = (ch2 | (ch1 << 8));
HXDLIN( 877)		int _hx_tmp;
HXDLIN( 877)		if (((n & 32768) != 0)) {
HXLINE( 877)			_hx_tmp = (n - 65536);
            		}
            		else {
HXLINE( 877)			_hx_tmp = n;
            		}
HXDLIN( 877)		rect->x0 = _hx_tmp;
HXLINE( 878)		 ::kha::internal::BytesBlob p1 = info->data;
HXDLIN( 878)		int pos1 = (info->head + 38);
HXDLIN( 878)		int ch11 = p1->readU8(pos1);
HXDLIN( 878)		int ch21 = p1->readU8((pos1 + 1));
HXDLIN( 878)		int n1 = (ch21 | (ch11 << 8));
HXDLIN( 878)		int _hx_tmp1;
HXDLIN( 878)		if (((n1 & 32768) != 0)) {
HXLINE( 878)			_hx_tmp1 = (n1 - 65536);
            		}
            		else {
HXLINE( 878)			_hx_tmp1 = n1;
            		}
HXDLIN( 878)		rect->y0 = _hx_tmp1;
HXLINE( 879)		 ::kha::internal::BytesBlob p2 = info->data;
HXDLIN( 879)		int pos2 = (info->head + 40);
HXDLIN( 879)		int ch12 = p2->readU8(pos2);
HXDLIN( 879)		int ch22 = p2->readU8((pos2 + 1));
HXDLIN( 879)		int n2 = (ch22 | (ch12 << 8));
HXDLIN( 879)		int _hx_tmp2;
HXDLIN( 879)		if (((n2 & 32768) != 0)) {
HXLINE( 879)			_hx_tmp2 = (n2 - 65536);
            		}
            		else {
HXLINE( 879)			_hx_tmp2 = n2;
            		}
HXDLIN( 879)		rect->x1 = _hx_tmp2;
HXLINE( 880)		 ::kha::internal::BytesBlob p3 = info->data;
HXDLIN( 880)		int pos3 = (info->head + 42);
HXDLIN( 880)		int ch13 = p3->readU8(pos3);
HXDLIN( 880)		int ch23 = p3->readU8((pos3 + 1));
HXDLIN( 880)		int n3 = (ch23 | (ch13 << 8));
HXDLIN( 880)		int _hx_tmp3;
HXDLIN( 880)		if (((n3 & 32768) != 0)) {
HXLINE( 880)			_hx_tmp3 = (n3 - 65536);
            		}
            		else {
HXLINE( 880)			_hx_tmp3 = n3;
            		}
HXDLIN( 880)		rect->y1 = _hx_tmp3;
HXLINE( 881)		return rect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StbTruetype_obj,stbtt_GetFontBoundingBox,return )

Float StbTruetype_obj::stbtt_ScaleForPixelHeight( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float height){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_884_stbtt_ScaleForPixelHeight)
HXLINE( 885)		 ::kha::internal::BytesBlob p = info->data;
HXDLIN( 885)		int pos = (info->hhea + 4);
HXDLIN( 885)		int ch1 = p->readU8(pos);
HXDLIN( 885)		int ch2 = p->readU8((pos + 1));
HXDLIN( 885)		int n = (ch2 | (ch1 << 8));
HXDLIN( 885)		int fheight;
HXDLIN( 885)		if (((n & 32768) != 0)) {
HXLINE( 885)			fheight = (n - 65536);
            		}
            		else {
HXLINE( 885)			fheight = n;
            		}
HXDLIN( 885)		 ::kha::internal::BytesBlob p1 = info->data;
HXDLIN( 885)		int pos1 = (info->hhea + 6);
HXDLIN( 885)		int ch11 = p1->readU8(pos1);
HXDLIN( 885)		int ch21 = p1->readU8((pos1 + 1));
HXDLIN( 885)		int n1 = (ch21 | (ch11 << 8));
HXDLIN( 885)		int fheight1;
HXDLIN( 885)		if (((n1 & 32768) != 0)) {
HXLINE( 885)			fheight1 = (n1 - 65536);
            		}
            		else {
HXLINE( 885)			fheight1 = n1;
            		}
HXDLIN( 885)		int fheight2 = (fheight - fheight1);
HXLINE( 886)		return (height / ( (Float)(fheight2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_ScaleForPixelHeight,return )

Float StbTruetype_obj::stbtt_ScaleForMappingEmToPixels( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float pixels){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_889_stbtt_ScaleForMappingEmToPixels)
HXLINE( 890)		 ::kha::internal::BytesBlob p = info->data;
HXDLIN( 890)		int pos = (info->head + 18);
HXDLIN( 890)		int ch1 = p->readU8(pos);
HXDLIN( 890)		int ch2 = p->readU8((pos + 1));
HXDLIN( 890)		int unitsPerEm = (ch2 | (ch1 << 8));
HXLINE( 891)		return (pixels / ( (Float)(unitsPerEm) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt_ScaleForMappingEmToPixels,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo font,int glyph,Float scale_x,Float scale_y,Float shift_x,Float shift_y){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_899_stbtt_GetGlyphBitmapBoxSubpixel)
HXLINE( 900)		 ::kha::graphics2::truetype::Stbtt_temp_rect rect =  ::kha::graphics2::truetype::Stbtt_temp_rect_obj::__alloc( HX_CTX );
HXLINE( 901)		if (!(::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBox(font,glyph,rect))) {
HXLINE( 903)			rect->x0 = 0;
HXLINE( 904)			rect->y0 = 0;
HXLINE( 905)			rect->x1 = 0;
HXLINE( 906)			rect->y1 = 0;
            		}
            		else {
HXLINE( 909)			int x0 = rect->x0;
HXLINE( 910)			int x1 = rect->x1;
HXLINE( 911)			int y0 = rect->y0;
HXLINE( 912)			int y1 = rect->y1;
HXLINE( 913)			rect->x0 = ::Math_obj::floor(((( (Float)(x0) ) * scale_x) + shift_x));
HXLINE( 914)			rect->y0 = ::Math_obj::floor(((( (Float)(-(y1)) ) * scale_y) + shift_y));
HXLINE( 915)			rect->x1 = ::Math_obj::ceil(((( (Float)(x1) ) * scale_x) + shift_x));
HXLINE( 916)			rect->y1 = ::Math_obj::ceil(((( (Float)(-(y0)) ) * scale_y) + shift_y));
            		}
HXLINE( 918)		return rect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt_GetGlyphBitmapBoxSubpixel,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetGlyphBitmapBox( ::kha::graphics2::truetype::Stbtt_fontinfo font,int glyph,Float scale_x,Float scale_y){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_922_stbtt_GetGlyphBitmapBox)
HXDLIN( 922)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,stbtt_GetGlyphBitmapBox,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetCodepointBitmapBoxSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo font,int codepoint,Float scale_x,Float scale_y,Float shift_x,Float shift_y){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_926_stbtt_GetCodepointBitmapBoxSubpixel)
HXDLIN( 926)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel(font,::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt_GetCodepointBitmapBoxSubpixel,return )

 ::kha::graphics2::truetype::Stbtt_temp_rect StbTruetype_obj::stbtt_GetCodepointBitmapBox( ::kha::graphics2::truetype::Stbtt_fontinfo font,int codepoint,Float scale_x,Float scale_y){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_930_stbtt_GetCodepointBitmapBox)
HXDLIN( 930)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,stbtt_GetCodepointBitmapBox,return )

 ::kha::graphics2::truetype::Stbtt__active_edge StbTruetype_obj::stbtt__new_active(::Array< ::Dynamic> e,int eIndex,int off_x,Float start_point){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_937_stbtt__new_active)
HXLINE( 938)		 ::kha::graphics2::truetype::Stbtt__active_edge z =  ::kha::graphics2::truetype::Stbtt__active_edge_obj::__alloc( HX_CTX );
HXLINE( 939)		Float dxdy = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->x1;
HXDLIN( 939)		Float dxdy1 = (dxdy - ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->x0);
HXDLIN( 939)		Float dxdy2 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y1;
HXDLIN( 939)		Float dxdy3 = (dxdy1 / (dxdy2 - ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0));
HXLINE( 941)		if (hx::IsNull( z )) {
HXLINE( 941)			return z;
            		}
HXLINE( 942)		z->fdx = dxdy3;
HXLINE( 943)		Float _hx_tmp;
HXDLIN( 943)		if ((dxdy3 != ((Float)0.0))) {
HXLINE( 943)			_hx_tmp = (((Float)1.0) / dxdy3);
            		}
            		else {
HXLINE( 943)			_hx_tmp = ((Float)0.0);
            		}
HXDLIN( 943)		z->fdy = _hx_tmp;
HXLINE( 944)		Float _hx_tmp1 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->x0;
HXDLIN( 944)		z->fx = (_hx_tmp1 + (dxdy3 * (start_point - ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0)));
HXLINE( 945)		 ::kha::graphics2::truetype::Stbtt__active_edge z1 = z;
HXDLIN( 945)		z1->fx = (z1->fx - ( (Float)(off_x) ));
HXLINE( 946)		Float _hx_tmp2;
HXDLIN( 946)		if (( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->invert) {
HXLINE( 946)			_hx_tmp2 = ((Float)1.0);
            		}
            		else {
HXLINE( 946)			_hx_tmp2 = ((Float)-1.0);
            		}
HXDLIN( 946)		z->direction = _hx_tmp2;
HXLINE( 947)		z->sy = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0;
HXLINE( 948)		z->ey = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y1;
HXLINE( 949)		z->_hx_set_next(HX_CTX, null());
HXLINE( 950)		return z;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,stbtt__new_active,return )

void StbTruetype_obj::stbtt__handle_clipped_edge(::Array< Float > scanline,int scanlineIndex,int x, ::kha::graphics2::truetype::Stbtt__active_edge e,Float x0,Float y0,Float x1,Float y1){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_955_stbtt__handle_clipped_edge)
HXLINE( 956)		if ((y0 == y1)) {
HXLINE( 956)			return;
            		}
HXLINE( 957)		if (!((y0 < y1))) {
HXLINE( 957)			HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            		}
HXLINE( 958)		if (!((e->sy <= e->ey))) {
HXLINE( 958)			HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            		}
HXLINE( 959)		if ((y0 > e->ey)) {
HXLINE( 959)			return;
            		}
HXLINE( 960)		if ((y1 < e->sy)) {
HXLINE( 960)			return;
            		}
HXLINE( 961)		if ((y0 < e->sy)) {
HXLINE( 962)			x0 = (x0 + (((x1 - x0) * (e->sy - y0)) / (y1 - y0)));
HXLINE( 963)			y0 = e->sy;
            		}
HXLINE( 965)		if ((y1 > e->ey)) {
HXLINE( 966)			x1 = (x1 + (((x1 - x0) * (e->ey - y1)) / (y1 - y0)));
HXLINE( 967)			y1 = e->ey;
            		}
HXLINE( 970)		if ((x0 == x)) {
HXLINE( 971)			if (!((x1 <= (x + 1)))) {
HXLINE( 971)				HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            			}
            		}
            		else {
HXLINE( 972)			if ((x0 == (x + 1))) {
HXLINE( 973)				if (!((x1 >= x))) {
HXLINE( 973)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
            			}
            			else {
HXLINE( 974)				if ((x0 <= x)) {
HXLINE( 975)					if (!((x1 <= x))) {
HXLINE( 975)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
            				}
            				else {
HXLINE( 976)					if ((x0 >= (x + 1))) {
HXLINE( 977)						if (!((x1 >= (x + 1)))) {
HXLINE( 977)							HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            						}
            					}
            					else {
HXLINE( 979)						bool _hx_tmp;
HXDLIN( 979)						if ((x1 >= x)) {
HXLINE( 979)							_hx_tmp = (x1 <= (x + 1));
            						}
            						else {
HXLINE( 979)							_hx_tmp = false;
            						}
HXDLIN( 979)						if (!(_hx_tmp)) {
HXLINE( 979)							HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            						}
            					}
            				}
            			}
            		}
HXLINE( 981)		bool _hx_tmp1;
HXDLIN( 981)		if ((x0 <= x)) {
HXLINE( 981)			_hx_tmp1 = (x1 <= x);
            		}
            		else {
HXLINE( 981)			_hx_tmp1 = false;
            		}
HXDLIN( 981)		if (_hx_tmp1) {
HXLINE( 982)			int _g = (scanlineIndex + x);
HXDLIN( 982)			::Array< Float > _g1 = scanline;
HXDLIN( 982)			{
HXLINE( 982)				Float val = ( (Float)(_hx_array_unsafe_get(_g1,_g)) );
HXDLIN( 982)				_g1->__unsafe_set(_g,(val + (e->direction * (y1 - y0))));
            			}
            		}
            		else {
HXLINE( 983)			bool _hx_tmp2;
HXDLIN( 983)			if ((x0 >= (x + 1))) {
HXLINE( 983)				_hx_tmp2 = (x1 >= (x + 1));
            			}
            			else {
HXLINE( 983)				_hx_tmp2 = false;
            			}
HXDLIN( 983)			if (!(_hx_tmp2)) {
HXLINE( 986)				bool _hx_tmp3;
HXDLIN( 986)				bool _hx_tmp4;
HXDLIN( 986)				bool _hx_tmp5;
HXDLIN( 986)				if ((x0 >= x)) {
HXLINE( 986)					_hx_tmp5 = (x0 <= (x + 1));
            				}
            				else {
HXLINE( 986)					_hx_tmp5 = false;
            				}
HXDLIN( 986)				if (_hx_tmp5) {
HXLINE( 986)					_hx_tmp4 = (x1 >= x);
            				}
            				else {
HXLINE( 986)					_hx_tmp4 = false;
            				}
HXDLIN( 986)				if (_hx_tmp4) {
HXLINE( 986)					_hx_tmp3 = (x1 <= (x + 1));
            				}
            				else {
HXLINE( 986)					_hx_tmp3 = false;
            				}
HXDLIN( 986)				if (!(_hx_tmp3)) {
HXLINE( 986)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
HXLINE( 987)				{
HXLINE( 987)					int _g2 = (scanlineIndex + x);
HXDLIN( 987)					::Array< Float > _g11 = scanline;
HXDLIN( 987)					{
HXLINE( 987)						Float val1 = ( (Float)(_hx_array_unsafe_get(_g11,_g2)) );
HXDLIN( 987)						_g11->__unsafe_set(_g2,(val1 + ((e->direction * (y1 - y0)) * (( (Float)(1) ) - (((x0 - ( (Float)(x) )) + (x1 - ( (Float)(x) ))) / ( (Float)(2) ))))));
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(StbTruetype_obj,stbtt__handle_clipped_edge,(void))

void StbTruetype_obj::stbtt__fill_active_edges_new(::Array< Float > scanline,::Array< Float > scanline_fill,int scanline_fillIndex,int len, ::kha::graphics2::truetype::Stbtt__active_edge e,Float y_top){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_991_stbtt__fill_active_edges_new)
HXLINE( 992)		Float y_bottom = (y_top + 1);
HXLINE( 994)		while(hx::IsNotNull( e )){
HXLINE( 998)			if (!((e->ey >= y_top))) {
HXLINE( 998)				HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            			}
HXLINE(1000)			if ((e->fdx == 0)) {
HXLINE(1001)				Float x0 = e->fx;
HXLINE(1002)				if ((x0 < len)) {
HXLINE(1003)					if ((x0 >= 0)) {
HXLINE(1004)						::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,::Std_obj::_hx_int(x0),e,x0,y_top,x0,y_bottom);
HXLINE(1005)						::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline_fill,(scanline_fillIndex - 1),::Std_obj::_hx_int((x0 + 1)),e,x0,y_top,x0,y_bottom);
            					}
            					else {
HXLINE(1007)						::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline_fill,(scanline_fillIndex - 1),0,e,x0,y_top,x0,y_bottom);
            					}
            				}
            			}
            			else {
HXLINE(1011)				Float x01 = e->fx;
HXLINE(1012)				Float dx = e->fdx;
HXLINE(1013)				Float xb = (x01 + dx);
HXLINE(1014)				Float x_top;
HXDLIN(1014)				Float x_bottom;
HXLINE(1015)				Float sy0;
HXDLIN(1015)				Float sy1;
HXLINE(1016)				Float dy = e->fdy;
HXLINE(1017)				bool _hx_tmp;
HXDLIN(1017)				if ((e->sy <= y_bottom)) {
HXLINE(1017)					_hx_tmp = (e->ey >= y_top);
            				}
            				else {
HXLINE(1017)					_hx_tmp = false;
            				}
HXDLIN(1017)				if (!(_hx_tmp)) {
HXLINE(1017)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
HXLINE(1022)				if ((e->sy > y_top)) {
HXLINE(1023)					x_top = (x01 + (dx * (e->sy - y_top)));
HXLINE(1024)					sy0 = e->sy;
            				}
            				else {
HXLINE(1026)					x_top = x01;
HXLINE(1027)					sy0 = y_top;
            				}
HXLINE(1029)				if ((e->ey < y_bottom)) {
HXLINE(1030)					x_bottom = (x01 + (dx * (e->ey - y_top)));
HXLINE(1031)					sy1 = e->ey;
            				}
            				else {
HXLINE(1033)					x_bottom = xb;
HXLINE(1034)					sy1 = y_bottom;
            				}
HXLINE(1037)				bool _hx_tmp1;
HXDLIN(1037)				bool _hx_tmp2;
HXDLIN(1037)				bool _hx_tmp3;
HXDLIN(1037)				if ((x_top >= 0)) {
HXLINE(1037)					_hx_tmp3 = (x_bottom >= 0);
            				}
            				else {
HXLINE(1037)					_hx_tmp3 = false;
            				}
HXDLIN(1037)				if (_hx_tmp3) {
HXLINE(1037)					_hx_tmp2 = (x_top < len);
            				}
            				else {
HXLINE(1037)					_hx_tmp2 = false;
            				}
HXDLIN(1037)				if (_hx_tmp2) {
HXLINE(1037)					_hx_tmp1 = (x_bottom < len);
            				}
            				else {
HXLINE(1037)					_hx_tmp1 = false;
            				}
HXDLIN(1037)				if (_hx_tmp1) {
HXLINE(1040)					int _hx_tmp4 = ::Std_obj::_hx_int(x_top);
HXDLIN(1040)					if ((_hx_tmp4 == ::Std_obj::_hx_int(x_bottom))) {
HXLINE(1043)						int x = ::Std_obj::_hx_int(x_top);
HXLINE(1041)						Float height = (sy1 - sy0);
HXLINE(1045)						bool _hx_tmp5;
HXDLIN(1045)						if ((x >= 0)) {
HXLINE(1045)							_hx_tmp5 = (x < len);
            						}
            						else {
HXLINE(1045)							_hx_tmp5 = false;
            						}
HXDLIN(1045)						if (!(_hx_tmp5)) {
HXLINE(1045)							HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            						}
HXLINE(1046)						{
HXLINE(1046)							int _g = x;
HXDLIN(1046)							::Array< Float > _g1 = scanline;
HXDLIN(1046)							{
HXLINE(1046)								Float val = ( (Float)(_hx_array_unsafe_get(_g1,_g)) );
HXDLIN(1046)								_g1->__unsafe_set(_g,(val + ((e->direction * (( (Float)(1) ) - (((x_top - ( (Float)(x) )) + (x_bottom - ( (Float)(x) ))) / ( (Float)(2) )))) * height)));
            							}
            						}
HXLINE(1047)						{
HXLINE(1047)							int _g2 = (scanline_fillIndex + x);
HXDLIN(1047)							::Array< Float > _g11 = scanline_fill;
HXDLIN(1047)							{
HXLINE(1047)								Float val1 = ( (Float)(_hx_array_unsafe_get(_g11,_g2)) );
HXDLIN(1047)								_g11->__unsafe_set(_g2,(val1 + (e->direction * height)));
            							}
            						}
            					}
            					else {
HXLINE(1049)						 ::Dynamic x1;
HXLINE(1052)						if ((x_top > x_bottom)) {
HXLINE(1055)							sy0 = (y_bottom - (sy0 - y_top));
HXLINE(1056)							sy1 = (y_bottom - (sy1 - y_top));
HXLINE(1054)							Float t = sy0;
HXLINE(1057)							sy0 = sy1;
HXDLIN(1057)							sy1 = t;
HXLINE(1058)							t = x_bottom;
HXDLIN(1058)							x_bottom = x_top;
HXDLIN(1058)							x_top = t;
HXLINE(1059)							dx = -(dx);
HXLINE(1060)							dy = -(dy);
HXLINE(1061)							t = x01;
HXDLIN(1061)							x01 = xb;
HXDLIN(1061)							xb = t;
            						}
HXLINE(1049)						int x11 = ::Std_obj::_hx_int(x_top);
HXDLIN(1049)						int x2 = ::Std_obj::_hx_int(x_bottom);
HXLINE(1050)						Float y_crossing = (((( (Float)((x11 + 1)) ) - x01) * dy) + y_top);
HXDLIN(1050)						Float sign = e->direction;
HXDLIN(1050)						Float area = (sign * (y_crossing - sy0));
HXLINE(1073)						{
HXLINE(1073)							int _g3 = x11;
HXDLIN(1073)							::Array< Float > _g12 = scanline;
HXDLIN(1073)							{
HXLINE(1073)								Float val2 = (( (Float)(_hx_array_unsafe_get(_g12,_g3)) ) + (area * (( (Float)(1) ) - (((x_top - ( (Float)(x11) )) + ((x11 + 1) - x11)) / ( (Float)(2) )))));
HXDLIN(1073)								_g12->__unsafe_set(_g3,val2);
            							}
            						}
HXLINE(1050)						Float step = (sign * dy);
HXLINE(1076)						{
HXLINE(1076)							int _g4 = (x11 + 1);
HXDLIN(1076)							int _g13 = x2;
HXDLIN(1076)							while((_g4 < _g13)){
HXLINE(1076)								_g4 = (_g4 + 1);
HXDLIN(1076)								int x3 = (_g4 - 1);
HXLINE(1077)								{
HXLINE(1077)									int _g5 = x3;
HXDLIN(1077)									::Array< Float > _g14 = scanline;
HXDLIN(1077)									{
HXLINE(1077)										Float val3 = (( (Float)(_hx_array_unsafe_get(_g14,_g5)) ) + (area + (step / ( (Float)(2) ))));
HXDLIN(1077)										_g14->__unsafe_set(_g5,val3);
            									}
            								}
HXLINE(1078)								area = (area + step);
            							}
            						}
HXLINE(1080)						y_crossing = (y_crossing + (dy * ( (Float)((x2 - (x11 + 1))) )));
HXLINE(1082)						if (!((::Math_obj::abs(area) <= ((Float)1.01)))) {
HXLINE(1082)							HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            						}
HXLINE(1084)						{
HXLINE(1084)							int _g21 = x2;
HXDLIN(1084)							::Array< Float > _g31 = scanline;
HXDLIN(1084)							{
HXLINE(1084)								Float val4 = (( (Float)(_hx_array_unsafe_get(_g31,_g21)) ) + (area + ((sign * (( (Float)(1) ) - (((x2 - x2) + (x_bottom - ( (Float)(x2) ))) / ( (Float)(2) )))) * (sy1 - y_crossing))));
HXDLIN(1084)								_g31->__unsafe_set(_g21,val4);
            							}
            						}
HXLINE(1086)						{
HXLINE(1086)							int _g22 = (scanline_fillIndex + x2);
HXDLIN(1086)							::Array< Float > _g32 = scanline_fill;
HXDLIN(1086)							{
HXLINE(1086)								Float val5 = (( (Float)(_hx_array_unsafe_get(_g32,_g22)) ) + (sign * (sy1 - sy0)));
HXDLIN(1086)								_g32->__unsafe_set(_g22,val5);
            							}
            						}
            					}
            				}
            				else {
HXLINE(1093)					int _g6 = 0;
HXDLIN(1093)					int _g15 = len;
HXDLIN(1093)					while((_g6 < _g15)){
HXLINE(1093)						_g6 = (_g6 + 1);
HXDLIN(1093)						int x4 = (_g6 - 1);
HXLINE(1108)						Float y0 = y_top;
HXLINE(1109)						Float x12 = ( (Float)(x4) );
HXLINE(1110)						Float x21 = ( (Float)((x4 + 1)) );
HXLINE(1111)						Float x31 = xb;
HXLINE(1112)						Float y3 = y_bottom;
HXLINE(1113)						Float y1 = (((( (Float)(x4) ) - x01) / dx) + y_top);
HXDLIN(1113)						Float y2 = (((( (Float)((x4 + 1)) ) - x01) / dx) + y_top);
HXLINE(1121)						bool _hx_tmp6;
HXDLIN(1121)						if ((x01 < x12)) {
HXLINE(1121)							_hx_tmp6 = (x31 > x21);
            						}
            						else {
HXLINE(1121)							_hx_tmp6 = false;
            						}
HXDLIN(1121)						if (_hx_tmp6) {
HXLINE(1122)							::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
HXLINE(1123)							::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
HXLINE(1124)							::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
            						}
            						else {
HXLINE(1125)							bool _hx_tmp7;
HXDLIN(1125)							if ((x31 < x12)) {
HXLINE(1125)								_hx_tmp7 = (x01 > x21);
            							}
            							else {
HXLINE(1125)								_hx_tmp7 = false;
            							}
HXDLIN(1125)							if (_hx_tmp7) {
HXLINE(1126)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
HXLINE(1127)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
HXLINE(1128)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
            							}
            							else {
HXLINE(1129)								bool _hx_tmp8;
HXDLIN(1129)								if ((x01 < x12)) {
HXLINE(1129)									_hx_tmp8 = (x31 > x12);
            								}
            								else {
HXLINE(1129)									_hx_tmp8 = false;
            								}
HXDLIN(1129)								if (_hx_tmp8) {
HXLINE(1130)									::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
HXLINE(1131)									::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
            								}
            								else {
HXLINE(1132)									bool _hx_tmp9;
HXDLIN(1132)									if ((x31 < x12)) {
HXLINE(1132)										_hx_tmp9 = (x01 > x12);
            									}
            									else {
HXLINE(1132)										_hx_tmp9 = false;
            									}
HXDLIN(1132)									if (_hx_tmp9) {
HXLINE(1133)										::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
HXLINE(1134)										::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
            									}
            									else {
HXLINE(1135)										bool _hx_tmp10;
HXDLIN(1135)										if ((x01 < x21)) {
HXLINE(1135)											_hx_tmp10 = (x31 > x21);
            										}
            										else {
HXLINE(1135)											_hx_tmp10 = false;
            										}
HXDLIN(1135)										if (_hx_tmp10) {
HXLINE(1136)											::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
HXLINE(1137)											::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
            										}
            										else {
HXLINE(1138)											bool _hx_tmp11;
HXDLIN(1138)											if ((x31 < x21)) {
HXLINE(1138)												_hx_tmp11 = (x01 > x21);
            											}
            											else {
HXLINE(1138)												_hx_tmp11 = false;
            											}
HXDLIN(1138)											if (_hx_tmp11) {
HXLINE(1139)												::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
HXLINE(1140)												::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
            											}
            											else {
HXLINE(1142)												::kha::graphics2::truetype::StbTruetype_obj::stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1147)			e = e->next;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt__fill_active_edges_new,(void))

void StbTruetype_obj::stbtt__rasterize_sorted_edges( ::kha::graphics2::truetype::Stbtt__bitmap result,::Array< ::Dynamic> e,int n,int vsubsample,int off_x,int off_y){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_1152_stbtt__rasterize_sorted_edges)
HXLINE(1153)		 ::kha::graphics2::truetype::Stbtt__active_edge active = null();
HXLINE(1154)		int j = 0;
HXLINE(1155)		::Array< Float > scanline;
HXLINE(1156)		int scanline2Index = 0;
HXLINE(1157)		int eIndex = 0;
HXLINE(1159)		if ((result->w > 64)) {
HXLINE(1160)			::Array< Float > this1 = ::Array_obj< Float >::__new(((result->w * 2) + 1));
HXDLIN(1160)			scanline = this1;
            		}
            		else {
HXLINE(1162)			::Array< Float > this2 = ::Array_obj< Float >::__new(129);
HXDLIN(1162)			scanline = this2;
            		}
HXLINE(1155)		::Array< Float > scanline2 = scanline;
HXLINE(1165)		scanline2Index = result->w;
HXLINE(1154)		int y = off_y;
HXLINE(1168)		int _hx_tmp = (off_y + result->h);
HXDLIN(1168)		( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,(eIndex + n))) )->y0 = ( (Float)((_hx_tmp + 1)) );
HXLINE(1170)		while((j < result->h)){
HXLINE(1172)			Float scan_y_top = (y + ((Float)0.0));
HXLINE(1173)			Float scan_y_bottom = (y + ((Float)1.0));
HXLINE(1174)			 ::kha::graphics2::truetype::Stbtt__active_edge step_value = active;
HXDLIN(1174)			 ::Dynamic step_parent = null();
HXLINE(1176)			{
HXLINE(1176)				int _g = 0;
HXDLIN(1176)				int _g1 = result->w;
HXDLIN(1176)				while((_g < _g1)){
HXLINE(1176)					_g = (_g + 1);
HXDLIN(1176)					int i = (_g - 1);
HXDLIN(1176)					scanline->__unsafe_set(i,0);
            				}
            			}
HXLINE(1177)			{
HXLINE(1177)				int _g2 = 0;
HXDLIN(1177)				int _g3 = (result->w + 1);
HXDLIN(1177)				while((_g2 < _g3)){
HXLINE(1177)					_g2 = (_g2 + 1);
HXDLIN(1177)					int i1 = (_g2 - 1);
HXDLIN(1177)					scanline2->__unsafe_set((scanline2Index + i1),0);
            				}
            			}
HXLINE(1181)			while(hx::IsNotNull( step_value )){
HXLINE(1182)				 ::kha::graphics2::truetype::Stbtt__active_edge z = step_value;
HXLINE(1183)				if ((z->ey <= scan_y_top)) {
HXLINE(1185)					if (hx::IsNull( step_parent )) {
HXLINE(1186)						active = z->next;
HXLINE(1187)						step_value = z->next;
            					}
            					else {
HXLINE(1190)						step_parent->__SetField(HX_("next",f3,84,02,49),z->next,hx::paccDynamic);
HXLINE(1191)						step_value = z->next;
            					}
HXLINE(1194)					if ((z->direction == 0)) {
HXLINE(1194)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
HXLINE(1195)					z->direction = ( (Float)(0) );
            				}
            				else {
HXLINE(1198)					step_parent = step_value;
HXLINE(1199)					step_value = step_value->next;
            				}
            			}
HXLINE(1204)			while((( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0 <= scan_y_bottom)){
HXLINE(1205)				Float _hx_tmp1 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y0;
HXDLIN(1205)				if ((_hx_tmp1 != ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,eIndex)) )->y1)) {
HXLINE(1206)					 ::kha::graphics2::truetype::Stbtt__active_edge z1 = ::kha::graphics2::truetype::StbTruetype_obj::stbtt__new_active(e,eIndex,off_x,scan_y_top);
HXLINE(1207)					if (!((z1->ey >= scan_y_top))) {
HXLINE(1207)						HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            					}
HXLINE(1209)					z1->_hx_set_next(HX_CTX, active);
HXLINE(1210)					active = z1;
            				}
HXLINE(1212)				eIndex = (eIndex + 1);
            			}
HXLINE(1216)			if (hx::IsNotNull( active )) {
HXLINE(1217)				::kha::graphics2::truetype::StbTruetype_obj::stbtt__fill_active_edges_new(scanline,scanline2,(scanline2Index + 1),result->w,active,scan_y_top);
            			}
HXLINE(1219)			{
HXLINE(1220)				Float sum = ( (Float)(0) );
HXLINE(1221)				{
HXLINE(1221)					int _g4 = 0;
HXDLIN(1221)					int _g5 = result->w;
HXDLIN(1221)					while((_g4 < _g5)){
HXLINE(1221)						_g4 = (_g4 + 1);
HXDLIN(1221)						int i2 = (_g4 - 1);
HXLINE(1224)						sum = (sum + ( (Float)(_hx_array_unsafe_get(scanline2,(scanline2Index + i2))) ));
HXLINE(1222)						Float k = (( (Float)(_hx_array_unsafe_get(scanline,i2)) ) + sum);
HXLINE(1226)						k = ((::Math_obj::abs(k) * ((Float)255.0)) + ((Float)0.5));
HXLINE(1223)						int m = ::Std_obj::_hx_int(k);
HXLINE(1228)						if ((m > 255)) {
HXLINE(1228)							m = 255;
            						}
HXLINE(1229)						result->pixels->writeU8(((result->pixels_offset + (j * result->stride)) + i2),m);
            					}
            				}
            			}
HXLINE(1233)			step_parent = null();
HXLINE(1234)			step_value = active;
HXLINE(1235)			while(hx::IsNotNull( step_value )){
HXLINE(1236)				 ::kha::graphics2::truetype::Stbtt__active_edge z2 = step_value;
HXLINE(1237)				 ::kha::graphics2::truetype::Stbtt__active_edge z3 = z2;
HXDLIN(1237)				z3->fx = (z3->fx + z2->fdx);
HXLINE(1239)				step_parent = step_value;
HXLINE(1240)				step_value = step_value->next;
            			}
HXLINE(1243)			y = (y + 1);
HXLINE(1244)			j = (j + 1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StbTruetype_obj,stbtt__rasterize_sorted_edges,(void))

bool StbTruetype_obj::STBTT__COMPARE( ::kha::graphics2::truetype::Stbtt__edge a, ::kha::graphics2::truetype::Stbtt__edge b){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1248_STBTT__COMPARE)
HXDLIN(1248)		return (a->y0 < b->y0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,STBTT__COMPARE,return )

void StbTruetype_obj::stbtt__sort_edges_ins_sort(::Array< ::Dynamic> p,int n){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1250_stbtt__sort_edges_ins_sort)
HXLINE(1251)		int i;
HXDLIN(1251)		int j;
HXLINE(1252)		{
HXLINE(1252)			int _g = 1;
HXDLIN(1252)			int _g1 = n;
HXDLIN(1252)			while((_g < _g1)){
HXLINE(1252)				_g = (_g + 1);
HXDLIN(1252)				int i1 = (_g - 1);
HXLINE(1253)				 ::kha::graphics2::truetype::Stbtt__edge t = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,i1)) );
HXLINE(1254)				 ::kha::graphics2::truetype::Stbtt__edge a = t;
HXLINE(1255)				j = i1;
HXLINE(1256)				while((j > 0)){
HXLINE(1257)					 ::kha::graphics2::truetype::Stbtt__edge b = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(j - 1))) );
HXLINE(1258)					bool c = ::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(a,b);
HXLINE(1259)					if (!(c)) {
HXLINE(1259)						goto _hx_goto_66;
            					}
HXLINE(1260)					{
HXLINE(1260)						 ::kha::graphics2::truetype::Stbtt__edge val = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(j - 1))) );
HXDLIN(1260)						p->__unsafe_set(j,val);
            					}
HXLINE(1261)					j = (j - 1);
            				}
            				_hx_goto_66:;
HXLINE(1263)				if ((i1 != j)) {
HXLINE(1264)					p->__unsafe_set(j,t);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt__sort_edges_ins_sort,(void))

void StbTruetype_obj::stbtt__sort_edges_quicksort(::Array< ::Dynamic> p,int pIndex,int n){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1270_stbtt__sort_edges_quicksort)
HXDLIN(1270)		while((n > 12)){
HXLINE(1271)			 ::kha::graphics2::truetype::Stbtt__edge t;
HXLINE(1272)			bool c;
HXLINE(1273)			int m = (n >> 1);
HXLINE(1277)			 ::kha::graphics2::truetype::Stbtt__edge c01 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) );
HXLINE(1272)			bool c011 = ::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(c01,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + m))) ));
HXLINE(1278)			 ::kha::graphics2::truetype::Stbtt__edge c12 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + m))) );
HXLINE(1272)			bool c121 = ::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(c12,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,((pIndex + n) - 1))) ));
HXLINE(1280)			if ((c011 != c121)) {
HXLINE(1282)				int z;
HXLINE(1283)				 ::kha::graphics2::truetype::Stbtt__edge c1 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) );
HXDLIN(1283)				c = ::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(c1,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,((pIndex + n) - 1))) ));
HXLINE(1286)				if ((c == c121)) {
HXLINE(1286)					z = 0;
            				}
            				else {
HXLINE(1286)					z = (n - 1);
            				}
HXLINE(1287)				t = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + z))) );
HXLINE(1288)				{
HXLINE(1288)					 ::kha::graphics2::truetype::Stbtt__edge val = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + m))) );
HXDLIN(1288)					p->__unsafe_set((pIndex + z),val);
            				}
HXLINE(1289)				p->__unsafe_set((pIndex + m),t);
            			}
HXLINE(1293)			t = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) );
HXLINE(1294)			{
HXLINE(1294)				 ::kha::graphics2::truetype::Stbtt__edge val1 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + m))) );
HXDLIN(1294)				p->__unsafe_set(pIndex,val1);
            			}
HXLINE(1295)			p->__unsafe_set((pIndex + m),t);
HXLINE(1273)			int i = 1;
HXDLIN(1273)			int j = (n - 1);
HXLINE(1300)			while(true){
HXLINE(1303)				while(true){
HXLINE(1304)					 ::kha::graphics2::truetype::Stbtt__edge _hx_tmp = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + i))) );
HXDLIN(1304)					if (!(::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(_hx_tmp,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) )))) {
HXLINE(1304)						goto _hx_goto_70;
            					}
HXLINE(1305)					i = (i + 1);
            				}
            				_hx_goto_70:;
HXLINE(1307)				while(true){
HXLINE(1308)					 ::kha::graphics2::truetype::Stbtt__edge _hx_tmp1 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,pIndex)) );
HXDLIN(1308)					if (!(::kha::graphics2::truetype::StbTruetype_obj::STBTT__COMPARE(_hx_tmp1,( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + j))) )))) {
HXLINE(1308)						goto _hx_goto_71;
            					}
HXLINE(1309)					j = (j - 1);
            				}
            				_hx_goto_71:;
HXLINE(1312)				if ((i >= j)) {
HXLINE(1312)					goto _hx_goto_69;
            				}
HXLINE(1313)				t = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + i))) );
HXLINE(1314)				{
HXLINE(1314)					 ::kha::graphics2::truetype::Stbtt__edge val2 = ( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(p,(pIndex + j))) );
HXDLIN(1314)					p->__unsafe_set((pIndex + i),val2);
            				}
HXLINE(1315)				p->__unsafe_set((pIndex + j),t);
HXLINE(1317)				i = (i + 1);
HXLINE(1318)				j = (j - 1);
            			}
            			_hx_goto_69:;
HXLINE(1321)			if ((j < (n - i))) {
HXLINE(1322)				::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges_quicksort(p,pIndex,j);
HXLINE(1323)				pIndex = (pIndex + i);
HXLINE(1324)				n = (n - i);
            			}
            			else {
HXLINE(1326)				::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges_quicksort(p,(pIndex + i),(n - i));
HXLINE(1327)				n = j;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(StbTruetype_obj,stbtt__sort_edges_quicksort,(void))

void StbTruetype_obj::stbtt__sort_edges(::Array< ::Dynamic> p,int n){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1332_stbtt__sort_edges)
HXLINE(1333)		::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges_quicksort(p,0,n);
HXLINE(1334)		::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges_ins_sort(p,n);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StbTruetype_obj,stbtt__sort_edges,(void))

void StbTruetype_obj::stbtt__rasterize( ::kha::graphics2::truetype::Stbtt__bitmap result,::Array< ::Dynamic> pts,::Array< int > wcount,int windings,Float scale_x,Float scale_y,Float shift_x,Float shift_y,int off_x,int off_y,bool invert){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_1337_stbtt__rasterize)
HXLINE(1338)		Float y_scale_inv;
HXDLIN(1338)		if (invert) {
HXLINE(1338)			y_scale_inv = -(scale_y);
            		}
            		else {
HXLINE(1338)			y_scale_inv = scale_y;
            		}
HXLINE(1340)		int i;
HXDLIN(1340)		int j;
HXDLIN(1340)		int k;
HXLINE(1341)		int vsubsample = 1;
HXLINE(1342)		int ptsIndex = 0;
HXLINE(1340)		int n = 0;
HXLINE(1348)		{
HXLINE(1348)			int _g = 0;
HXDLIN(1348)			int _g1 = windings;
HXDLIN(1348)			while((_g < _g1)){
HXLINE(1348)				_g = (_g + 1);
HXDLIN(1348)				int i1 = (_g - 1);
HXLINE(1349)				n = (n + ( (int)(_hx_array_unsafe_get(wcount,i1)) ));
            			}
            		}
HXLINE(1351)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new((n + 1));
HXLINE(1339)		::Array< ::Dynamic> e = this1;
HXLINE(1352)		if (hx::IsNull( e )) {
HXLINE(1352)			return;
            		}
            		else {
HXLINE(1354)			int _g2 = 0;
HXDLIN(1354)			int _g3 = e->length;
HXDLIN(1354)			while((_g2 < _g3)){
HXLINE(1354)				_g2 = (_g2 + 1);
HXDLIN(1354)				int i2 = (_g2 - 1);
HXLINE(1355)				{
HXLINE(1355)					 ::kha::graphics2::truetype::Stbtt__edge val =  ::kha::graphics2::truetype::Stbtt__edge_obj::__alloc( HX_CTX );
HXDLIN(1355)					e->__unsafe_set(i2,val);
            				}
            			}
            		}
HXLINE(1358)		n = 0;
HXLINE(1340)		int m = 0;
HXLINE(1361)		{
HXLINE(1361)			int _g21 = 0;
HXDLIN(1361)			int _g31 = windings;
HXDLIN(1361)			while((_g21 < _g31)){
HXLINE(1361)				_g21 = (_g21 + 1);
HXDLIN(1361)				int i3 = (_g21 - 1);
HXLINE(1362)				::Array< ::Dynamic> p = pts;
HXLINE(1363)				int pIndex = (ptsIndex + m);
HXLINE(1364)				m = (m + ( (int)(_hx_array_unsafe_get(wcount,i3)) ));
HXLINE(1365)				j = (( (int)(_hx_array_unsafe_get(wcount,i3)) ) - 1);
HXLINE(1366)				{
HXLINE(1366)					int _g22 = 0;
HXDLIN(1366)					int _g32 = ( (int)(_hx_array_unsafe_get(wcount,i3)) );
HXDLIN(1366)					while((_g22 < _g32)){
HXLINE(1366)						_g22 = (_g22 + 1);
HXDLIN(1366)						int k1 = (_g22 - 1);
HXLINE(1367)						int a = k1;
HXDLIN(1367)						int b = j;
HXLINE(1369)						Float _hx_tmp = ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + j))) )->y;
HXDLIN(1369)						if ((_hx_tmp == ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + k1))) )->y)) {
HXLINE(1370)							j = k1;
HXLINE(1371)							continue;
            						}
HXLINE(1374)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->invert = false;
HXLINE(1375)						bool _hx_tmp1;
HXDLIN(1375)						if (invert) {
HXLINE(1375)							Float _hx_tmp2 = ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + j))) )->y;
HXDLIN(1375)							_hx_tmp1 = (_hx_tmp2 > ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + k1))) )->y);
            						}
            						else {
HXLINE(1375)							Float _hx_tmp3 = ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + j))) )->y;
HXDLIN(1375)							_hx_tmp1 = (_hx_tmp3 < ( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + k1))) )->y);
            						}
HXDLIN(1375)						if (_hx_tmp1) {
HXLINE(1376)							( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->invert = true;
HXLINE(1377)							a = j;
HXDLIN(1377)							b = k1;
            						}
HXLINE(1379)						Float _hx_tmp4 = (( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + a))) )->x * scale_x);
HXDLIN(1379)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->x0 = (_hx_tmp4 + shift_x);
HXLINE(1380)						Float _hx_tmp5 = ((( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + a))) )->y * y_scale_inv) + shift_y);
HXDLIN(1380)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->y0 = (_hx_tmp5 * ( (Float)(vsubsample) ));
HXLINE(1381)						Float _hx_tmp6 = (( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + b))) )->x * scale_x);
HXDLIN(1381)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->x1 = (_hx_tmp6 + shift_x);
HXLINE(1382)						Float _hx_tmp7 = ((( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(p,(pIndex + b))) )->y * y_scale_inv) + shift_y);
HXDLIN(1382)						( ( ::kha::graphics2::truetype::Stbtt__edge)(_hx_array_unsafe_get(e,n)) )->y1 = (_hx_tmp7 * ( (Float)(vsubsample) ));
HXLINE(1383)						n = (n + 1);
HXLINE(1384)						j = k1;
            					}
            				}
            			}
            		}
HXLINE(1390)		::kha::graphics2::truetype::StbTruetype_obj::stbtt__sort_edges(e,n);
HXLINE(1393)		::kha::graphics2::truetype::StbTruetype_obj::stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(StbTruetype_obj,stbtt__rasterize,(void))

void StbTruetype_obj::stbtt__add_point(::Array< ::Dynamic> points,int n,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1396_stbtt__add_point)
HXLINE(1397)		if (hx::IsNull( points )) {
HXLINE(1397)			return;
            		}
HXLINE(1398)		( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(points,n)) )->x = x;
HXLINE(1399)		( ( ::kha::graphics2::truetype::Stbtt__point)(_hx_array_unsafe_get(points,n)) )->y = y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(StbTruetype_obj,stbtt__add_point,(void))

int StbTruetype_obj::stbtt__tesselate_curve(::Array< ::Dynamic> points, ::Dynamic num_points,Float x0,Float y0,Float x1,Float y1,Float x2,Float y2,Float objspace_flatness_squared,int n){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1403_stbtt__tesselate_curve)
HXLINE(1405)		Float mx = (((x0 + (( (Float)(2) ) * x1)) + x2) / ( (Float)(4) ));
HXLINE(1406)		Float my = (((y0 + (( (Float)(2) ) * y1)) + y2) / ( (Float)(4) ));
HXLINE(1408)		Float dx = (((x0 + x2) / ( (Float)(2) )) - mx);
HXLINE(1409)		Float dy = (((y0 + y2) / ( (Float)(2) )) - my);
HXLINE(1410)		if ((n > 16)) {
HXLINE(1411)			return 1;
            		}
HXLINE(1412)		if ((((dx * dx) + (dy * dy)) > objspace_flatness_squared)) {
HXLINE(1413)			::kha::graphics2::truetype::StbTruetype_obj::stbtt__tesselate_curve(points,num_points,x0,y0,((x0 + x1) / ((Float)2.0)),((y0 + y1) / ((Float)2.0)),mx,my,objspace_flatness_squared,(n + 1));
HXLINE(1414)			::kha::graphics2::truetype::StbTruetype_obj::stbtt__tesselate_curve(points,num_points,mx,my,((x1 + x2) / ((Float)2.0)),((y1 + y2) / ((Float)2.0)),x2,y2,objspace_flatness_squared,(n + 1));
            		}
            		else {
HXLINE(1416)			::kha::graphics2::truetype::StbTruetype_obj::stbtt__add_point(points,( (int)(num_points->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ),x2,y2);
HXLINE(1417)			num_points->__SetField(HX_("value",71,7f,b8,31),(num_points->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic) + 1),hx::paccDynamic);
            		}
HXLINE(1419)		return 1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(StbTruetype_obj,stbtt__tesselate_curve,return )

::Array< ::Dynamic> StbTruetype_obj::stbtt_FlattenCurves(::Array< ::Dynamic> vertices,int num_verts,Float objspace_flatness, ::kha::graphics2::truetype::VectorOfIntPointer contour_lengths, ::Dynamic num_contours){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_1423_stbtt_FlattenCurves)
HXLINE(1424)		::Array< ::Dynamic> points = null();
HXLINE(1425)		int num_points = 0;
HXLINE(1427)		Float objspace_flatness_squared = (objspace_flatness * objspace_flatness);
HXLINE(1428)		int i;
HXDLIN(1428)		int n = 0;
HXDLIN(1428)		int start = 0;
HXDLIN(1428)		int pass;
HXLINE(1431)		{
HXLINE(1431)			int _g = 0;
HXDLIN(1431)			int _g1 = num_verts;
HXDLIN(1431)			while((_g < _g1)){
HXLINE(1431)				_g = (_g + 1);
HXDLIN(1431)				int i1 = (_g - 1);
HXLINE(1432)				if ((( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i1)) )->type == 1)) {
HXLINE(1433)					n = (n + 1);
            				}
            			}
            		}
HXLINE(1435)		num_contours->__SetField(HX_("value",71,7f,b8,31),n,hx::paccDynamic);
HXLINE(1436)		if ((n == 0)) {
HXLINE(1436)			return null();
            		}
HXLINE(1438)		::Array< int > this1 = ::Array_obj< int >::__new(n);
HXDLIN(1438)		contour_lengths->_hx_set_value(HX_CTX, this1);
HXLINE(1440)		if (hx::IsNull( contour_lengths->value )) {
HXLINE(1441)			num_contours->__SetField(HX_("value",71,7f,b8,31),0,hx::paccDynamic);
HXLINE(1442)			return null();
            		}
HXLINE(1446)		{
HXLINE(1446)			int _g2 = 0;
HXDLIN(1446)			while((_g2 < 2)){
HXLINE(1446)				_g2 = (_g2 + 1);
HXDLIN(1446)				int pass1 = (_g2 - 1);
HXLINE(1447)				Float x = ( (Float)(0) );
HXDLIN(1447)				Float y = ( (Float)(0) );
HXLINE(1448)				if ((pass1 == 1)) {
HXLINE(1449)					::Array< ::Dynamic> this2 = ::Array_obj< ::Dynamic>::__new(num_points);
HXDLIN(1449)					points = this2;
HXLINE(1450)					if (hx::IsNull( points )) {
HXLINE(1451)						contour_lengths->_hx_set_value(HX_CTX, null());
HXLINE(1452)						num_contours->__SetField(HX_("value",71,7f,b8,31),0,hx::paccDynamic);
HXLINE(1453)						return null();
            					}
            					else {
HXLINE(1456)						int _g21 = 0;
HXDLIN(1456)						int _g3 = points->length;
HXDLIN(1456)						while((_g21 < _g3)){
HXLINE(1456)							_g21 = (_g21 + 1);
HXDLIN(1456)							int i2 = (_g21 - 1);
HXLINE(1457)							{
HXLINE(1457)								 ::kha::graphics2::truetype::Stbtt__point val =  ::kha::graphics2::truetype::Stbtt__point_obj::__alloc( HX_CTX );
HXDLIN(1457)								points->__unsafe_set(i2,val);
            							}
            						}
            					}
            				}
HXLINE(1461)				num_points = 0;
HXLINE(1462)				n = -1;
HXLINE(1463)				{
HXLINE(1463)					int _g22 = 0;
HXDLIN(1463)					int _g31 = num_verts;
HXDLIN(1463)					while((_g22 < _g31)){
HXLINE(1463)						_g22 = (_g22 + 1);
HXDLIN(1463)						int i3 = (_g22 - 1);
HXLINE(1464)						switch((int)(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->type)){
            							case (int)1: {
HXLINE(1467)								if ((n >= 0)) {
HXLINE(1468)									contour_lengths->value->__unsafe_set(n,(num_points - start));
            								}
HXLINE(1469)								n = (n + 1);
HXLINE(1470)								start = num_points;
HXLINE(1472)								x = ( (Float)(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->x) );
HXDLIN(1472)								y = ( (Float)(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->y) );
HXLINE(1473)								num_points = (num_points + 1);
HXDLIN(1473)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__add_point(points,(num_points - 1),x,y);
            							}
            							break;
            							case (int)2: {
HXLINE(1475)								x = ( (Float)(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->x) );
HXDLIN(1475)								y = ( (Float)(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->y) );
HXLINE(1476)								num_points = (num_points + 1);
HXDLIN(1476)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__add_point(points,(num_points - 1),x,y);
            							}
            							break;
            							case (int)3: {
HXLINE(1478)								 ::Dynamic num_points_reference =  ::Dynamic(hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("value",71,7f,b8,31),num_points));
HXLINE(1480)								int _hx_tmp = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->cx;
HXDLIN(1480)								int _hx_tmp1 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->cy;
HXLINE(1481)								int _hx_tmp2 = ( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->x;
HXLINE(1479)								::kha::graphics2::truetype::StbTruetype_obj::stbtt__tesselate_curve(points,num_points_reference,x,y,( (Float)(_hx_tmp) ),( (Float)(_hx_tmp1) ),( (Float)(_hx_tmp2) ),( (Float)(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->y) ),objspace_flatness_squared,0);
HXLINE(1483)								num_points = ( (int)(num_points_reference->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE(1484)								x = ( (Float)(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->x) );
HXDLIN(1484)								y = ( (Float)(( ( ::kha::graphics2::truetype::Stbtt_vertex)(_hx_array_unsafe_get(vertices,i3)) )->y) );
            							}
            							break;
            						}
            					}
            				}
HXLINE(1487)				contour_lengths->value->__unsafe_set(n,(num_points - start));
            			}
            		}
HXLINE(1490)		return points;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(StbTruetype_obj,stbtt_FlattenCurves,return )

void StbTruetype_obj::stbtt_Rasterize( ::kha::graphics2::truetype::Stbtt__bitmap result,Float flatness_in_pixels,::Array< ::Dynamic> vertices,int num_verts,Float scale_x,Float scale_y,Float shift_x,Float shift_y,int x_off,int y_off,bool invert){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_1493_stbtt_Rasterize)
HXLINE(1494)		Float scale;
HXDLIN(1494)		if ((scale_x > scale_y)) {
HXLINE(1494)			scale = scale_y;
            		}
            		else {
HXLINE(1494)			scale = scale_x;
            		}
HXLINE(1495)		int winding_count = 0;
HXLINE(1496)		::Array< int > winding_lengths = null();
HXLINE(1497)		 ::Dynamic winding_count_reference =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("value",71,7f,b8,31),winding_count));
HXLINE(1498)		 ::kha::graphics2::truetype::VectorOfIntPointer winding_lengths_reference =  ::kha::graphics2::truetype::VectorOfIntPointer_obj::__alloc( HX_CTX );
HXLINE(1499)		::Array< ::Dynamic> windings = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FlattenCurves(vertices,num_verts,(flatness_in_pixels / scale),winding_lengths_reference,winding_count_reference);
HXLINE(1500)		winding_count = ( (int)(winding_count_reference->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE(1501)		winding_lengths = winding_lengths_reference->value;
HXLINE(1502)		if (hx::IsNotNull( windings )) {
HXLINE(1503)			::kha::graphics2::truetype::StbTruetype_obj::stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(StbTruetype_obj,stbtt_Rasterize,(void))

 ::kha::internal::BytesBlob StbTruetype_obj::stbtt_GetGlyphBitmapSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float scale_x,Float scale_y,Float shift_x,Float shift_y,int glyph, ::kha::graphics2::truetype::Stbtt_temp_region region){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_1507_stbtt_GetGlyphBitmapSubpixel)
HXLINE(1509)		 ::kha::graphics2::truetype::Stbtt__bitmap gbm =  ::kha::graphics2::truetype::Stbtt__bitmap_obj::__alloc( HX_CTX );
HXLINE(1510)		::Array< ::Dynamic> vertices = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphShape(info,glyph);
HXLINE(1511)		int num_verts = vertices->length;
HXLINE(1513)		if ((scale_x == 0)) {
HXLINE(1513)			scale_x = scale_y;
            		}
HXLINE(1514)		if ((scale_y == 0)) {
HXLINE(1515)			if ((scale_x == 0)) {
HXLINE(1515)				return null();
            			}
HXLINE(1516)			scale_y = scale_x;
            		}
HXLINE(1519)		 ::kha::graphics2::truetype::Stbtt_temp_rect rect = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
HXLINE(1508)		int ix0 = rect->x0;
HXDLIN(1508)		int iy0 = rect->y0;
HXDLIN(1508)		int ix1 = rect->x1;
HXDLIN(1508)		int iy1 = rect->y1;
HXLINE(1526)		gbm->w = (ix1 - ix0);
HXLINE(1527)		gbm->h = (iy1 - iy0);
HXLINE(1528)		gbm->_hx_set_pixels(HX_CTX, null());
HXLINE(1530)		region->width = gbm->w;
HXLINE(1531)		region->height = gbm->h;
HXLINE(1532)		region->xoff = ix0;
HXLINE(1533)		region->yoff = iy0;
HXLINE(1535)		bool _hx_tmp;
HXDLIN(1535)		if ((gbm->w != 0)) {
HXLINE(1535)			_hx_tmp = (gbm->h != 0);
            		}
            		else {
HXLINE(1535)			_hx_tmp = false;
            		}
HXDLIN(1535)		if (_hx_tmp) {
HXLINE(1536)			gbm->_hx_set_pixels(HX_CTX, ::kha::internal::BytesBlob_obj::alloc((gbm->w * gbm->h)));
HXLINE(1537)			if (hx::IsNotNull( gbm->pixels )) {
HXLINE(1538)				gbm->stride = gbm->w;
HXLINE(1540)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_Rasterize(gbm,((Float)0.35),vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
            			}
            		}
HXLINE(1543)		return gbm->pixels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(StbTruetype_obj,stbtt_GetGlyphBitmapSubpixel,return )

 ::kha::internal::BytesBlob StbTruetype_obj::stbtt_GetGlyphBitmap( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float scale_x,Float scale_y,int glyph, ::kha::graphics2::truetype::Stbtt_temp_region region){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1547_stbtt_GetGlyphBitmap)
HXDLIN(1547)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,((Float)0.0),((Float)0.0),glyph,region);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(StbTruetype_obj,stbtt_GetGlyphBitmap,return )

void StbTruetype_obj::stbtt_MakeGlyphBitmapSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::internal::BytesBlob output,int output_offset,int out_w,int out_h,int out_stride,Float scale_x,Float scale_y,Float shift_x,Float shift_y,int glyph){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_1550_stbtt_MakeGlyphBitmapSubpixel)
HXLINE(1551)		int ix0 = 0;
HXDLIN(1551)		int iy0 = 0;
HXLINE(1552)		::Array< ::Dynamic> vertices = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphShape(info,glyph);
HXLINE(1553)		int num_verts;
HXDLIN(1553)		if (hx::IsNull( vertices )) {
HXLINE(1553)			num_verts = 0;
            		}
            		else {
HXLINE(1553)			num_verts = vertices->length;
            		}
HXLINE(1554)		 ::kha::graphics2::truetype::Stbtt__bitmap gbm =  ::kha::graphics2::truetype::Stbtt__bitmap_obj::__alloc( HX_CTX );
HXLINE(1556)		 ::kha::graphics2::truetype::Stbtt_temp_rect rect = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
HXLINE(1557)		ix0 = rect->x0;
HXLINE(1558)		iy0 = rect->y0;
HXLINE(1559)		gbm->_hx_set_pixels(HX_CTX, output);
HXLINE(1560)		gbm->pixels_offset = output_offset;
HXLINE(1561)		gbm->w = out_w;
HXLINE(1562)		gbm->h = out_h;
HXLINE(1563)		gbm->stride = out_stride;
HXLINE(1565)		bool _hx_tmp;
HXDLIN(1565)		if ((gbm->w != 0)) {
HXLINE(1565)			_hx_tmp = (gbm->h != 0);
            		}
            		else {
HXLINE(1565)			_hx_tmp = false;
            		}
HXDLIN(1565)		if (_hx_tmp) {
HXLINE(1566)			::kha::graphics2::truetype::StbTruetype_obj::stbtt_Rasterize(gbm,((Float)0.35),vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(StbTruetype_obj,stbtt_MakeGlyphBitmapSubpixel,(void))

void StbTruetype_obj::stbtt_MakeGlyphBitmap( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::internal::BytesBlob output,int output_offset,int out_w,int out_h,int out_stride,Float scale_x,Float scale_y,int glyph){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1570_stbtt_MakeGlyphBitmap)
HXDLIN(1570)		::kha::graphics2::truetype::StbTruetype_obj::stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,((Float)0.0),((Float)0.0),glyph);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(StbTruetype_obj,stbtt_MakeGlyphBitmap,(void))

 ::kha::internal::BytesBlob StbTruetype_obj::stbtt_GetCodepointBitmapSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float scale_x,Float scale_y,Float shift_x,Float shift_y,int codepoint, ::kha::graphics2::truetype::Stbtt_temp_region region){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1574_stbtt_GetCodepointBitmapSubpixel)
HXDLIN(1574)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,codepoint),region);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(StbTruetype_obj,stbtt_GetCodepointBitmapSubpixel,return )

void StbTruetype_obj::stbtt_MakeCodepointBitmapSubpixel( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::internal::BytesBlob output,int output_offset,int out_w,int out_h,int out_stride,Float scale_x,Float scale_y,Float shift_x,Float shift_y,int codepoint){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1578_stbtt_MakeCodepointBitmapSubpixel)
HXDLIN(1578)		::kha::graphics2::truetype::StbTruetype_obj::stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(info,codepoint));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(StbTruetype_obj,stbtt_MakeCodepointBitmapSubpixel,(void))

 ::kha::internal::BytesBlob StbTruetype_obj::stbtt_GetCodepointBitmap( ::kha::graphics2::truetype::Stbtt_fontinfo info,Float scale_x,Float scale_y,int codepoint, ::kha::graphics2::truetype::Stbtt_temp_region region){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1582_stbtt_GetCodepointBitmap)
HXDLIN(1582)		return ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,((Float)0.0),((Float)0.0),codepoint,region);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(StbTruetype_obj,stbtt_GetCodepointBitmap,return )

void StbTruetype_obj::stbtt_MakeCodepointBitmap( ::kha::graphics2::truetype::Stbtt_fontinfo info, ::kha::internal::BytesBlob output,int output_offset,int out_w,int out_h,int out_stride,Float scale_x,Float scale_y,int codepoint){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1586_stbtt_MakeCodepointBitmap)
HXDLIN(1586)		::kha::graphics2::truetype::StbTruetype_obj::stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,((Float)0.0),((Float)0.0),codepoint);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(StbTruetype_obj,stbtt_MakeCodepointBitmap,(void))

int StbTruetype_obj::stbtt_BakeFontBitmap( ::kha::internal::BytesBlob data,int offset,Float pixel_height, ::kha::internal::BytesBlob pixels,int pw,int ph,::Array< int > chars,::Array< ::Dynamic> chardata){
            	HX_GC_STACKFRAME(&_hx_pos_d244f07465627071_1599_stbtt_BakeFontBitmap)
HXLINE(1602)		 ::kha::graphics2::truetype::Stbtt_fontinfo f =  ::kha::graphics2::truetype::Stbtt_fontinfo_obj::__alloc( HX_CTX );
HXLINE(1603)		if (!(::kha::graphics2::truetype::StbTruetype_obj::stbtt_InitFont(f,data,offset))) {
HXLINE(1604)			return -1;
            		}
HXLINE(1601)		int y = 1;
HXDLIN(1601)		int x = y;
HXDLIN(1601)		int bottom_y = 1;
HXLINE(1600)		Float scale = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_ScaleForPixelHeight(f,pixel_height);
HXLINE(1610)		int i = 0;
HXLINE(1611)		{
HXLINE(1611)			int _g = 0;
HXDLIN(1611)			while((_g < chars->length)){
HXLINE(1611)				int index = chars->__get(_g);
HXDLIN(1611)				_g = (_g + 1);
HXLINE(1613)				int g = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(f,index);
HXLINE(1614)				 ::kha::graphics2::truetype::Stbtt_temp_glyph_h_metrics metrics = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphHMetrics(f,g);
HXLINE(1612)				int advance = metrics->advanceWidth;
HXDLIN(1612)				int lsb = metrics->leftSideBearing;
HXLINE(1617)				 ::kha::graphics2::truetype::Stbtt_temp_rect rect = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetGlyphBitmapBox(f,g,scale,scale);
HXLINE(1612)				int x0 = rect->x0;
HXDLIN(1612)				int y0 = rect->y0;
HXDLIN(1612)				int x1 = rect->x1;
HXDLIN(1612)				int y1 = rect->y1;
HXDLIN(1612)				int gw = (x1 - x0);
HXDLIN(1612)				int gh = (y1 - y0);
HXLINE(1624)				if ((((x + gw) + 1) >= pw)) {
HXLINE(1625)					y = bottom_y;
HXDLIN(1625)					x = 1;
            				}
HXLINE(1627)				if ((((y + gh) + 1) >= ph)) {
HXLINE(1628)					return -(i);
            				}
HXLINE(1629)				if (((x + gw) >= pw)) {
HXLINE(1629)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
HXLINE(1630)				if (((y + gh) >= ph)) {
HXLINE(1630)					HX_STACK_DO_THROW(HX_("Error",a8,3b,57,06));
            				}
HXLINE(1631)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i)) )->x0 = x;
HXLINE(1632)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i)) )->y0 = y;
HXLINE(1633)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i)) )->x1 = (x + gw);
HXLINE(1634)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i)) )->y1 = (y + gh);
HXLINE(1635)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i)) )->xadvance = (scale * ( (Float)(advance) ));
HXLINE(1636)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i)) )->xoff = ( (Float)(x0) );
HXLINE(1637)				( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i)) )->yoff = ( (Float)(y0) );
HXLINE(1638)				x = ((x + gw) + 1);
HXLINE(1639)				if ((((y + gh) + 1) > bottom_y)) {
HXLINE(1640)					bottom_y = ((y + gh) + 1);
            				}
HXLINE(1641)				i = (i + 1);
            			}
            		}
HXLINE(1643)		{
HXLINE(1643)			int _g1 = 0;
HXDLIN(1643)			int _g2 = (pw * ph);
HXDLIN(1643)			while((_g1 < _g2)){
HXLINE(1643)				_g1 = (_g1 + 1);
HXDLIN(1643)				int i1 = (_g1 - 1);
HXLINE(1644)				pixels->writeU8(i1,0);
            			}
            		}
HXLINE(1645)		i = 0;
HXLINE(1646)		 ::kha::graphics2::truetype::Stbtt_bakedchar ch;
HXLINE(1647)		{
HXLINE(1647)			int _g3 = 0;
HXDLIN(1647)			while((_g3 < chars->length)){
HXLINE(1647)				int index1 = chars->__get(_g3);
HXDLIN(1647)				_g3 = (_g3 + 1);
HXLINE(1648)				int g1 = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_FindGlyphIndex(f,index1);
HXLINE(1649)				ch = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,i)) );
HXLINE(1650)				::kha::graphics2::truetype::StbTruetype_obj::stbtt_MakeGlyphBitmap(f,pixels,(ch->x0 + (ch->y0 * pw)),(ch->x1 - ch->x0),(ch->y1 - ch->y0),pw,scale,scale,g1);
HXLINE(1651)				i = (i + 1);
            			}
            		}
HXLINE(1653)		return bottom_y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(StbTruetype_obj,stbtt_BakeFontBitmap,return )

void StbTruetype_obj::stbtt_GetBakedQuad(::Array< ::Dynamic> chardata,int pw,int ph,int char_index, ::Dynamic xpos, ::Dynamic ypos, ::kha::graphics2::truetype::Stbtt_aligned_quad q,bool opengl_fillrule){
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_1656_stbtt_GetBakedQuad)
HXLINE(1657)		Float d3d_bias;
HXDLIN(1657)		if (opengl_fillrule) {
HXLINE(1657)			d3d_bias = ( (Float)(0) );
            		}
            		else {
HXLINE(1657)			d3d_bias = ((Float)-0.5);
            		}
HXLINE(1658)		Float ipw = (((Float)1.0) / ( (Float)(pw) ));
HXDLIN(1658)		Float iph = (((Float)1.0) / ( (Float)(ph) ));
HXLINE(1659)		 ::kha::graphics2::truetype::Stbtt_bakedchar b = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chardata,char_index)) );
HXLINE(1660)		int round_x = ::Math_obj::floor(( (Float)(((xpos->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic) + b->xoff) + ((Float)0.5))) ));
HXLINE(1661)		int round_y = ::Math_obj::floor(( (Float)(((ypos->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic) + b->yoff) + ((Float)0.5))) ));
HXLINE(1663)		q->x0 = (round_x + d3d_bias);
HXLINE(1664)		q->y0 = (round_y + d3d_bias);
HXLINE(1665)		q->x1 = (((round_x + b->x1) - b->x0) + d3d_bias);
HXLINE(1666)		q->y1 = (((round_y + b->y1) - b->y0) + d3d_bias);
HXLINE(1668)		q->s0 = (( (Float)(b->x0) ) * ipw);
HXLINE(1669)		q->t0 = (( (Float)(b->y0) ) * iph);
HXLINE(1670)		q->s1 = (( (Float)(b->x1) ) * ipw);
HXLINE(1671)		q->t1 = (( (Float)(b->y1) ) * iph);
HXLINE(1673)		 ::Dynamic xpos1 = xpos;
HXDLIN(1673)		xpos1->__SetField(HX_("value",71,7f,b8,31),(xpos1->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic) + b->xadvance),hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(StbTruetype_obj,stbtt_GetBakedQuad,(void))


StbTruetype_obj::StbTruetype_obj()
{
}

bool StbTruetype_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"ttBYTE") ) { outValue = ttBYTE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ttCHAR") ) { outValue = ttCHAR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ttLONG") ) { outValue = ttLONG_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ttSHORT") ) { outValue = ttSHORT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ttULONG") ) { outValue = ttULONG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ttFixed") ) { outValue = ttFixed_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ttUSHORT") ) { outValue = ttUSHORT_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stbtt_tag") ) { outValue = stbtt_tag_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stbtt_tag4") ) { outValue = stbtt_tag4_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"STBTT_assert") ) { outValue = STBTT_assert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyVertices") ) { outValue = copyVertices_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stbtt__isfont") ) { outValue = stbtt__isfont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stbtt_InitFont") ) { outValue = stbtt_InitFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"STBTT__COMPARE") ) { outValue = STBTT__COMPARE_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"stbtt_setvertex") ) { outValue = stbtt_setvertex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_Rasterize") ) { outValue = stbtt_Rasterize_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"STBTT_POINT_SIZE") ) { outValue = STBTT_POINT_SIZE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__rasterize") ) { outValue = stbtt__rasterize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__add_point") ) { outValue = stbtt__add_point_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stbtt__find_table") ) { outValue = stbtt__find_table_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBox") ) { outValue = stbtt_GetGlyphBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__new_active") ) { outValue = stbtt__new_active_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__sort_edges") ) { outValue = stbtt__sort_edges_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stbtt_IsGlyphEmpty") ) { outValue = stbtt_IsGlyphEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__close_shape") ) { outValue = stbtt__close_shape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetBakedQuad") ) { outValue = stbtt_GetBakedQuad_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphShape") ) { outValue = stbtt_GetGlyphShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_FlattenCurves") ) { outValue = stbtt_FlattenCurves_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"stbtt_FindGlyphIndex") ) { outValue = stbtt_FindGlyphIndex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__GetGlyfOffset") ) { outValue = stbtt__GetGlyfOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBitmap") ) { outValue = stbtt_GetGlyphBitmap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_BakeFontBitmap") ) { outValue = stbtt_BakeFontBitmap_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBox") ) { outValue = stbtt_GetCodepointBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetFontVMetrics") ) { outValue = stbtt_GetFontVMetrics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_MakeGlyphBitmap") ) { outValue = stbtt_MakeGlyphBitmap_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphHMetrics") ) { outValue = stbtt_GetGlyphHMetrics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__tesselate_curve") ) { outValue = stbtt__tesselate_curve_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointShape") ) { outValue = stbtt_GetCodepointShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBitmapBox") ) { outValue = stbtt_GetGlyphBitmapBox_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"stbtt_GetFontBoundingBox") ) { outValue = stbtt_GetFontBoundingBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBitmap") ) { outValue = stbtt_GetCodepointBitmap_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphKernAdvance") ) { outValue = stbtt_GetGlyphKernAdvance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_ScaleForPixelHeight") ) { outValue = stbtt_ScaleForPixelHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_MakeCodepointBitmap") ) { outValue = stbtt_MakeCodepointBitmap_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointHMetrics") ) { outValue = stbtt_GetCodepointHMetrics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__handle_clipped_edge") ) { outValue = stbtt__handle_clipped_edge_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__sort_edges_ins_sort") ) { outValue = stbtt__sort_edges_ins_sort_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"stbtt_GetFontOffsetForIndex") ) { outValue = stbtt_GetFontOffsetForIndex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBitmapBox") ) { outValue = stbtt_GetCodepointBitmapBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__sort_edges_quicksort") ) { outValue = stbtt__sort_edges_quicksort_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"stbtt__fill_active_edges_new") ) { outValue = stbtt__fill_active_edges_new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBitmapSubpixel") ) { outValue = stbtt_GetGlyphBitmapSubpixel_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointKernAdvance") ) { outValue = stbtt_GetCodepointKernAdvance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt__rasterize_sorted_edges") ) { outValue = stbtt__rasterize_sorted_edges_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_MakeGlyphBitmapSubpixel") ) { outValue = stbtt_MakeGlyphBitmapSubpixel_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"stbtt_ScaleForMappingEmToPixels") ) { outValue = stbtt_ScaleForMappingEmToPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stbtt_GetGlyphBitmapBoxSubpixel") ) { outValue = stbtt_GetGlyphBitmapBoxSubpixel_dyn(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBitmapSubpixel") ) { outValue = stbtt_GetCodepointBitmapSubpixel_dyn(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"stbtt_MakeCodepointBitmapSubpixel") ) { outValue = stbtt_MakeCodepointBitmapSubpixel_dyn(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"stbtt_GetCodepointBitmapBoxSubpixel") ) { outValue = stbtt_GetCodepointBitmapBoxSubpixel_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *StbTruetype_obj_sMemberStorageInfo = 0;
static hx::StaticInfo StbTruetype_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_vmove,HX_("STBTT_vmove",c9,34,f2,e1)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_vline,HX_("STBTT_vline",ac,69,44,e1)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_vcurve,HX_("STBTT_vcurve",f7,7b,ee,13)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_DONTCARE,HX_("STBTT_MACSTYLE_DONTCARE",01,cf,41,cc)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_BOLD,HX_("STBTT_MACSTYLE_BOLD",24,22,1c,92)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_ITALIC,HX_("STBTT_MACSTYLE_ITALIC",4f,59,45,11)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_UNDERSCORE,HX_("STBTT_MACSTYLE_UNDERSCORE",19,f9,88,54)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MACSTYLE_NONE,HX_("STBTT_MACSTYLE_NONE",57,b3,0a,9a)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_PLATFORM_ID_UNICODE,HX_("STBTT_PLATFORM_ID_UNICODE",67,d0,88,e4)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_PLATFORM_ID_MAC,HX_("STBTT_PLATFORM_ID_MAC",d9,94,7e,ed)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_PLATFORM_ID_ISO,HX_("STBTT_PLATFORM_ID_ISO",8f,9b,7b,ed)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_PLATFORM_ID_MICROSOFT,HX_("STBTT_PLATFORM_ID_MICROSOFT",b8,1d,ef,0e)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_0,HX_("STBTT_UNICODE_EID_UNICODE_1_0",81,8f,4b,15)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_1,HX_("STBTT_UNICODE_EID_UNICODE_1_1",82,8f,4b,15)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_ISO_10646,HX_("STBTT_UNICODE_EID_ISO_10646",40,f7,d0,91)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_BMP,HX_("STBTT_UNICODE_EID_UNICODE_2_0_BMP",e8,f7,02,13)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_FULL,HX_("STBTT_UNICODE_EID_UNICODE_2_0_FULL",6c,dc,40,92)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_EID_SYMBOL,HX_("STBTT_MS_EID_SYMBOL",52,05,3b,46)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_EID_UNICODE_BMP,HX_("STBTT_MS_EID_UNICODE_BMP",69,b0,b5,48)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_EID_SHIFTJIS,HX_("STBTT_MS_EID_SHIFTJIS",0c,48,91,83)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_EID_UNICODE_FULL,HX_("STBTT_MS_EID_UNICODE_FULL",cb,94,ef,58)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_ROMAN,HX_("STBTT_MAC_EID_ROMAN",b0,d0,49,4b)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_ARABIC,HX_("STBTT_MAC_EID_ARABIC",39,93,81,7b)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_JAPANESE,HX_("STBTT_MAC_EID_JAPANESE",fe,66,94,3c)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_HEBREW,HX_("STBTT_MAC_EID_HEBREW",8c,e6,80,cc)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_CHINESE_TRAD,HX_("STBTT_MAC_EID_CHINESE_TRAD",a0,9c,2f,3e)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_GREEK,HX_("STBTT_MAC_EID_GREEK",73,04,d7,f7)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_KOREAN,HX_("STBTT_MAC_EID_KOREAN",d1,51,1e,cc)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_EID_RUSSIAN,HX_("STBTT_MAC_EID_RUSSIAN",c6,46,51,f4)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_ENGLISH,HX_("STBTT_MS_LANG_ENGLISH",fa,ac,a2,c4)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_ITALIAN,HX_("STBTT_MS_LANG_ITALIAN",8a,27,b5,5c)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_CHINESE,HX_("STBTT_MS_LANG_CHINESE",77,22,70,33)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_JAPANESE,HX_("STBTT_MS_LANG_JAPANESE",c7,39,2b,92)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_DUTCH,HX_("STBTT_MS_LANG_DUTCH",72,d0,e3,00)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_KOREAN,HX_("STBTT_MS_LANG_KOREAN",5a,b0,39,1d)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_FRENCH,HX_("STBTT_MS_LANG_FRENCH",f0,af,13,cf)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_RUSSIAN,HX_("STBTT_MS_LANG_RUSSIAN",1d,a0,28,9b)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_GERMAN,HX_("STBTT_MS_LANG_GERMAN",dc,83,d0,c1)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_SPANISH,HX_("STBTT_MS_LANG_SPANISH",7e,d6,70,64)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_HEBREW,HX_("STBTT_MS_LANG_HEBREW",15,45,9c,1d)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MS_LANG_SWEDISH,HX_("STBTT_MS_LANG_SWEDISH",e5,8c,ee,77)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_ENGLISH,HX_("STBTT_MAC_LANG_ENGLISH",8d,78,fe,bb)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_JAPANESE,HX_("STBTT_MAC_LANG_JAPANESE",d4,8e,21,0b)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_ARABIC,HX_("STBTT_MAC_LANG_ARABIC",8f,f9,e7,d6)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_KOREAN,HX_("STBTT_MAC_LANG_KOREAN",27,b8,84,27)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_DUTCH,HX_("STBTT_MAC_LANG_DUTCH",45,81,53,78)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_RUSSIAN,HX_("STBTT_MAC_LANG_RUSSIAN",b0,6b,84,92)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_FRENCH,HX_("STBTT_MAC_LANG_FRENCH",bd,b7,5e,d9)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_SPANISH,HX_("STBTT_MAC_LANG_SPANISH",11,a2,cc,5b)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_GERMAN,HX_("STBTT_MAC_LANG_GERMAN",a9,8b,1b,cc)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_SWEDISH,HX_("STBTT_MAC_LANG_SWEDISH",78,58,4a,6f)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_HEBREW,HX_("STBTT_MAC_LANG_HEBREW",e2,4c,e7,27)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_CHINESE_SIMPLIFIED,HX_("STBTT_MAC_LANG_CHINESE_SIMPLIFIED",ed,7a,bc,aa)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_ITALIAN,HX_("STBTT_MAC_LANG_ITALIAN",1d,f3,10,54)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAC_LANG_CHINESE_TRAD,HX_("STBTT_MAC_LANG_CHINESE_TRAD",76,67,9c,af)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_MAX_OVERSAMPLE,HX_("STBTT_MAX_OVERSAMPLE",17,d3,91,a6)},
	{hx::fsInt,(void *) &StbTruetype_obj::STBTT_RASTERIZER_VERSION,HX_("STBTT_RASTERIZER_VERSION",92,1f,d8,5e)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void StbTruetype_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_vmove,"STBTT_vmove");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_vline,"STBTT_vline");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_vcurve,"STBTT_vcurve");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_DONTCARE,"STBTT_MACSTYLE_DONTCARE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_BOLD,"STBTT_MACSTYLE_BOLD");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_ITALIC,"STBTT_MACSTYLE_ITALIC");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_UNDERSCORE,"STBTT_MACSTYLE_UNDERSCORE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_NONE,"STBTT_MACSTYLE_NONE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_UNICODE,"STBTT_PLATFORM_ID_UNICODE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_MAC,"STBTT_PLATFORM_ID_MAC");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_ISO,"STBTT_PLATFORM_ID_ISO");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_MICROSOFT,"STBTT_PLATFORM_ID_MICROSOFT");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_0,"STBTT_UNICODE_EID_UNICODE_1_0");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_1,"STBTT_UNICODE_EID_UNICODE_1_1");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_ISO_10646,"STBTT_UNICODE_EID_ISO_10646");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_BMP,"STBTT_UNICODE_EID_UNICODE_2_0_BMP");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_FULL,"STBTT_UNICODE_EID_UNICODE_2_0_FULL");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_SYMBOL,"STBTT_MS_EID_SYMBOL");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_UNICODE_BMP,"STBTT_MS_EID_UNICODE_BMP");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_SHIFTJIS,"STBTT_MS_EID_SHIFTJIS");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_UNICODE_FULL,"STBTT_MS_EID_UNICODE_FULL");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_ROMAN,"STBTT_MAC_EID_ROMAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_ARABIC,"STBTT_MAC_EID_ARABIC");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_JAPANESE,"STBTT_MAC_EID_JAPANESE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_HEBREW,"STBTT_MAC_EID_HEBREW");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_CHINESE_TRAD,"STBTT_MAC_EID_CHINESE_TRAD");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_GREEK,"STBTT_MAC_EID_GREEK");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_KOREAN,"STBTT_MAC_EID_KOREAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_RUSSIAN,"STBTT_MAC_EID_RUSSIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_ENGLISH,"STBTT_MS_LANG_ENGLISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_ITALIAN,"STBTT_MS_LANG_ITALIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_CHINESE,"STBTT_MS_LANG_CHINESE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_JAPANESE,"STBTT_MS_LANG_JAPANESE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_DUTCH,"STBTT_MS_LANG_DUTCH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_KOREAN,"STBTT_MS_LANG_KOREAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_FRENCH,"STBTT_MS_LANG_FRENCH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_RUSSIAN,"STBTT_MS_LANG_RUSSIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_GERMAN,"STBTT_MS_LANG_GERMAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_SPANISH,"STBTT_MS_LANG_SPANISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_HEBREW,"STBTT_MS_LANG_HEBREW");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_SWEDISH,"STBTT_MS_LANG_SWEDISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ENGLISH,"STBTT_MAC_LANG_ENGLISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_JAPANESE,"STBTT_MAC_LANG_JAPANESE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ARABIC,"STBTT_MAC_LANG_ARABIC");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_KOREAN,"STBTT_MAC_LANG_KOREAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_DUTCH,"STBTT_MAC_LANG_DUTCH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_RUSSIAN,"STBTT_MAC_LANG_RUSSIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_FRENCH,"STBTT_MAC_LANG_FRENCH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_SPANISH,"STBTT_MAC_LANG_SPANISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_GERMAN,"STBTT_MAC_LANG_GERMAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_SWEDISH,"STBTT_MAC_LANG_SWEDISH");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_HEBREW,"STBTT_MAC_LANG_HEBREW");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_CHINESE_SIMPLIFIED,"STBTT_MAC_LANG_CHINESE_SIMPLIFIED");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ITALIAN,"STBTT_MAC_LANG_ITALIAN");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_CHINESE_TRAD,"STBTT_MAC_LANG_CHINESE_TRAD");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_MAX_OVERSAMPLE,"STBTT_MAX_OVERSAMPLE");
	HX_MARK_MEMBER_NAME(StbTruetype_obj::STBTT_RASTERIZER_VERSION,"STBTT_RASTERIZER_VERSION");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StbTruetype_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_vmove,"STBTT_vmove");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_vline,"STBTT_vline");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_vcurve,"STBTT_vcurve");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_DONTCARE,"STBTT_MACSTYLE_DONTCARE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_BOLD,"STBTT_MACSTYLE_BOLD");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_ITALIC,"STBTT_MACSTYLE_ITALIC");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_UNDERSCORE,"STBTT_MACSTYLE_UNDERSCORE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MACSTYLE_NONE,"STBTT_MACSTYLE_NONE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_UNICODE,"STBTT_PLATFORM_ID_UNICODE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_MAC,"STBTT_PLATFORM_ID_MAC");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_ISO,"STBTT_PLATFORM_ID_ISO");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_PLATFORM_ID_MICROSOFT,"STBTT_PLATFORM_ID_MICROSOFT");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_0,"STBTT_UNICODE_EID_UNICODE_1_0");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_1_1,"STBTT_UNICODE_EID_UNICODE_1_1");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_ISO_10646,"STBTT_UNICODE_EID_ISO_10646");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_BMP,"STBTT_UNICODE_EID_UNICODE_2_0_BMP");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_UNICODE_EID_UNICODE_2_0_FULL,"STBTT_UNICODE_EID_UNICODE_2_0_FULL");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_SYMBOL,"STBTT_MS_EID_SYMBOL");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_UNICODE_BMP,"STBTT_MS_EID_UNICODE_BMP");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_SHIFTJIS,"STBTT_MS_EID_SHIFTJIS");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_EID_UNICODE_FULL,"STBTT_MS_EID_UNICODE_FULL");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_ROMAN,"STBTT_MAC_EID_ROMAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_ARABIC,"STBTT_MAC_EID_ARABIC");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_JAPANESE,"STBTT_MAC_EID_JAPANESE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_HEBREW,"STBTT_MAC_EID_HEBREW");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_CHINESE_TRAD,"STBTT_MAC_EID_CHINESE_TRAD");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_GREEK,"STBTT_MAC_EID_GREEK");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_KOREAN,"STBTT_MAC_EID_KOREAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_EID_RUSSIAN,"STBTT_MAC_EID_RUSSIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_ENGLISH,"STBTT_MS_LANG_ENGLISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_ITALIAN,"STBTT_MS_LANG_ITALIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_CHINESE,"STBTT_MS_LANG_CHINESE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_JAPANESE,"STBTT_MS_LANG_JAPANESE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_DUTCH,"STBTT_MS_LANG_DUTCH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_KOREAN,"STBTT_MS_LANG_KOREAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_FRENCH,"STBTT_MS_LANG_FRENCH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_RUSSIAN,"STBTT_MS_LANG_RUSSIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_GERMAN,"STBTT_MS_LANG_GERMAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_SPANISH,"STBTT_MS_LANG_SPANISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_HEBREW,"STBTT_MS_LANG_HEBREW");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MS_LANG_SWEDISH,"STBTT_MS_LANG_SWEDISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ENGLISH,"STBTT_MAC_LANG_ENGLISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_JAPANESE,"STBTT_MAC_LANG_JAPANESE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ARABIC,"STBTT_MAC_LANG_ARABIC");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_KOREAN,"STBTT_MAC_LANG_KOREAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_DUTCH,"STBTT_MAC_LANG_DUTCH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_RUSSIAN,"STBTT_MAC_LANG_RUSSIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_FRENCH,"STBTT_MAC_LANG_FRENCH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_SPANISH,"STBTT_MAC_LANG_SPANISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_GERMAN,"STBTT_MAC_LANG_GERMAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_SWEDISH,"STBTT_MAC_LANG_SWEDISH");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_HEBREW,"STBTT_MAC_LANG_HEBREW");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_CHINESE_SIMPLIFIED,"STBTT_MAC_LANG_CHINESE_SIMPLIFIED");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_ITALIAN,"STBTT_MAC_LANG_ITALIAN");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAC_LANG_CHINESE_TRAD,"STBTT_MAC_LANG_CHINESE_TRAD");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_MAX_OVERSAMPLE,"STBTT_MAX_OVERSAMPLE");
	HX_VISIT_MEMBER_NAME(StbTruetype_obj::STBTT_RASTERIZER_VERSION,"STBTT_RASTERIZER_VERSION");
};

#endif

hx::Class StbTruetype_obj::__mClass;

static ::String StbTruetype_obj_sStaticFields[] = {
	HX_("STBTT_assert",44,e2,7c,e3),
	HX_("STBTT_POINT_SIZE",ee,9c,31,9b),
	HX_("STBTT_vmove",c9,34,f2,e1),
	HX_("STBTT_vline",ac,69,44,e1),
	HX_("STBTT_vcurve",f7,7b,ee,13),
	HX_("STBTT_MACSTYLE_DONTCARE",01,cf,41,cc),
	HX_("STBTT_MACSTYLE_BOLD",24,22,1c,92),
	HX_("STBTT_MACSTYLE_ITALIC",4f,59,45,11),
	HX_("STBTT_MACSTYLE_UNDERSCORE",19,f9,88,54),
	HX_("STBTT_MACSTYLE_NONE",57,b3,0a,9a),
	HX_("STBTT_PLATFORM_ID_UNICODE",67,d0,88,e4),
	HX_("STBTT_PLATFORM_ID_MAC",d9,94,7e,ed),
	HX_("STBTT_PLATFORM_ID_ISO",8f,9b,7b,ed),
	HX_("STBTT_PLATFORM_ID_MICROSOFT",b8,1d,ef,0e),
	HX_("STBTT_UNICODE_EID_UNICODE_1_0",81,8f,4b,15),
	HX_("STBTT_UNICODE_EID_UNICODE_1_1",82,8f,4b,15),
	HX_("STBTT_UNICODE_EID_ISO_10646",40,f7,d0,91),
	HX_("STBTT_UNICODE_EID_UNICODE_2_0_BMP",e8,f7,02,13),
	HX_("STBTT_UNICODE_EID_UNICODE_2_0_FULL",6c,dc,40,92),
	HX_("STBTT_MS_EID_SYMBOL",52,05,3b,46),
	HX_("STBTT_MS_EID_UNICODE_BMP",69,b0,b5,48),
	HX_("STBTT_MS_EID_SHIFTJIS",0c,48,91,83),
	HX_("STBTT_MS_EID_UNICODE_FULL",cb,94,ef,58),
	HX_("STBTT_MAC_EID_ROMAN",b0,d0,49,4b),
	HX_("STBTT_MAC_EID_ARABIC",39,93,81,7b),
	HX_("STBTT_MAC_EID_JAPANESE",fe,66,94,3c),
	HX_("STBTT_MAC_EID_HEBREW",8c,e6,80,cc),
	HX_("STBTT_MAC_EID_CHINESE_TRAD",a0,9c,2f,3e),
	HX_("STBTT_MAC_EID_GREEK",73,04,d7,f7),
	HX_("STBTT_MAC_EID_KOREAN",d1,51,1e,cc),
	HX_("STBTT_MAC_EID_RUSSIAN",c6,46,51,f4),
	HX_("STBTT_MS_LANG_ENGLISH",fa,ac,a2,c4),
	HX_("STBTT_MS_LANG_ITALIAN",8a,27,b5,5c),
	HX_("STBTT_MS_LANG_CHINESE",77,22,70,33),
	HX_("STBTT_MS_LANG_JAPANESE",c7,39,2b,92),
	HX_("STBTT_MS_LANG_DUTCH",72,d0,e3,00),
	HX_("STBTT_MS_LANG_KOREAN",5a,b0,39,1d),
	HX_("STBTT_MS_LANG_FRENCH",f0,af,13,cf),
	HX_("STBTT_MS_LANG_RUSSIAN",1d,a0,28,9b),
	HX_("STBTT_MS_LANG_GERMAN",dc,83,d0,c1),
	HX_("STBTT_MS_LANG_SPANISH",7e,d6,70,64),
	HX_("STBTT_MS_LANG_HEBREW",15,45,9c,1d),
	HX_("STBTT_MS_LANG_SWEDISH",e5,8c,ee,77),
	HX_("STBTT_MAC_LANG_ENGLISH",8d,78,fe,bb),
	HX_("STBTT_MAC_LANG_JAPANESE",d4,8e,21,0b),
	HX_("STBTT_MAC_LANG_ARABIC",8f,f9,e7,d6),
	HX_("STBTT_MAC_LANG_KOREAN",27,b8,84,27),
	HX_("STBTT_MAC_LANG_DUTCH",45,81,53,78),
	HX_("STBTT_MAC_LANG_RUSSIAN",b0,6b,84,92),
	HX_("STBTT_MAC_LANG_FRENCH",bd,b7,5e,d9),
	HX_("STBTT_MAC_LANG_SPANISH",11,a2,cc,5b),
	HX_("STBTT_MAC_LANG_GERMAN",a9,8b,1b,cc),
	HX_("STBTT_MAC_LANG_SWEDISH",78,58,4a,6f),
	HX_("STBTT_MAC_LANG_HEBREW",e2,4c,e7,27),
	HX_("STBTT_MAC_LANG_CHINESE_SIMPLIFIED",ed,7a,bc,aa),
	HX_("STBTT_MAC_LANG_ITALIAN",1d,f3,10,54),
	HX_("STBTT_MAC_LANG_CHINESE_TRAD",76,67,9c,af),
	HX_("STBTT_MAX_OVERSAMPLE",17,d3,91,a6),
	HX_("STBTT_RASTERIZER_VERSION",92,1f,d8,5e),
	HX_("ttBYTE",88,0c,c5,57),
	HX_("ttCHAR",56,4c,61,58),
	HX_("ttUSHORT",67,ed,00,b9),
	HX_("ttSHORT",dc,66,35,33),
	HX_("ttULONG",d1,66,a7,5c),
	HX_("ttLONG",fc,92,59,5e),
	HX_("ttFixed",d4,13,ef,cc),
	HX_("stbtt_tag4",78,98,4e,15),
	HX_("stbtt_tag",3c,1c,8a,03),
	HX_("stbtt__isfont",3a,63,fa,4a),
	HX_("stbtt__find_table",49,81,8d,23),
	HX_("stbtt_GetFontOffsetForIndex",a3,34,dd,4b),
	HX_("stbtt_InitFont",fd,73,a3,2a),
	HX_("stbtt_FindGlyphIndex",dd,ec,a8,16),
	HX_("stbtt_GetCodepointShape",96,c0,5d,8e),
	HX_("stbtt_setvertex",e8,33,c6,2e),
	HX_("stbtt__GetGlyfOffset",1a,16,cf,a2),
	HX_("stbtt_GetGlyphBox",37,1a,fa,10),
	HX_("stbtt_GetCodepointBox",40,e4,cd,0e),
	HX_("stbtt_IsGlyphEmpty",c9,03,2d,3d),
	HX_("stbtt__close_shape",f9,7b,95,d8),
	HX_("copyVertices",ce,74,ee,65),
	HX_("stbtt_GetGlyphShape",4d,a2,7c,9c),
	HX_("stbtt_GetGlyphHMetrics",0f,2b,7b,b8),
	HX_("stbtt_GetGlyphKernAdvance",78,83,cc,d4),
	HX_("stbtt_GetCodepointKernAdvance",81,fe,f6,44),
	HX_("stbtt_GetCodepointHMetrics",66,60,e1,6d),
	HX_("stbtt_GetFontVMetrics",d4,cf,e5,37),
	HX_("stbtt_GetFontBoundingBox",00,04,72,bc),
	HX_("stbtt_ScaleForPixelHeight",70,94,c5,e8),
	HX_("stbtt_ScaleForMappingEmToPixels",e1,c5,40,2b),
	HX_("stbtt_GetGlyphBitmapBoxSubpixel",ae,bb,41,b2),
	HX_("stbtt_GetGlyphBitmapBox",88,8a,20,e1),
	HX_("stbtt_GetCodepointBitmapBoxSubpixel",77,a3,3b,e4),
	HX_("stbtt_GetCodepointBitmapBox",51,01,29,e5),
	HX_("stbtt__new_active",06,90,71,1c),
	HX_("stbtt__handle_clipped_edge",d3,7c,f0,de),
	HX_("stbtt__fill_active_edges_new",19,60,2c,d2),
	HX_("stbtt__rasterize_sorted_edges",dd,61,9c,16),
	HX_("STBTT__COMPARE",04,3d,ab,da),
	HX_("stbtt__sort_edges_ins_sort",78,f0,11,53),
	HX_("stbtt__sort_edges_quicksort",c2,9b,91,e5),
	HX_("stbtt__sort_edges",b6,f7,1b,b6),
	HX_("stbtt__rasterize",16,cf,6e,35),
	HX_("stbtt__add_point",91,56,2a,5d),
	HX_("stbtt__tesselate_curve",e9,32,80,36),
	HX_("stbtt_FlattenCurves",0a,18,14,fb),
	HX_("stbtt_Rasterize",39,6c,89,22),
	HX_("stbtt_GetGlyphBitmapSubpixel",69,7b,d8,67),
	HX_("stbtt_GetGlyphBitmap",43,97,73,24),
	HX_("stbtt_MakeGlyphBitmapSubpixel",55,b8,15,a0),
	HX_("stbtt_MakeGlyphBitmap",2f,08,34,88),
	HX_("stbtt_GetCodepointBitmapSubpixel",00,cc,1f,41),
	HX_("stbtt_MakeCodepointBitmapSubpixel",ec,ee,3b,c9),
	HX_("stbtt_GetCodepointBitmap",da,f8,8c,d7),
	HX_("stbtt_MakeCodepointBitmap",c6,4f,d6,de),
	HX_("stbtt_BakeFontBitmap",15,7f,85,c2),
	HX_("stbtt_GetBakedQuad",1a,c6,35,46),
	::String(null())
};

void StbTruetype_obj::__register()
{
	StbTruetype_obj _hx_dummy;
	StbTruetype_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.graphics2.truetype.StbTruetype",14,96,db,79);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StbTruetype_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StbTruetype_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StbTruetype_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< StbTruetype_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StbTruetype_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StbTruetype_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StbTruetype_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StbTruetype_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_185_boot)
HXDLIN( 185)		STBTT_vmove = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_186_boot)
HXDLIN( 186)		STBTT_vline = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_187_boot)
HXDLIN( 187)		STBTT_vcurve = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_189_boot)
HXDLIN( 189)		STBTT_MACSTYLE_DONTCARE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_190_boot)
HXDLIN( 190)		STBTT_MACSTYLE_BOLD = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_191_boot)
HXDLIN( 191)		STBTT_MACSTYLE_ITALIC = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_192_boot)
HXDLIN( 192)		STBTT_MACSTYLE_UNDERSCORE = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_193_boot)
HXDLIN( 193)		STBTT_MACSTYLE_NONE = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_196_boot)
HXDLIN( 196)		STBTT_PLATFORM_ID_UNICODE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_197_boot)
HXDLIN( 197)		STBTT_PLATFORM_ID_MAC = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_198_boot)
HXDLIN( 198)		STBTT_PLATFORM_ID_ISO = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_199_boot)
HXDLIN( 199)		STBTT_PLATFORM_ID_MICROSOFT = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_202_boot)
HXDLIN( 202)		STBTT_UNICODE_EID_UNICODE_1_0 = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_203_boot)
HXDLIN( 203)		STBTT_UNICODE_EID_UNICODE_1_1 = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_204_boot)
HXDLIN( 204)		STBTT_UNICODE_EID_ISO_10646 = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_205_boot)
HXDLIN( 205)		STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_206_boot)
HXDLIN( 206)		STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_209_boot)
HXDLIN( 209)		STBTT_MS_EID_SYMBOL = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_210_boot)
HXDLIN( 210)		STBTT_MS_EID_UNICODE_BMP = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_211_boot)
HXDLIN( 211)		STBTT_MS_EID_SHIFTJIS = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_212_boot)
HXDLIN( 212)		STBTT_MS_EID_UNICODE_FULL = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_215_boot)
HXDLIN( 215)		STBTT_MAC_EID_ROMAN = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_216_boot)
HXDLIN( 216)		STBTT_MAC_EID_ARABIC = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_217_boot)
HXDLIN( 217)		STBTT_MAC_EID_JAPANESE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_218_boot)
HXDLIN( 218)		STBTT_MAC_EID_HEBREW = 5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_219_boot)
HXDLIN( 219)		STBTT_MAC_EID_CHINESE_TRAD = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_220_boot)
HXDLIN( 220)		STBTT_MAC_EID_GREEK = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_221_boot)
HXDLIN( 221)		STBTT_MAC_EID_KOREAN = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_222_boot)
HXDLIN( 222)		STBTT_MAC_EID_RUSSIAN = 7;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_226_boot)
HXDLIN( 226)		STBTT_MS_LANG_ENGLISH = 1033;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_227_boot)
HXDLIN( 227)		STBTT_MS_LANG_ITALIAN = 1040;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_228_boot)
HXDLIN( 228)		STBTT_MS_LANG_CHINESE = 2052;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_229_boot)
HXDLIN( 229)		STBTT_MS_LANG_JAPANESE = 1041;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_230_boot)
HXDLIN( 230)		STBTT_MS_LANG_DUTCH = 1043;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_231_boot)
HXDLIN( 231)		STBTT_MS_LANG_KOREAN = 1042;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_232_boot)
HXDLIN( 232)		STBTT_MS_LANG_FRENCH = 1036;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_233_boot)
HXDLIN( 233)		STBTT_MS_LANG_RUSSIAN = 1049;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_234_boot)
HXDLIN( 234)		STBTT_MS_LANG_GERMAN = 1031;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_235_boot)
HXDLIN( 235)		STBTT_MS_LANG_SPANISH = 1033;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_236_boot)
HXDLIN( 236)		STBTT_MS_LANG_HEBREW = 1037;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_237_boot)
HXDLIN( 237)		STBTT_MS_LANG_SWEDISH = 1053;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_240_boot)
HXDLIN( 240)		STBTT_MAC_LANG_ENGLISH = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_241_boot)
HXDLIN( 241)		STBTT_MAC_LANG_JAPANESE = 11;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_242_boot)
HXDLIN( 242)		STBTT_MAC_LANG_ARABIC = 12;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_243_boot)
HXDLIN( 243)		STBTT_MAC_LANG_KOREAN = 23;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_244_boot)
HXDLIN( 244)		STBTT_MAC_LANG_DUTCH = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_245_boot)
HXDLIN( 245)		STBTT_MAC_LANG_RUSSIAN = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_246_boot)
HXDLIN( 246)		STBTT_MAC_LANG_FRENCH = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_247_boot)
HXDLIN( 247)		STBTT_MAC_LANG_SPANISH = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_248_boot)
HXDLIN( 248)		STBTT_MAC_LANG_GERMAN = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_249_boot)
HXDLIN( 249)		STBTT_MAC_LANG_SWEDISH = 5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_250_boot)
HXDLIN( 250)		STBTT_MAC_LANG_HEBREW = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_251_boot)
HXDLIN( 251)		STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_252_boot)
HXDLIN( 252)		STBTT_MAC_LANG_ITALIAN = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_253_boot)
HXDLIN( 253)		STBTT_MAC_LANG_CHINESE_TRAD = 19;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_255_boot)
HXDLIN( 255)		STBTT_MAX_OVERSAMPLE = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d244f07465627071_257_boot)
HXDLIN( 257)		STBTT_RASTERIZER_VERSION = 2;
            	}
}

} // end namespace kha
} // end namespace graphics2
} // end namespace truetype
