// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_SystemImpl
#include <hxinc/kha/SystemImpl.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif
#ifndef INCLUDED_kha_netsync_Session
#include <hxinc/kha/netsync/Session.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4289abc989b286ca_240_new,"kha.input.Mouse","new",0xc4b103c9,"kha.input.Mouse.new","kha/input/Mouse.hx",240,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_25_notify,"kha.input.Mouse","notify",0xc0c4ef00,"kha.input.Mouse.notify","kha/input/Mouse.hx",25,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_32_remove,"kha.input.Mouse","remove",0x9394b07b,"kha.input.Mouse.remove","kha/input/Mouse.hx",32,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_38_notifyWindowed,"kha.input.Mouse","notifyWindowed",0xdd4b736f,"kha.input.Mouse.notifyWindowed","kha/input/Mouse.hx",38,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_103_removeWindowed,"kha.input.Mouse","removeWindowed",0xf141a7ea,"kha.input.Mouse.removeWindowed","kha/input/Mouse.hx",103,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_178_lock,"kha.input.Mouse","lock",0x54e76462,"kha.input.Mouse.lock","kha/input/Mouse.hx",178,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_185_unlock,"kha.input.Mouse","unlock",0xf498b6fb,"kha.input.Mouse.unlock","kha/input/Mouse.hx",185,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_193_canLock,"kha.input.Mouse","canLock",0x01952004,"kha.input.Mouse.canLock","kha/input/Mouse.hx",193,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_200_isLocked,"kha.input.Mouse","isLocked",0x2b93708b,"kha.input.Mouse.isLocked","kha/input/Mouse.hx",200,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_208_notifyOnLockChange,"kha.input.Mouse","notifyOnLockChange",0x2e5e40da,"kha.input.Mouse.notifyOnLockChange","kha/input/Mouse.hx",208,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_215_removeFromLockChange,"kha.input.Mouse","removeFromLockChange",0x65e93ba0,"kha.input.Mouse.removeFromLockChange","kha/input/Mouse.hx",215,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_222_hideSystemCursor,"kha.input.Mouse","hideSystemCursor",0xe7b1b1fe,"kha.input.Mouse.hideSystemCursor","kha/input/Mouse.hx",222,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_229_showSystemCursor,"kha.input.Mouse","showSystemCursor",0x26c33eb9,"kha.input.Mouse.showSystemCursor","kha/input/Mouse.hx",229,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_f1abbefd2660a69d_97_sendLeaveEvent,"kha.input.Mouse","sendLeaveEvent",0xca684242,"kha.input.Mouse.sendLeaveEvent","kha/netsync/ControllerBuilder.hx",97,0xeaffa5e1)
HX_LOCAL_STACK_FRAME(_hx_pos_f1abbefd2660a69d_97_sendDownEvent,"kha.input.Mouse","sendDownEvent",0xd589f699,"kha.input.Mouse.sendDownEvent","kha/netsync/ControllerBuilder.hx",97,0xeaffa5e1)
HX_LOCAL_STACK_FRAME(_hx_pos_f1abbefd2660a69d_97_sendUpEvent,"kha.input.Mouse","sendUpEvent",0xe2927fc0,"kha.input.Mouse.sendUpEvent","kha/netsync/ControllerBuilder.hx",97,0xeaffa5e1)
HX_LOCAL_STACK_FRAME(_hx_pos_f1abbefd2660a69d_97_sendMoveEvent,"kha.input.Mouse","sendMoveEvent",0x7d3af18a,"kha.input.Mouse.sendMoveEvent","kha/netsync/ControllerBuilder.hx",97,0xeaffa5e1)
HX_LOCAL_STACK_FRAME(_hx_pos_f1abbefd2660a69d_97_sendWheelEvent,"kha.input.Mouse","sendWheelEvent",0x74cc101e,"kha.input.Mouse.sendWheelEvent","kha/netsync/ControllerBuilder.hx",97,0xeaffa5e1)
HX_LOCAL_STACK_FRAME(_hx_pos_f1abbefd2660a69d_198__receive,"kha.input.Mouse","_receive",0xdd738b5b,"kha.input.Mouse._receive","kha/netsync/ControllerBuilder.hx",198,0xeaffa5e1)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_13_get,"kha.input.Mouse","get",0xc4abb3ff,"kha.input.Mouse.get","kha/input/Mouse.hx",13,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_7_boot,"kha.input.Mouse","boot",0x4e4b4ca9,"kha.input.Mouse.boot","kha/input/Mouse.hx",7,0x8b3f5089)
namespace kha{
namespace input{

void Mouse_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_240_new)
HXLINE( 241)		super::__construct();
HXLINE( 242)		::kha::input::Mouse_obj::instance = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic Mouse_obj::__CreateEmpty() { return new Mouse_obj; }

void *Mouse_obj::_hx_vtable = 0;

Dynamic Mouse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mouse_obj > _hx_result = new Mouse_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mouse_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0aafe25f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0aafe25f;
	} else {
		return inClassId==(int)0x4a682bb4;
	}
}

void Mouse_obj::notify( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener, ::Dynamic leaveListener){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_25_notify)
HXDLIN(  25)		this->notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,notify,(void))

void Mouse_obj::remove( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener, ::Dynamic leaveListener){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_32_remove)
HXDLIN(  32)		this->removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,remove,(void))

void Mouse_obj::notifyWindowed(int windowId, ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener, ::Dynamic leaveListener){
            	HX_GC_STACKFRAME(&_hx_pos_4289abc989b286ca_38_notifyWindowed)
HXLINE(  39)		if (hx::IsNotNull( downListener )) {
HXLINE(  40)			if (hx::IsNull( this->windowDownListeners )) {
HXLINE(  41)				this->_hx_set_windowDownListeners(HX_CTX, ::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  44)			while((this->windowDownListeners->length <= windowId)){
HXLINE(  45)				::Array< ::Dynamic> _hx_tmp = this->windowDownListeners;
HXDLIN(  45)				_hx_tmp->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  48)			this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(downListener);
            		}
HXLINE(  51)		if (hx::IsNotNull( upListener )) {
HXLINE(  52)			if (hx::IsNull( this->windowUpListeners )) {
HXLINE(  53)				this->_hx_set_windowUpListeners(HX_CTX, ::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  56)			while((this->windowUpListeners->length <= windowId)){
HXLINE(  57)				::Array< ::Dynamic> _hx_tmp1 = this->windowUpListeners;
HXDLIN(  57)				_hx_tmp1->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  60)			this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(upListener);
            		}
HXLINE(  63)		if (hx::IsNotNull( moveListener )) {
HXLINE(  64)			if (hx::IsNull( this->windowMoveListeners )) {
HXLINE(  65)				this->_hx_set_windowMoveListeners(HX_CTX, ::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  68)			while((this->windowMoveListeners->length <= windowId)){
HXLINE(  69)				::Array< ::Dynamic> _hx_tmp2 = this->windowMoveListeners;
HXDLIN(  69)				_hx_tmp2->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  72)			this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(moveListener);
            		}
HXLINE(  75)		if (hx::IsNotNull( wheelListener )) {
HXLINE(  76)			if (hx::IsNull( this->windowWheelListeners )) {
HXLINE(  77)				this->_hx_set_windowWheelListeners(HX_CTX, ::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  80)			while((this->windowWheelListeners->length <= windowId)){
HXLINE(  81)				::Array< ::Dynamic> _hx_tmp3 = this->windowWheelListeners;
HXDLIN(  81)				_hx_tmp3->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  84)			this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(wheelListener);
            		}
HXLINE(  87)		if (hx::IsNotNull( leaveListener )) {
HXLINE(  88)			if (hx::IsNull( this->windowLeaveListeners )) {
HXLINE(  89)				this->_hx_set_windowLeaveListeners(HX_CTX, ::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  92)			while((this->windowLeaveListeners->length <= windowId)){
HXLINE(  93)				::Array< ::Dynamic> _hx_tmp4 = this->windowLeaveListeners;
HXDLIN(  93)				_hx_tmp4->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  96)			this->windowLeaveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(leaveListener);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Mouse_obj,notifyWindowed,(void))

void Mouse_obj::removeWindowed(int windowId, ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener, ::Dynamic leaveListener){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_103_removeWindowed)
HXLINE( 104)		if (hx::IsNotNull( downListener )) {
HXLINE( 105)			if (hx::IsNotNull( this->windowDownListeners )) {
HXLINE( 106)				if ((windowId < this->windowDownListeners->length)) {
HXLINE( 107)					this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(downListener);
            				}
            				else {
HXLINE( 110)					::haxe::Log_obj::trace(((HX_("no downListeners for window \"",ab,54,8f,21) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),110,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 114)				::haxe::Log_obj::trace(HX_("no downListeners were ever registered",27,5b,f0,02),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),114,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 118)		if (hx::IsNotNull( upListener )) {
HXLINE( 119)			if (hx::IsNotNull( this->windowUpListeners )) {
HXLINE( 120)				if ((windowId < this->windowUpListeners->length)) {
HXLINE( 121)					this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(upListener);
            				}
            				else {
HXLINE( 124)					::haxe::Log_obj::trace(((HX_("no upListeners for window \"",a4,97,3e,e5) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),124,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 128)				::haxe::Log_obj::trace(HX_("no upListeners were ever registered",20,bf,80,f7),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),128,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 132)		if (hx::IsNotNull( moveListener )) {
HXLINE( 133)			if (hx::IsNotNull( this->windowMoveListeners )) {
HXLINE( 134)				if ((windowId < this->windowMoveListeners->length)) {
HXLINE( 135)					this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(moveListener);
            				}
            				else {
HXLINE( 138)					::haxe::Log_obj::trace(((HX_("no moveListeners for window \"",9a,fa,38,bb) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),138,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 142)				::haxe::Log_obj::trace(HX_("no moveListeners were ever registered",16,08,a8,75),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),142,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 146)		if (hx::IsNotNull( wheelListener )) {
HXLINE( 147)			if (hx::IsNotNull( this->windowWheelListeners )) {
HXLINE( 148)				if ((windowId < this->windowWheelListeners->length)) {
HXLINE( 149)					this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(wheelListener);
            				}
            				else {
HXLINE( 152)					::haxe::Log_obj::trace(((HX_("no wheelListeners for window \"",c6,3b,5b,bf) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),152,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 156)				::haxe::Log_obj::trace(HX_("no wheelListeners were ever registered",42,55,f1,f8),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),156,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 160)		if (hx::IsNotNull( leaveListener )) {
HXLINE( 161)			if (hx::IsNotNull( this->windowLeaveListeners )) {
HXLINE( 162)				if ((windowId < this->windowLeaveListeners->length)) {
HXLINE( 163)					this->windowLeaveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(leaveListener);
            				}
            				else {
HXLINE( 166)					::haxe::Log_obj::trace(((HX_("no leaveListeners for window \"",22,61,f4,74) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),166,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 170)				::haxe::Log_obj::trace(HX_("no leaveListeners were ever registered",9e,36,79,22),hx::SourceInfo(HX_("kha/input/Mouse.hx",89,50,3f,8b),170,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Mouse_obj,removeWindowed,(void))

void Mouse_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_178_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,lock,(void))

void Mouse_obj::unlock(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_185_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,unlock,(void))

bool Mouse_obj::canLock(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_193_canLock)
HXDLIN( 193)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,canLock,return )

bool Mouse_obj::isLocked(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_200_isLocked)
HXDLIN( 200)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,isLocked,return )

void Mouse_obj::notifyOnLockChange( ::Dynamic change, ::Dynamic error){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_208_notifyOnLockChange)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,notifyOnLockChange,(void))

void Mouse_obj::removeFromLockChange( ::Dynamic change, ::Dynamic error){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_215_removeFromLockChange)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,removeFromLockChange,(void))

void Mouse_obj::hideSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_222_hideSystemCursor)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,hideSystemCursor,(void))

void Mouse_obj::showSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_229_showSystemCursor)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,showSystemCursor,(void))

void Mouse_obj::sendLeaveEvent(int windowId){
            	HX_STACKFRAME(&_hx_pos_f1abbefd2660a69d_97_sendLeaveEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::netsync::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(8);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[0] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[1] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[2] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[3] = ( (unsigned char)(0) );
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[4] = ( (unsigned char)(windowId) );
HXDLIN(  61)				bytes->b[5] = ( (unsigned char)((windowId >> 8)) );
HXDLIN(  61)				bytes->b[6] = ( (unsigned char)((windowId >> 16)) );
HXDLIN(  61)				bytes->b[7] = ( (unsigned char)(hx::UShr(windowId,24)) );
            			}
HXLINE( 100)			 ::kha::netsync::Session _hx_tmp = ::kha::netsync::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 247)		if (hx::IsNotNull( this->windowLeaveListeners )) {
HXLINE( 248)			int _g = 0;
HXDLIN( 248)			::Array< ::Dynamic> _g1 = this->windowLeaveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 248)			while((_g < _g1->length)){
HXLINE( 248)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 248)				_g = (_g + 1);
HXLINE( 249)				listener();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,sendLeaveEvent,(void))

void Mouse_obj::sendDownEvent(int windowId,int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f1abbefd2660a69d_97_sendDownEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::netsync::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(20);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[0] = ( (unsigned char)(1) );
HXDLIN(  50)				bytes->b[1] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[2] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[3] = ( (unsigned char)(0) );
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[4] = ( (unsigned char)(windowId) );
HXDLIN(  61)				bytes->b[5] = ( (unsigned char)((windowId >> 8)) );
HXDLIN(  61)				bytes->b[6] = ( (unsigned char)((windowId >> 16)) );
HXDLIN(  61)				bytes->b[7] = ( (unsigned char)(hx::UShr(windowId,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[8] = ( (unsigned char)(button) );
HXDLIN(  61)				bytes->b[9] = ( (unsigned char)((button >> 8)) );
HXDLIN(  61)				bytes->b[10] = ( (unsigned char)((button >> 16)) );
HXDLIN(  61)				bytes->b[11] = ( (unsigned char)(hx::UShr(button,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[12] = ( (unsigned char)(x) );
HXDLIN(  61)				bytes->b[13] = ( (unsigned char)((x >> 8)) );
HXDLIN(  61)				bytes->b[14] = ( (unsigned char)((x >> 16)) );
HXDLIN(  61)				bytes->b[15] = ( (unsigned char)(hx::UShr(x,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[16] = ( (unsigned char)(y) );
HXDLIN(  61)				bytes->b[17] = ( (unsigned char)((y >> 8)) );
HXDLIN(  61)				bytes->b[18] = ( (unsigned char)((y >> 16)) );
HXDLIN(  61)				bytes->b[19] = ( (unsigned char)(hx::UShr(y,24)) );
            			}
HXLINE( 100)			 ::kha::netsync::Session _hx_tmp = ::kha::netsync::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 256)		if (hx::IsNotNull( this->windowDownListeners )) {
HXLINE( 257)			int _g = 0;
HXDLIN( 257)			::Array< ::Dynamic> _g1 = this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 257)			while((_g < _g1->length)){
HXLINE( 257)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 257)				_g = (_g + 1);
HXLINE( 258)				listener(button,x,y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,sendDownEvent,(void))

void Mouse_obj::sendUpEvent(int windowId,int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f1abbefd2660a69d_97_sendUpEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::netsync::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(20);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[0] = ( (unsigned char)(2) );
HXDLIN(  50)				bytes->b[1] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[2] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[3] = ( (unsigned char)(0) );
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[4] = ( (unsigned char)(windowId) );
HXDLIN(  61)				bytes->b[5] = ( (unsigned char)((windowId >> 8)) );
HXDLIN(  61)				bytes->b[6] = ( (unsigned char)((windowId >> 16)) );
HXDLIN(  61)				bytes->b[7] = ( (unsigned char)(hx::UShr(windowId,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[8] = ( (unsigned char)(button) );
HXDLIN(  61)				bytes->b[9] = ( (unsigned char)((button >> 8)) );
HXDLIN(  61)				bytes->b[10] = ( (unsigned char)((button >> 16)) );
HXDLIN(  61)				bytes->b[11] = ( (unsigned char)(hx::UShr(button,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[12] = ( (unsigned char)(x) );
HXDLIN(  61)				bytes->b[13] = ( (unsigned char)((x >> 8)) );
HXDLIN(  61)				bytes->b[14] = ( (unsigned char)((x >> 16)) );
HXDLIN(  61)				bytes->b[15] = ( (unsigned char)(hx::UShr(x,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[16] = ( (unsigned char)(y) );
HXDLIN(  61)				bytes->b[17] = ( (unsigned char)((y >> 8)) );
HXDLIN(  61)				bytes->b[18] = ( (unsigned char)((y >> 16)) );
HXDLIN(  61)				bytes->b[19] = ( (unsigned char)(hx::UShr(y,24)) );
            			}
HXLINE( 100)			 ::kha::netsync::Session _hx_tmp = ::kha::netsync::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 265)		if (hx::IsNotNull( this->windowUpListeners )) {
HXLINE( 266)			int _g = 0;
HXDLIN( 266)			::Array< ::Dynamic> _g1 = this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 266)			while((_g < _g1->length)){
HXLINE( 266)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 266)				_g = (_g + 1);
HXLINE( 267)				listener(button,x,y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,sendUpEvent,(void))

void Mouse_obj::sendMoveEvent(int windowId,int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_f1abbefd2660a69d_97_sendMoveEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::netsync::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(24);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[0] = ( (unsigned char)(3) );
HXDLIN(  50)				bytes->b[1] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[2] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[3] = ( (unsigned char)(0) );
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[4] = ( (unsigned char)(windowId) );
HXDLIN(  61)				bytes->b[5] = ( (unsigned char)((windowId >> 8)) );
HXDLIN(  61)				bytes->b[6] = ( (unsigned char)((windowId >> 16)) );
HXDLIN(  61)				bytes->b[7] = ( (unsigned char)(hx::UShr(windowId,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[8] = ( (unsigned char)(x) );
HXDLIN(  61)				bytes->b[9] = ( (unsigned char)((x >> 8)) );
HXDLIN(  61)				bytes->b[10] = ( (unsigned char)((x >> 16)) );
HXDLIN(  61)				bytes->b[11] = ( (unsigned char)(hx::UShr(x,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[12] = ( (unsigned char)(y) );
HXDLIN(  61)				bytes->b[13] = ( (unsigned char)((y >> 8)) );
HXDLIN(  61)				bytes->b[14] = ( (unsigned char)((y >> 16)) );
HXDLIN(  61)				bytes->b[15] = ( (unsigned char)(hx::UShr(y,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[16] = ( (unsigned char)(movementX) );
HXDLIN(  61)				bytes->b[17] = ( (unsigned char)((movementX >> 8)) );
HXDLIN(  61)				bytes->b[18] = ( (unsigned char)((movementX >> 16)) );
HXDLIN(  61)				bytes->b[19] = ( (unsigned char)(hx::UShr(movementX,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[20] = ( (unsigned char)(movementY) );
HXDLIN(  61)				bytes->b[21] = ( (unsigned char)((movementY >> 8)) );
HXDLIN(  61)				bytes->b[22] = ( (unsigned char)((movementY >> 16)) );
HXDLIN(  61)				bytes->b[23] = ( (unsigned char)(hx::UShr(movementY,24)) );
            			}
HXLINE( 100)			 ::kha::netsync::Session _hx_tmp = ::kha::netsync::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 274)		if (hx::IsNotNull( this->windowMoveListeners )) {
HXLINE( 275)			int _g = 0;
HXDLIN( 275)			::Array< ::Dynamic> _g1 = this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 275)			while((_g < _g1->length)){
HXLINE( 275)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 275)				_g = (_g + 1);
HXLINE( 276)				listener(x,y,movementX,movementY);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,sendMoveEvent,(void))

void Mouse_obj::sendWheelEvent(int windowId,int delta){
            	HX_STACKFRAME(&_hx_pos_f1abbefd2660a69d_97_sendWheelEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::netsync::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(12);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[0] = ( (unsigned char)(4) );
HXDLIN(  50)				bytes->b[1] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[2] = ( (unsigned char)(0) );
HXDLIN(  50)				bytes->b[3] = ( (unsigned char)(0) );
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[4] = ( (unsigned char)(windowId) );
HXDLIN(  61)				bytes->b[5] = ( (unsigned char)((windowId >> 8)) );
HXDLIN(  61)				bytes->b[6] = ( (unsigned char)((windowId >> 16)) );
HXDLIN(  61)				bytes->b[7] = ( (unsigned char)(hx::UShr(windowId,24)) );
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[8] = ( (unsigned char)(delta) );
HXDLIN(  61)				bytes->b[9] = ( (unsigned char)((delta >> 8)) );
HXDLIN(  61)				bytes->b[10] = ( (unsigned char)((delta >> 16)) );
HXDLIN(  61)				bytes->b[11] = ( (unsigned char)(hx::UShr(delta,24)) );
            			}
HXLINE( 100)			 ::kha::netsync::Session _hx_tmp = ::kha::netsync::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 283)		if (hx::IsNotNull( this->windowWheelListeners )) {
HXLINE( 284)			int _g = 0;
HXDLIN( 284)			::Array< ::Dynamic> _g1 = this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 284)			while((_g < _g1->length)){
HXLINE( 284)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 284)				_g = (_g + 1);
HXLINE( 285)				listener(delta);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,sendWheelEvent,(void))

void Mouse_obj::_receive( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_f1abbefd2660a69d_198__receive)
HXLINE( 117)		int funcindex = (((( (int)(bytes->b->__get(0)) ) | (( (int)(bytes->b->__get(1)) ) << 8)) | (( (int)(bytes->b->__get(2)) ) << 16)) | (( (int)(bytes->b->__get(3)) ) << 24));
HXLINE( 190)		if ((funcindex == 0)) {
HXLINE( 145)			int input0 = (((( (int)(bytes->b->__get(4)) ) | (( (int)(bytes->b->__get(5)) ) << 8)) | (( (int)(bytes->b->__get(6)) ) << 16)) | (( (int)(bytes->b->__get(7)) ) << 24));
HXLINE( 192)			this->sendLeaveEvent(input0);
HXLINE( 193)			return;
            		}
HXLINE( 220)		if ((funcindex == 1)) {
HXLINE( 145)			int input01 = (((( (int)(bytes->b->__get(4)) ) | (( (int)(bytes->b->__get(5)) ) << 8)) | (( (int)(bytes->b->__get(6)) ) << 16)) | (( (int)(bytes->b->__get(7)) ) << 24));
HXDLIN( 145)			int input1 = (((( (int)(bytes->b->__get(8)) ) | (( (int)(bytes->b->__get(9)) ) << 8)) | (( (int)(bytes->b->__get(10)) ) << 16)) | (( (int)(bytes->b->__get(11)) ) << 24));
HXDLIN( 145)			int input2 = (((( (int)(bytes->b->__get(12)) ) | (( (int)(bytes->b->__get(13)) ) << 8)) | (( (int)(bytes->b->__get(14)) ) << 16)) | (( (int)(bytes->b->__get(15)) ) << 24));
HXDLIN( 145)			int input3 = (((( (int)(bytes->b->__get(16)) ) | (( (int)(bytes->b->__get(17)) ) << 8)) | (( (int)(bytes->b->__get(18)) ) << 16)) | (( (int)(bytes->b->__get(19)) ) << 24));
HXLINE( 222)			this->sendDownEvent(input01,input1,input2,input3);
HXLINE( 223)			return;
            		}
HXLINE( 220)		if ((funcindex == 2)) {
HXLINE( 145)			int input02 = (((( (int)(bytes->b->__get(4)) ) | (( (int)(bytes->b->__get(5)) ) << 8)) | (( (int)(bytes->b->__get(6)) ) << 16)) | (( (int)(bytes->b->__get(7)) ) << 24));
HXDLIN( 145)			int input11 = (((( (int)(bytes->b->__get(8)) ) | (( (int)(bytes->b->__get(9)) ) << 8)) | (( (int)(bytes->b->__get(10)) ) << 16)) | (( (int)(bytes->b->__get(11)) ) << 24));
HXDLIN( 145)			int input21 = (((( (int)(bytes->b->__get(12)) ) | (( (int)(bytes->b->__get(13)) ) << 8)) | (( (int)(bytes->b->__get(14)) ) << 16)) | (( (int)(bytes->b->__get(15)) ) << 24));
HXDLIN( 145)			int input31 = (((( (int)(bytes->b->__get(16)) ) | (( (int)(bytes->b->__get(17)) ) << 8)) | (( (int)(bytes->b->__get(18)) ) << 16)) | (( (int)(bytes->b->__get(19)) ) << 24));
HXLINE( 222)			this->sendUpEvent(input02,input11,input21,input31);
HXLINE( 223)			return;
            		}
HXLINE( 230)		if ((funcindex == 3)) {
HXLINE( 145)			int input03 = (((( (int)(bytes->b->__get(4)) ) | (( (int)(bytes->b->__get(5)) ) << 8)) | (( (int)(bytes->b->__get(6)) ) << 16)) | (( (int)(bytes->b->__get(7)) ) << 24));
HXDLIN( 145)			int input12 = (((( (int)(bytes->b->__get(8)) ) | (( (int)(bytes->b->__get(9)) ) << 8)) | (( (int)(bytes->b->__get(10)) ) << 16)) | (( (int)(bytes->b->__get(11)) ) << 24));
HXDLIN( 145)			int input22 = (((( (int)(bytes->b->__get(12)) ) | (( (int)(bytes->b->__get(13)) ) << 8)) | (( (int)(bytes->b->__get(14)) ) << 16)) | (( (int)(bytes->b->__get(15)) ) << 24));
HXDLIN( 145)			int input32 = (((( (int)(bytes->b->__get(16)) ) | (( (int)(bytes->b->__get(17)) ) << 8)) | (( (int)(bytes->b->__get(18)) ) << 16)) | (( (int)(bytes->b->__get(19)) ) << 24));
HXDLIN( 145)			int input4 = (((( (int)(bytes->b->__get(20)) ) | (( (int)(bytes->b->__get(21)) ) << 8)) | (( (int)(bytes->b->__get(22)) ) << 16)) | (( (int)(bytes->b->__get(23)) ) << 24));
HXLINE( 232)			this->sendMoveEvent(input03,input12,input22,input32,input4);
HXLINE( 233)			return;
            		}
HXLINE( 200)		if ((funcindex == 4)) {
HXLINE( 145)			int input04 = (((( (int)(bytes->b->__get(4)) ) | (( (int)(bytes->b->__get(5)) ) << 8)) | (( (int)(bytes->b->__get(6)) ) << 16)) | (( (int)(bytes->b->__get(7)) ) << 24));
HXDLIN( 145)			int input13 = (((( (int)(bytes->b->__get(8)) ) | (( (int)(bytes->b->__get(9)) ) << 8)) | (( (int)(bytes->b->__get(10)) ) << 16)) | (( (int)(bytes->b->__get(11)) ) << 24));
HXLINE( 202)			this->sendWheelEvent(input04,input13);
HXLINE( 203)			return;
            		}
            	}


 ::kha::input::Mouse Mouse_obj::get(hx::Null< int >  __o_num){
            		int num = __o_num.Default(0);
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_13_get)
HXDLIN(  13)		return ::kha::SystemImpl_obj::getMouse(num);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,get,return )

 ::kha::input::Mouse Mouse_obj::instance;


hx::ObjectPtr< Mouse_obj > Mouse_obj::__new() {
	hx::ObjectPtr< Mouse_obj > __this = new Mouse_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Mouse_obj > Mouse_obj::__alloc(hx::Ctx *_hx_ctx) {
	Mouse_obj *__this = (Mouse_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mouse_obj), true, "kha.input.Mouse"));
	*(void **)__this = Mouse_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Mouse_obj::Mouse_obj()
{
}

void Mouse_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mouse);
	HX_MARK_MEMBER_NAME(windowDownListeners,"windowDownListeners");
	HX_MARK_MEMBER_NAME(windowUpListeners,"windowUpListeners");
	HX_MARK_MEMBER_NAME(windowMoveListeners,"windowMoveListeners");
	HX_MARK_MEMBER_NAME(windowWheelListeners,"windowWheelListeners");
	HX_MARK_MEMBER_NAME(windowLeaveListeners,"windowLeaveListeners");
	 ::kha::netsync::Controller_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mouse_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(windowDownListeners,"windowDownListeners");
	HX_VISIT_MEMBER_NAME(windowUpListeners,"windowUpListeners");
	HX_VISIT_MEMBER_NAME(windowMoveListeners,"windowMoveListeners");
	HX_VISIT_MEMBER_NAME(windowWheelListeners,"windowWheelListeners");
	HX_VISIT_MEMBER_NAME(windowLeaveListeners,"windowLeaveListeners");
	 ::kha::netsync::Controller_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Mouse_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"notify") ) { return hx::Val( notify_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canLock") ) { return hx::Val( canLock_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isLocked") ) { return hx::Val( isLocked_dyn() ); }
		if (HX_FIELD_EQ(inName,"_receive") ) { return hx::Val( _receive_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sendUpEvent") ) { return hx::Val( sendUpEvent_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sendDownEvent") ) { return hx::Val( sendDownEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendMoveEvent") ) { return hx::Val( sendMoveEvent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"notifyWindowed") ) { return hx::Val( notifyWindowed_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeWindowed") ) { return hx::Val( removeWindowed_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendLeaveEvent") ) { return hx::Val( sendLeaveEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendWheelEvent") ) { return hx::Val( sendWheelEvent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hideSystemCursor") ) { return hx::Val( hideSystemCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"showSystemCursor") ) { return hx::Val( showSystemCursor_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"windowUpListeners") ) { return hx::Val( windowUpListeners ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"notifyOnLockChange") ) { return hx::Val( notifyOnLockChange_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"windowDownListeners") ) { return hx::Val( windowDownListeners ); }
		if (HX_FIELD_EQ(inName,"windowMoveListeners") ) { return hx::Val( windowMoveListeners ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"removeFromLockChange") ) { return hx::Val( removeFromLockChange_dyn() ); }
		if (HX_FIELD_EQ(inName,"windowWheelListeners") ) { return hx::Val( windowWheelListeners ); }
		if (HX_FIELD_EQ(inName,"windowLeaveListeners") ) { return hx::Val( windowLeaveListeners ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mouse_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
	}
	return false;
}

hx::Val Mouse_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"windowUpListeners") ) { _hx_set_windowUpListeners(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"windowDownListeners") ) { _hx_set_windowDownListeners(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"windowMoveListeners") ) { _hx_set_windowMoveListeners(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"windowWheelListeners") ) { _hx_set_windowWheelListeners(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"windowLeaveListeners") ) { _hx_set_windowLeaveListeners(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Mouse_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::kha::input::Mouse >(); return true; }
	}
	return false;
}

void Mouse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("windowDownListeners",ad,36,38,35));
	outFields->push(HX_("windowUpListeners",94,65,2c,f0));
	outFields->push(HX_("windowMoveListeners",1e,fe,7f,65));
	outFields->push(HX_("windowWheelListeners",74,51,5a,54));
	outFields->push(HX_("windowLeaveListeners",98,65,64,6b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Mouse_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Mouse_obj,windowDownListeners),HX_("windowDownListeners",ad,36,38,35)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Mouse_obj,windowUpListeners),HX_("windowUpListeners",94,65,2c,f0)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Mouse_obj,windowMoveListeners),HX_("windowMoveListeners",1e,fe,7f,65)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Mouse_obj,windowWheelListeners),HX_("windowWheelListeners",74,51,5a,54)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Mouse_obj,windowLeaveListeners),HX_("windowLeaveListeners",98,65,64,6b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Mouse_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::kha::input::Mouse */ ,(void *) &Mouse_obj::instance,HX_("instance",95,1f,e1,59)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Mouse_obj_sMemberFields[] = {
	HX_("notify",c9,da,b8,31),
	HX_("remove",44,9c,88,04),
	HX_("notifyWindowed",38,d0,2d,34),
	HX_("removeWindowed",b3,04,24,48),
	HX_("lock",eb,9b,b7,47),
	HX_("unlock",c4,a2,8c,65),
	HX_("canLock",1b,84,0f,66),
	HX_("isLocked",94,a0,30,b2),
	HX_("notifyOnLockChange",23,36,29,37),
	HX_("removeFromLockChange",29,d5,52,6f),
	HX_("hideSystemCursor",07,93,7b,81),
	HX_("showSystemCursor",c2,1f,8d,c0),
	HX_("windowDownListeners",ad,36,38,35),
	HX_("windowUpListeners",94,65,2c,f0),
	HX_("windowMoveListeners",1e,fe,7f,65),
	HX_("windowWheelListeners",74,51,5a,54),
	HX_("windowLeaveListeners",98,65,64,6b),
	HX_("sendLeaveEvent",0b,9f,4a,21),
	HX_("sendDownEvent",f0,05,55,f0),
	HX_("sendUpEvent",57,3b,46,5c),
	HX_("sendMoveEvent",e1,00,06,98),
	HX_("sendWheelEvent",e7,6c,ae,cb),
	HX_("_receive",64,bb,10,64),
	::String(null()) };

static void Mouse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mouse_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mouse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mouse_obj::instance,"instance");
};

#endif

hx::Class Mouse_obj::__mClass;

static ::String Mouse_obj_sStaticFields[] = {
	HX_("get",96,80,4e,00),
	HX_("instance",95,1f,e1,59),
	::String(null())
};

void Mouse_obj::__register()
{
	Mouse_obj _hx_dummy;
	Mouse_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.input.Mouse",57,6b,87,5e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mouse_obj::__GetStatic;
	__mClass->mSetStaticField = &Mouse_obj::__SetStatic;
	__mClass->mMarkFunc = Mouse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mouse_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mouse_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mouse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mouse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mouse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mouse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Mouse_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_7_boot)
HXDLIN(   7)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("sendMoveEvent",e1,00,06,98), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(1,HX_("sendWheelEvent",e7,6c,ae,cb), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(2,HX_("sendDownEvent",f0,05,55,f0), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(3,HX_("sendLeaveEvent",0b,9f,4a,21), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(4,HX_("sendUpEvent",57,3b,46,5c), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null()))))));
            	}
}

} // end namespace kha
} // end namespace input
