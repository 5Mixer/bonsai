// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineCache
#include <hxinc/kha/graphics4/PipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d6f545cf61b24f7e_37_new,"kha.graphics4.PipelineCache","new",0x4ca9c0a3,"kha.graphics4.PipelineCache.new","kha/graphics4/Graphics2.hx",37,0x0c1de808)
namespace kha{
namespace graphics4{

void PipelineCache_obj::__construct( ::kha::graphics4::PipelineState pipeline){
            	HX_GC_STACKFRAME(&_hx_pos_d6f545cf61b24f7e_37_new)
HXLINE(  38)		this->_hx_set_pipeline(HX_CTX, pipeline);
HXLINE(  39)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  39)			this->_hx_set_projectionLocation(HX_CTX, pipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic x = _hx_e;
HXLINE(  39)				::haxe::Log_obj::trace(x,hx::SourceInfo(HX_("kha/graphics4/Graphics2.hx",08,e8,1d,0c),39,HX_("kha.graphics4.PipelineCache",31,33,b6,f4),HX_("new",60,d0,53,00)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  40)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  40)			this->_hx_set_textureLocation(HX_CTX, pipeline->getTextureUnit(HX_("tex",e7,5d,58,00)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic x1 = _hx_e;
HXLINE(  40)				::haxe::Log_obj::trace(x1,hx::SourceInfo(HX_("kha/graphics4/Graphics2.hx",08,e8,1d,0c),40,HX_("kha.graphics4.PipelineCache",31,33,b6,f4),HX_("new",60,d0,53,00)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}

Dynamic PipelineCache_obj::__CreateEmpty() { return new PipelineCache_obj; }

void *PipelineCache_obj::_hx_vtable = 0;

Dynamic PipelineCache_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PipelineCache_obj > _hx_result = new PipelineCache_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PipelineCache_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x47778ddb;
}


hx::ObjectPtr< PipelineCache_obj > PipelineCache_obj::__new( ::kha::graphics4::PipelineState pipeline) {
	hx::ObjectPtr< PipelineCache_obj > __this = new PipelineCache_obj();
	__this->__construct(pipeline);
	return __this;
}

hx::ObjectPtr< PipelineCache_obj > PipelineCache_obj::__alloc(hx::Ctx *_hx_ctx, ::kha::graphics4::PipelineState pipeline) {
	PipelineCache_obj *__this = (PipelineCache_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PipelineCache_obj), true, "kha.graphics4.PipelineCache"));
	*(void **)__this = PipelineCache_obj::_hx_vtable;
	__this->__construct(pipeline);
	return __this;
}

PipelineCache_obj::PipelineCache_obj()
{
}

void PipelineCache_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PipelineCache);
	HX_MARK_MEMBER_NAME(pipeline,"pipeline");
	HX_MARK_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_MARK_MEMBER_NAME(textureLocation,"textureLocation");
	HX_MARK_END_CLASS();
}

void PipelineCache_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pipeline,"pipeline");
	HX_VISIT_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_VISIT_MEMBER_NAME(textureLocation,"textureLocation");
}

hx::Val PipelineCache_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { return hx::Val( pipeline ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { return hx::Val( textureLocation ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { return hx::Val( projectionLocation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PipelineCache_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { _hx_set_pipeline(HX_CTX_GET,inValue.Cast<  ::kha::graphics4::PipelineState >()); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { _hx_set_textureLocation(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { _hx_set_projectionLocation(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PipelineCache_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pipeline",22,bb,83,4b));
	outFields->push(HX_("projectionLocation",e4,59,25,9b));
	outFields->push(HX_("textureLocation",30,c6,65,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PipelineCache_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::graphics4::PipelineState */ ,(int)offsetof(PipelineCache_obj,pipeline),HX_("pipeline",22,bb,83,4b)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(PipelineCache_obj,projectionLocation),HX_("projectionLocation",e4,59,25,9b)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(PipelineCache_obj,textureLocation),HX_("textureLocation",30,c6,65,4c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PipelineCache_obj_sStaticStorageInfo = 0;
#endif

static ::String PipelineCache_obj_sMemberFields[] = {
	HX_("pipeline",22,bb,83,4b),
	HX_("projectionLocation",e4,59,25,9b),
	HX_("textureLocation",30,c6,65,4c),
	::String(null()) };

hx::Class PipelineCache_obj::__mClass;

void PipelineCache_obj::__register()
{
	PipelineCache_obj _hx_dummy;
	PipelineCache_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.PipelineCache",31,33,b6,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PipelineCache_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PipelineCache_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PipelineCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PipelineCache_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
