// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_ColoredShaderPainter
#include <hxinc/kha/graphics4/ColoredShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineCache
#include <hxinc/kha/graphics4/PipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa9e8f706269b90e_251_new,"kha.graphics4.ColoredShaderPainter","new",0x02e5b025,"kha.graphics4.ColoredShaderPainter.new","kha/graphics4/Graphics2.hx",251,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_282_get_pipeline,"kha.graphics4.ColoredShaderPainter","get_pipeline",0x7ba5eec6,"kha.graphics4.ColoredShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",282,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_285_set_pipeline,"kha.graphics4.ColoredShaderPainter","set_pipeline",0x909f123a,"kha.graphics4.ColoredShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",285,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_291_setProjection,"kha.graphics4.ColoredShaderPainter","setProjection",0x926aeed6,"kha.graphics4.ColoredShaderPainter.setProjection","kha/graphics4/Graphics2.hx",291,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_306_initBuffers,"kha.graphics4.ColoredShaderPainter","initBuffers",0x83c9bf08,"kha.graphics4.ColoredShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",306,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_340_setRectVertices,"kha.graphics4.ColoredShaderPainter","setRectVertices",0xe6315344,"kha.graphics4.ColoredShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",340,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_359_setRectColors,"kha.graphics4.ColoredShaderPainter","setRectColors",0x999e603b,"kha.graphics4.ColoredShaderPainter.setRectColors","kha/graphics4/Graphics2.hx",359,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_388_setTriVertices,"kha.graphics4.ColoredShaderPainter","setTriVertices",0x2457a01d,"kha.graphics4.ColoredShaderPainter.setTriVertices","kha/graphics4/Graphics2.hx",388,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_403_setTriColors,"kha.graphics4.ColoredShaderPainter","setTriColors",0xb69b94d4,"kha.graphics4.ColoredShaderPainter.setTriColors","kha/graphics4/Graphics2.hx",403,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_427_drawBuffer,"kha.graphics4.ColoredShaderPainter","drawBuffer",0xe9220aff,"kha.graphics4.ColoredShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",427,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_442_drawTriBuffer,"kha.graphics4.ColoredShaderPainter","drawTriBuffer",0xacdf87ec,"kha.graphics4.ColoredShaderPainter.drawTriBuffer","kha/graphics4/Graphics2.hx",442,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_461_fillRect,"kha.graphics4.ColoredShaderPainter","fillRect",0xd64d1b62,"kha.graphics4.ColoredShaderPainter.fillRect","kha/graphics4/Graphics2.hx",461,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_471_fillTriangle,"kha.graphics4.ColoredShaderPainter","fillTriangle",0x0d428406,"kha.graphics4.ColoredShaderPainter.fillTriangle","kha/graphics4/Graphics2.hx",471,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_482_endTris,"kha.graphics4.ColoredShaderPainter","endTris",0x1785fca8,"kha.graphics4.ColoredShaderPainter.endTris","kha/graphics4/Graphics2.hx",482,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_486_endRects,"kha.graphics4.ColoredShaderPainter","endRects",0x4e4d9b0f,"kha.graphics4.ColoredShaderPainter.endRects","kha/graphics4/Graphics2.hx",486,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_489_end,"kha.graphics4.ColoredShaderPainter","end",0x02dee3a0,"kha.graphics4.ColoredShaderPainter.end","kha/graphics4/Graphics2.hx",489,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_294_initShaders,"kha.graphics4.ColoredShaderPainter","initShaders",0x31bf9d43,"kha.graphics4.ColoredShaderPainter.initShaders","kha/graphics4/Graphics2.hx",294,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_253_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",253,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_254_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",254,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_256_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",256,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_262_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",262,0x0c1de808)
namespace kha{
namespace graphics4{

void ColoredShaderPainter_obj::__construct(::Dynamic g4){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_251_new)
HXLINE( 269)		this->_hx_set_myPipeline(HX_CTX, null());
HXLINE( 273)		this->_hx_set_g(HX_CTX, g4);
HXLINE( 274)		::kha::graphics4::ColoredShaderPainter_obj::bufferIndex = 0;
HXLINE( 275)		::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex = 0;
HXLINE( 276)		::kha::graphics4::ColoredShaderPainter_obj::initShaders();
HXLINE( 277)		this->_hx_set_myPipeline(HX_CTX, ::kha::graphics4::ColoredShaderPainter_obj::standardColorPipeline);
HXLINE( 278)		this->initBuffers();
            	}

Dynamic ColoredShaderPainter_obj::__CreateEmpty() { return new ColoredShaderPainter_obj; }

void *ColoredShaderPainter_obj::_hx_vtable = 0;

Dynamic ColoredShaderPainter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColoredShaderPainter_obj > _hx_result = new ColoredShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ColoredShaderPainter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x259d6849;
}

 ::kha::graphics4::PipelineCache ColoredShaderPainter_obj::get_pipeline(){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_282_get_pipeline)
HXDLIN( 282)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,get_pipeline,return )

 ::kha::graphics4::PipelineCache ColoredShaderPainter_obj::set_pipeline( ::kha::graphics4::PipelineCache pipe){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_285_set_pipeline)
HXLINE( 286)		 ::kha::graphics4::PipelineCache _hx_tmp;
HXDLIN( 286)		if (hx::IsNotNull( pipe )) {
HXLINE( 286)			_hx_tmp = pipe;
            		}
            		else {
HXLINE( 286)			_hx_tmp = ::kha::graphics4::ColoredShaderPainter_obj::standardColorPipeline;
            		}
HXDLIN( 286)		this->_hx_set_myPipeline(HX_CTX, _hx_tmp);
HXLINE( 287)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,set_pipeline,return )

void ColoredShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_291_setProjection)
HXDLIN( 291)		this->_hx_set_projectionMatrix(HX_CTX, projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,setProjection,(void))

void ColoredShaderPainter_obj::initBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_306_initBuffers)
HXDLIN( 306)		if (hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer )) {
HXLINE( 307)			::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,4000,::kha::graphics4::ColoredShaderPainter_obj::structure,1,null(),null());
HXLINE( 308)			::kha::graphics4::ColoredShaderPainter_obj::rectVertices = ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->lock(null(),null());
HXLINE( 310)			::kha::graphics4::ColoredShaderPainter_obj::indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,6000,0,null());
HXLINE( 311)			 ::kha::arrays::Uint32ArrayPrivate indices = ::kha::graphics4::ColoredShaderPainter_obj::indexBuffer->lock(null(),null());
HXLINE( 312)			{
HXLINE( 312)				int _g = 0;
HXDLIN( 312)				while((_g < 1000)){
HXLINE( 312)					_g = (_g + 1);
HXDLIN( 312)					int i = (_g - 1);
HXLINE( 313)					indices->self.set(((i * 3) * 2),(i * 4));
HXLINE( 314)					indices->self.set((((i * 3) * 2) + 1),((i * 4) + 1));
HXLINE( 315)					indices->self.set((((i * 3) * 2) + 2),((i * 4) + 2));
HXLINE( 316)					indices->self.set((((i * 3) * 2) + 3),(i * 4));
HXLINE( 317)					indices->self.set((((i * 3) * 2) + 4),((i * 4) + 2));
HXLINE( 318)					indices->self.set((((i * 3) * 2) + 5),((i * 4) + 3));
            				}
            			}
HXLINE( 320)			::kha::graphics4::ColoredShaderPainter_obj::indexBuffer->unlock(null());
HXLINE( 322)			::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,3000,::kha::graphics4::ColoredShaderPainter_obj::structure,1,null(),null());
HXLINE( 323)			::kha::graphics4::ColoredShaderPainter_obj::triangleVertices = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->lock(null(),null());
HXLINE( 325)			::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,3000,0,null());
HXLINE( 326)			 ::kha::arrays::Uint32ArrayPrivate triIndices = ::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer->lock(null(),null());
HXLINE( 327)			{
HXLINE( 327)				int _g1 = 0;
HXDLIN( 327)				while((_g1 < 1000)){
HXLINE( 327)					_g1 = (_g1 + 1);
HXDLIN( 327)					int i1 = (_g1 - 1);
HXLINE( 328)					triIndices->self.set((i1 * 3),(i1 * 3));
HXLINE( 329)					triIndices->self.set(((i1 * 3) + 1),((i1 * 3) + 1));
HXLINE( 330)					triIndices->self.set(((i1 * 3) + 2),((i1 * 3) + 2));
            				}
            			}
HXLINE( 332)			::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer->unlock(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,initBuffers,(void))

void ColoredShaderPainter_obj::setRectVertices(Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_340_setRectVertices)
HXLINE( 341)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 7) * 4);
HXLINE( 342)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set(baseIndex,( (float)(bottomleftx) ));
HXLINE( 343)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 1),( (float)(bottomlefty) ));
HXLINE( 344)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 2),( (float)(((Float)-5.0)) ));
HXLINE( 346)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 7),( (float)(topleftx) ));
HXLINE( 347)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 8),( (float)(toplefty) ));
HXLINE( 348)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 9),( (float)(((Float)-5.0)) ));
HXLINE( 350)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 14),( (float)(toprightx) ));
HXLINE( 351)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 15),( (float)(toprighty) ));
HXLINE( 352)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 16),( (float)(((Float)-5.0)) ));
HXLINE( 354)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 21),( (float)(bottomrightx) ));
HXLINE( 355)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 22),( (float)(bottomrighty) ));
HXLINE( 356)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 23),( (float)(((Float)-5.0)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC8(ColoredShaderPainter_obj,setRectVertices,(void))

void ColoredShaderPainter_obj::setRectColors(float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_359_setRectColors)
HXLINE( 360)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 7) * 4);
HXLINE( 362)		float a = (opacity * (( (float)(hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 363)		float r = (a * (( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 364)		float g = (a * (( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 365)		float b = (a * (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 367)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 3),r);
HXLINE( 368)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 4),g);
HXLINE( 369)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 5),b);
HXLINE( 370)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 6),a);
HXLINE( 372)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 10),r);
HXLINE( 373)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 11),g);
HXLINE( 374)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 12),b);
HXLINE( 375)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 13),a);
HXLINE( 377)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 17),r);
HXLINE( 378)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 18),g);
HXLINE( 379)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 19),b);
HXLINE( 380)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 20),a);
HXLINE( 382)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 24),r);
HXLINE( 383)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 25),g);
HXLINE( 384)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 26),b);
HXLINE( 385)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 27),a);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColoredShaderPainter_obj,setRectColors,(void))

void ColoredShaderPainter_obj::setTriVertices(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_388_setTriVertices)
HXLINE( 389)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 7) * 3);
HXLINE( 390)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set(baseIndex,( (float)(x1) ));
HXLINE( 391)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 1),( (float)(y1) ));
HXLINE( 392)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 2),( (float)(((Float)-5.0)) ));
HXLINE( 394)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 7),( (float)(x2) ));
HXLINE( 395)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 8),( (float)(y2) ));
HXLINE( 396)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 9),( (float)(((Float)-5.0)) ));
HXLINE( 398)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 14),( (float)(x3) ));
HXLINE( 399)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 15),( (float)(y3) ));
HXLINE( 400)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 16),( (float)(((Float)-5.0)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC6(ColoredShaderPainter_obj,setTriVertices,(void))

void ColoredShaderPainter_obj::setTriColors(float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_403_setTriColors)
HXLINE( 404)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 7) * 3);
HXLINE( 406)		float a = (opacity * (( (float)(hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 407)		float r = (a * (( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 408)		float g = (a * (( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 409)		float b = (a * (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 411)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 3),r);
HXLINE( 412)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 4),g);
HXLINE( 413)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 5),b);
HXLINE( 414)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 6),a);
HXLINE( 416)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 10),r);
HXLINE( 417)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 11),g);
HXLINE( 418)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 12),b);
HXLINE( 419)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 13),a);
HXLINE( 421)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 17),r);
HXLINE( 422)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 18),g);
HXLINE( 423)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 19),b);
HXLINE( 424)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 20),a);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColoredShaderPainter_obj,setTriColors,(void))

void ColoredShaderPainter_obj::drawBuffer(bool trisDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_427_drawBuffer)
HXLINE( 428)		if (!(trisDone)) {
HXLINE( 428)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 428)				this->drawTriBuffer(true);
            			}
            		}
HXLINE( 430)		::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->unlock((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 4));
HXLINE( 431)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer);
HXLINE( 432)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::indexBuffer);
HXLINE( 433)		::kha::graphics4::Graphics_obj::setPipeline(this->g,this->myPipeline->pipeline);
HXLINE( 434)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->myPipeline->projectionLocation,this->projectionMatrix);
HXLINE( 436)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,0,((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 2) * 3));
HXLINE( 438)		::kha::graphics4::ColoredShaderPainter_obj::bufferIndex = 0;
HXLINE( 439)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices = ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,drawBuffer,(void))

void ColoredShaderPainter_obj::drawTriBuffer(bool rectsDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_442_drawTriBuffer)
HXLINE( 443)		if (!(rectsDone)) {
HXLINE( 443)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 443)				this->drawBuffer(true);
            			}
            		}
HXLINE( 445)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->unlock((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 3));
HXLINE( 446)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer);
HXLINE( 447)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer);
HXLINE( 448)		::kha::graphics4::Graphics_obj::setPipeline(this->g,this->myPipeline->pipeline);
HXLINE( 449)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->myPipeline->projectionLocation,this->projectionMatrix);
HXLINE( 451)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,0,(::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 3));
HXLINE( 453)		::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex = 0;
HXLINE( 454)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,drawTriBuffer,(void))

void ColoredShaderPainter_obj::fillRect(float opacity,int color,Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_461_fillRect)
HXLINE( 462)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 462)			this->drawTriBuffer(true);
            		}
HXLINE( 464)		if (((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex + 1) >= 1000)) {
HXLINE( 464)			this->drawBuffer(false);
            		}
HXLINE( 466)		this->setRectColors(opacity,color);
HXLINE( 467)		this->setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
HXLINE( 468)		++::kha::graphics4::ColoredShaderPainter_obj::bufferIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC10(ColoredShaderPainter_obj,fillRect,(void))

void ColoredShaderPainter_obj::fillTriangle(float opacity,int color,Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_471_fillTriangle)
HXLINE( 472)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 472)			this->drawBuffer(true);
            		}
HXLINE( 474)		if (((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex + 1) >= 1000)) {
HXLINE( 474)			this->drawTriBuffer(false);
            		}
HXLINE( 476)		this->setTriColors(opacity,color);
HXLINE( 477)		this->setTriVertices(x1,y1,x2,y2,x3,y3);
HXLINE( 478)		++::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC8(ColoredShaderPainter_obj,fillTriangle,(void))

void ColoredShaderPainter_obj::endTris(bool rectsDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_482_endTris)
HXDLIN( 482)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXDLIN( 482)			this->drawTriBuffer(rectsDone);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,endTris,(void))

void ColoredShaderPainter_obj::endRects(bool trisDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_486_endRects)
HXDLIN( 486)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXDLIN( 486)			this->drawBuffer(trisDone);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,endRects,(void))

void ColoredShaderPainter_obj::end(){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_489_end)
HXLINE( 490)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 490)			this->drawTriBuffer(false);
            		}
HXLINE( 491)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 491)			this->drawBuffer(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,end,(void))

 ::kha::graphics4::PipelineCache ColoredShaderPainter_obj::standardColorPipeline;

 ::kha::graphics4::VertexStructure ColoredShaderPainter_obj::structure;

int ColoredShaderPainter_obj::bufferSize;

int ColoredShaderPainter_obj::bufferIndex;

 ::kha::graphics4::VertexBuffer ColoredShaderPainter_obj::rectVertexBuffer;

 ::kha::arrays::Float32ArrayPrivate ColoredShaderPainter_obj::rectVertices;

 ::kha::graphics4::IndexBuffer ColoredShaderPainter_obj::indexBuffer;

int ColoredShaderPainter_obj::triangleBufferSize;

int ColoredShaderPainter_obj::triangleBufferIndex;

 ::kha::graphics4::VertexBuffer ColoredShaderPainter_obj::triangleVertexBuffer;

 ::kha::arrays::Float32ArrayPrivate ColoredShaderPainter_obj::triangleVertices;

 ::kha::graphics4::IndexBuffer ColoredShaderPainter_obj::triangleIndexBuffer;

void ColoredShaderPainter_obj::initShaders(){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_294_initShaders)
HXLINE( 295)		if (hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::structure )) {
HXLINE( 296)			::kha::graphics4::ColoredShaderPainter_obj::structure = ::kha::graphics4::Graphics2_obj::createColoredVertexStructure();
            		}
HXLINE( 298)		if (hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::standardColorPipeline )) {
HXLINE( 299)			 ::kha::graphics4::PipelineState pipeline = ::kha::graphics4::Graphics2_obj::createColoredPipeline(::kha::graphics4::ColoredShaderPainter_obj::structure);
HXLINE( 300)			pipeline->compile();
HXLINE( 301)			::kha::graphics4::ColoredShaderPainter_obj::standardColorPipeline =  ::kha::graphics4::PipelineCache_obj::__alloc( HX_CTX ,pipeline);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,initShaders,(void))


hx::ObjectPtr< ColoredShaderPainter_obj > ColoredShaderPainter_obj::__new(::Dynamic g4) {
	hx::ObjectPtr< ColoredShaderPainter_obj > __this = new ColoredShaderPainter_obj();
	__this->__construct(g4);
	return __this;
}

hx::ObjectPtr< ColoredShaderPainter_obj > ColoredShaderPainter_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic g4) {
	ColoredShaderPainter_obj *__this = (ColoredShaderPainter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ColoredShaderPainter_obj), true, "kha.graphics4.ColoredShaderPainter"));
	*(void **)__this = ColoredShaderPainter_obj::_hx_vtable;
	__this->__construct(g4);
	return __this;
}

ColoredShaderPainter_obj::ColoredShaderPainter_obj()
{
}

void ColoredShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColoredShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_END_CLASS();
}

void ColoredShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
}

hx::Val ColoredShaderPainter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endTris") ) { return hx::Val( endTris_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pipeline() ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"endRects") ) { return hx::Val( endRects_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return hx::Val( myPipeline ); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return hx::Val( drawBuffer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return hx::Val( initBuffers_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return hx::Val( get_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return hx::Val( set_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTriColors") ) { return hx::Val( setTriColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillTriangle") ) { return hx::Val( fillTriangle_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRectColors") ) { return hx::Val( setRectColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriBuffer") ) { return hx::Val( drawTriBuffer_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setTriVertices") ) { return hx::Val( setTriVertices_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return hx::Val( setRectVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ColoredShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = ( structure ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { outValue = ( bufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { outValue = ( indexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { outValue = ( rectVertices ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { outValue = ( rectVertexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"triangleVertices") ) { outValue = ( triangleVertices ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"triangleBufferIndex") ) { outValue = ( triangleBufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"triangleIndexBuffer") ) { outValue = ( triangleIndexBuffer ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"triangleVertexBuffer") ) { outValue = ( triangleVertexBuffer ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"standardColorPipeline") ) { outValue = ( standardColorPipeline ); return true; }
	}
	return false;
}

hx::Val ColoredShaderPainter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { _hx_set_g(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pipeline(inValue.Cast<  ::kha::graphics4::PipelineCache >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { _hx_set_myPipeline(HX_CTX_GET,inValue.Cast<  ::kha::graphics4::PipelineCache >()); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { _hx_set_projectionMatrix(HX_CTX_GET,inValue.Cast<  ::kha::math::FastMatrix4 >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ColoredShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=ioValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
		if (HX_FIELD_EQ(inName,"triangleVertices") ) { triangleVertices=ioValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"triangleBufferIndex") ) { triangleBufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"triangleIndexBuffer") ) { triangleIndexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"triangleVertexBuffer") ) { triangleVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"standardColorPipeline") ) { standardColorPipeline=ioValue.Cast<  ::kha::graphics4::PipelineCache >(); return true; }
	}
	return false;
}

void ColoredShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myPipeline",ae,22,05,b9));
	outFields->push(HX_("pipeline",22,bb,83,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ColoredShaderPainter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(int)offsetof(ColoredShaderPainter_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(ColoredShaderPainter_obj,g),HX_("g",67,00,00,00)},
	{hx::fsObject /*  ::kha::graphics4::PipelineCache */ ,(int)offsetof(ColoredShaderPainter_obj,myPipeline),HX_("myPipeline",ae,22,05,b9)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ColoredShaderPainter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::kha::graphics4::PipelineCache */ ,(void *) &ColoredShaderPainter_obj::standardColorPipeline,HX_("standardColorPipeline",28,1a,f5,20)},
	{hx::fsObject /*  ::kha::graphics4::VertexStructure */ ,(void *) &ColoredShaderPainter_obj::structure,HX_("structure",33,54,4f,47)},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::bufferSize,HX_("bufferSize",e1,09,64,9d)},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::bufferIndex,HX_("bufferIndex",f2,2d,60,5b)},
	{hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &ColoredShaderPainter_obj::rectVertexBuffer,HX_("rectVertexBuffer",c8,6e,b4,97)},
	{hx::fsObject /*  ::kha::arrays::Float32ArrayPrivate */ ,(void *) &ColoredShaderPainter_obj::rectVertices,HX_("rectVertices",3d,8d,f6,54)},
	{hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &ColoredShaderPainter_obj::indexBuffer,HX_("indexBuffer",b2,65,a6,f5)},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::triangleBufferSize,HX_("triangleBufferSize",c9,16,78,ab)},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::triangleBufferIndex,HX_("triangleBufferIndex",0a,6c,d7,9e)},
	{hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &ColoredShaderPainter_obj::triangleVertexBuffer,HX_("triangleVertexBuffer",6c,c6,88,35)},
	{hx::fsObject /*  ::kha::arrays::Float32ArrayPrivate */ ,(void *) &ColoredShaderPainter_obj::triangleVertices,HX_("triangleVertices",e1,42,15,97)},
	{hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &ColoredShaderPainter_obj::triangleIndexBuffer,HX_("triangleIndexBuffer",ca,a3,1d,39)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ColoredShaderPainter_obj_sMemberFields[] = {
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("g",67,00,00,00),
	HX_("myPipeline",ae,22,05,b9),
	HX_("get_pipeline",2b,6f,9d,00),
	HX_("set_pipeline",9f,92,96,15),
	HX_("setProjection",d1,c6,03,66),
	HX_("initBuffers",43,12,fb,69),
	HX_("setRectVertices",ff,5f,ac,73),
	HX_("setRectColors",36,38,37,6d),
	HX_("setTriVertices",c2,c3,7b,76),
	HX_("setTriColors",39,15,93,3b),
	HX_("drawBuffer",24,38,58,12),
	HX_("drawTriBuffer",e7,5f,78,80),
	HX_("fillRect",47,45,b9,6c),
	HX_("fillTriangle",6b,04,3a,92),
	HX_("endTris",63,56,28,2f),
	HX_("endRects",f4,c4,b9,e4),
	HX_("end",db,03,4d,00),
	::String(null()) };

static void ColoredShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::standardColorPipeline,"standardColorPipeline");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferSize,"triangleBufferSize");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferIndex,"triangleBufferIndex");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertexBuffer,"triangleVertexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertices,"triangleVertices");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleIndexBuffer,"triangleIndexBuffer");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColoredShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::standardColorPipeline,"standardColorPipeline");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferSize,"triangleBufferSize");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferIndex,"triangleBufferIndex");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertexBuffer,"triangleVertexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertices,"triangleVertices");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleIndexBuffer,"triangleIndexBuffer");
};

#endif

hx::Class ColoredShaderPainter_obj::__mClass;

static ::String ColoredShaderPainter_obj_sStaticFields[] = {
	HX_("standardColorPipeline",28,1a,f5,20),
	HX_("structure",33,54,4f,47),
	HX_("bufferSize",e1,09,64,9d),
	HX_("bufferIndex",f2,2d,60,5b),
	HX_("rectVertexBuffer",c8,6e,b4,97),
	HX_("rectVertices",3d,8d,f6,54),
	HX_("indexBuffer",b2,65,a6,f5),
	HX_("triangleBufferSize",c9,16,78,ab),
	HX_("triangleBufferIndex",0a,6c,d7,9e),
	HX_("triangleVertexBuffer",6c,c6,88,35),
	HX_("triangleVertices",e1,42,15,97),
	HX_("triangleIndexBuffer",ca,a3,1d,39),
	HX_("initShaders",7e,f0,f0,17),
	::String(null())
};

void ColoredShaderPainter_obj::__register()
{
	ColoredShaderPainter_obj _hx_dummy;
	ColoredShaderPainter_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.ColoredShaderPainter",b3,b9,9f,76);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColoredShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &ColoredShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = ColoredShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ColoredShaderPainter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColoredShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColoredShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColoredShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColoredShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColoredShaderPainter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColoredShaderPainter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_253_boot)
HXDLIN( 253)		standardColorPipeline = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_254_boot)
HXDLIN( 254)		structure = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_256_boot)
HXDLIN( 256)		bufferSize = 1000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_262_boot)
HXDLIN( 262)		triangleBufferSize = 1000;
            	}
}

} // end namespace kha
} // end namespace graphics4
